
**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
- `f_max = {f_max:.3f}%` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã
- `K0 = {K0:.3e}` - –ø—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
- `Q = {Q/1000:.1f} –∫–î–∂/–º–æ–ª—å` - —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
- `n = {n:.3f}` - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ –≤ –º–æ–¥–µ–ª–∏ –ê–≤—Ä–∞–º–∏
- `Œ± = {alpha:.3f}` - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞
- `w = {w:.3f}` - –≤–µ—Å —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
- `Œ≤ = {beta:.0f}` - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Å—Ç–µ–ø–µ–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–µ
"""
    
    def predict_temperature(self, G, sigma_percent, t, method="bisection"):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        if self.params is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
        
        sigma = sigma_percent
        
        if method == "bisection":
            return self._predict_temperature_bisection(G, sigma, t)
        else:
            return self._predict_temperature_analytic(G, sigma, t)
    
    def _predict_temperature_bisection(self, G, sigma, t, tol=1.0, max_iter=100):
        """–ë–∏—Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        T_min, T_max = 500, 900  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        
        for i in range(max_iter):
            T_mid = (T_min + T_max) / 2
            f_pred = self._evaluate_model(G, T_mid, t)
            
            if abs(f_pred - sigma) < tol:
                return T_mid
            
            if f_pred < sigma:
                T_min = T_mid
            else:
                T_max = T_mid
        
        return (T_min + T_max) / 2
    
    def _evaluate_model(self, G, T, t):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.params is None:
            return 0.0
            
        T_kelvin = T + 273.15
        f_max, K0, Q, n, alpha, w, beta = self.params
        R = 8.314
        
        # –ê–≤—Ä–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        grain_effect_avrami = 1 + alpha * (G - 8)
        K_avrami = K0 * np.exp(-Q / (R * T_kelvin)) * grain_effect_avrami
        f_avrami = f_max * (1 - np.exp(-K_avrami * (t ** n)))
        
        # –°—Ç–µ–ø–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        temp_effect_power = np.exp(beta / (R * T_kelvin))
        f_power = w * temp_effect_power * (t ** 0.5) * (1 + 0.05 * (G - 8))
        
        return f_avrami + f_power
    
    def calculate_validation_metrics(self, data):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.params is None:
            return None
        
        G = data['G'].values
        T = data['T'].values
        t = data['t'].values
        f_exp = data['f_exp (%)'].values
        
        f_pred = np.array([self._evaluate_model(g, temp, time) for g, temp, time in zip(G, T, t)])
        
        residuals = f_pred - f_exp
        relative_errors = (residuals / f_exp) * 100
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        valid_mask = np.isfinite(relative_errors) & (f_exp > 0.1)
        f_exp_valid = f_exp[valid_mask]
        f_pred_valid = f_pred[valid_mask]
        residuals_valid = residuals[valid_mask]
        relative_errors_valid = relative_errors[valid_mask]
        
        if len(f_exp_valid) == 0:
            return None
            
        mae = np.mean(np.abs(residuals_valid))
        rmse = np.sqrt(mean_squared_error(f_exp_valid, f_pred_valid))
        mape = np.mean(np.abs(relative_errors_valid))
        r2 = r2_score(f_exp_valid, f_pred_valid)
        
        validation_results = {
            'data': data.copy(),
            'predictions': f_pred,
            'residuals': residuals,
            'relative_errors': relative_errors,
            'metrics': {
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape,
                'R2': r2
            }
        }
        
        return validation_results

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = None
    if 'current_data' not in st.session_state:
        st.session_state.current_data = None
    if 'validation_results' not in st.session_state:
        st.session_state.validation_results = None
    if 'excluded_points' not in st.session_state:
        st.session_state.excluded_points = set()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    sample_data = pd.DataFrame({
        'G': [8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        'T': [600, 600, 600, 600, 650, 650, 650, 650, 600, 600, 600, 600, 650, 650, 650, 650, 600, 600, 600, 600, 650, 650, 650, 650, 700, 700],
        't': [2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000],
        'f_exp (%)': [1.76, 0.68, 0.94, 1.09, 0.67, 1.2, 1.48, 1.13, 0.87, 1.28, 2.83, 3.25, 1.88, 2.29, 3.25, 2.89, 1.261, 2.04, 2.38, 3.3, 3.2, 4.26, 5.069, 5.41, 3.3, 5.0]
    })
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if st.session_state.current_data is None:
        st.session_state.current_data = sample_data
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.header("üîß –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ç–æ—á–µ–∫")
    
    st.info("""
    **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –†—É—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    - –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã –º–æ–¥–µ–ª–∏
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏ –±–µ–∑
    """)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        display_data = st.session_state.current_data.copy()
        display_data['–í–∫–ª—é—á–∏—Ç—å'] = [i not in st.session_state.excluded_points for i in range(len(display_data))]
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—á–µ–∫
        edited_data = st.data_editor(
            display_data,
            column_config={
                "–í–∫–ª—é—á–∏—Ç—å": st.column_config.CheckboxColumn(
                    "–í–∫–ª—é—á–∏—Ç—å –≤ –∞–Ω–∞–ª–∏–∑",
                    help="–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"
                ),
                "f_exp (%)": st.column_config.NumberColumn(format="%.3f"),
                "G": st.column_config.NumberColumn(format="%d"),
                "T": st.column_config.NumberColumn(format="%.1f"),
                "t": st.column_config.NumberColumn(format="%d")
            },
            disabled=["G", "T", "t", "f_exp (%)"],
            use_container_width=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        new_excluded = set()
        for i, included in enumerate(edited_data['–í–∫–ª—é—á–∏—Ç—å']):
            if not included:
                new_excluded.add(i)
        
        if new_excluded != st.session_state.excluded_points:
            st.session_state.excluded_points = new_excluded
            st.session_state.analyzer = None
            st.session_state.validation_results = None
            st.rerun()
    
    with col2:
        st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        total_points = len(st.session_state.current_data)
        excluded_count = len(st.session_state.excluded_points)
        included_count = total_points - excluded_count
        
        st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", total_points)
        st.metric("–í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑", included_count)
        st.metric("–ò—Å–∫–ª—é—á–µ–Ω–æ", excluded_count)
        
        if excluded_count > 0:
            st.info(f"–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏: {sorted(st.session_state.excluded_points)}")
            
            if st.button("üîÑ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏"):
                st.session_state.excluded_points = set()
                st.session_state.analyzer = None
                st.session_state.validation_results = None
                st.rerun()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏)
    analysis_data = st.session_state.current_data.copy()
    if st.session_state.excluded_points:
        analysis_data = analysis_data.drop(list(st.session_state.excluded_points)).reset_index(drop=True)
    
    # –ü–æ–¥–±–æ—Ä –º–æ–¥–µ–ª–∏
    st.header("üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", use_container_width=True):
        analyzer = AdvancedSigmaPhaseAnalyzer()
        
        with st.spinner("–ü–æ–¥–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏..."):
            success = analyzer.fit_ensemble_model(analysis_data)
        
        if success:
            st.session_state.analyzer = analyzer
            validation_results = analyzer.calculate_validation_metrics(analysis_data)
            st.session_state.validation_results = validation_results
            
            st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! R¬≤ = {analyzer.R2:.4f}")
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.analyzer is not None and st.session_state.validation_results is not None:
        analyzer = st.session_state.analyzer
        validation = st.session_state.validation_results
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            
            metrics = validation['metrics']
            
            st.metric("R¬≤", f"{metrics['R2']:.4f}")
            st.metric("MAE", f"{metrics['MAE']:.3f}%")
            st.metric("RMSE", f"{metrics['RMSE']:.3f}%")
            st.metric("MAPE", f"{metrics['MAPE']:.2f}%")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if metrics['MAPE'] < 15:
                st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏!")
            elif metrics['MAPE'] < 25:
                st.warning("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏")
            else:
                st.error("‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=validation['data']['f_exp (%)'],
                y=validation['predictions'],
                mode='markers',
                name='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è',
                marker=dict(size=10, color='blue')
            ))
            fig.add_trace(go.Scatter(
                x=[0, 6], y=[0, 6],
                mode='lines',
                name='–ò–¥–µ–∞–ª—å–Ω–æ',
                line=dict(color='red', dash='dash')
            ))
            fig.update_layout(
                title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ vs –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç',
                xaxis_title='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (%)',
                yaxis_title='–†–∞—Å—á–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (%)',
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.header("üßÆ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞")
            st.markdown(analyzer.final_formula)
            
            # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.header("üîç –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            
            G_input = st.number_input("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ (G)", value=8.0, min_value=-3.0, max_value=14.0, step=0.1)
            sigma_input = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã (%)", value=2.0, min_value=0.0, max_value=20.0, step=0.1)
            t_input = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (—á)", value=4000, min_value=100, max_value=500000, step=100)
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"):
                try:
                    T_pred = analyzer.predict_temperature(G_input, sigma_input, t_input)
                    if T_pred is not None:
                        st.success(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {T_pred:.1f}¬∞C")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        st.header("üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        
        comparison_df = validation['data'].copy()
        comparison_df['f_pred (%)'] = validation['predictions']
        comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'] = validation['residuals']
        comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'] = validation['relative_errors']
        comparison_df['f_pred (%)'] = comparison_df['f_pred (%)'].round(3)
        comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'] = comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'].round(3)
        comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'] = comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'].round(1)
        
        st.dataframe(comparison_df, use_container_width=True)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if st.button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"):
            results = {
                'parameters': analyzer.params.tolist() if analyzer.params is not None else [],
                'metrics': validation['metrics'],
                'formula': analyzer.final_formula,
                'data_used': analysis_data.to_dict(),
                'excluded_points': list(st.session_state.excluded_points)
            }
            
            results_json = json.dumps(results, indent=2, ensure_ascii=False)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å JSON",
                data=results_json,
                file_name="sigma_phase_analysis.json",
                mime="application/json"
            )

if __name__ == "__main__":
    main()
