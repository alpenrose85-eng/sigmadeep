import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import io
import warnings
warnings.filterwarnings('ignore')

# –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∑–µ—Ä–µ–Ω –∏–∑ –ì–û–°–¢
GRAIN_DATA = {
    'G': [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    'a_v': [1.000, 0.500, 0.250, 0.125, 0.0625, 0.0312, 0.0156, 0.00781, 0.00390, 
            0.00195, 0.00098, 0.00049, 0.000244, 0.000122, 0.000061, 0.000030, 0.000015, 0.000008],
    'd_av': [1.000, 0.707, 0.500, 0.353, 0.250, 0.177, 0.125, 0.088, 0.062, 
             0.044, 0.031, 0.022, 0.015, 0.011, 0.0079, 0.0056, 0.0039, 0.0027]
}

grain_df = pd.DataFrame(GRAIN_DATA)
grain_df['inv_sqrt_a_v'] = 1 / np.sqrt(grain_df['a_v'])
grain_df['ln_inv_sqrt_a_v'] = np.log(grain_df['inv_sqrt_a_v'])

class SigmaPhaseModel:
    def __init__(self):
        self.coef_ = None
        self.intercept_ = None
        self.r2 = None
        self.rmse = None
        self.mae = None
        
    def fit(self, X, y):
        """–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è intercept
        X_with_intercept = np.column_stack([np.ones(X.shape[0]), X])
        
        # –†–µ—à–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: (X^T X)^{-1} X^T y
        try:
            coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ y
            self.intercept_ = coefficients[0]
            self.coef_ = coefficients[1:]
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            y_pred = self.predict_ln_d(X)
            self.r2 = self.calculate_r2(y, y_pred)
            self.rmse = self.calculate_rmse(y, y_pred)
            self.mae = self.calculate_mae(y, y_pred)
            
        except np.linalg.LinAlgError:
            st.error("–û—à–∏–±–∫–∞: –º–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å.")
            return None
        
        return self
    
    def predict_ln_d(self, X):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ln(d)"""
        return self.intercept_ + X @ self.coef_
    
    def calculate_r2(self, y_true, y_pred):
        """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤"""
        ss_res = np.sum((y_true - y_pred) ** 2)
        ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)
        return 1 - (ss_res / ss_tot)
    
    def calculate_rmse(self, y_true, y_pred):
        """–†–∞—Å—á–µ—Ç RMSE"""
        return np.sqrt(np.mean((y_true - y_pred) ** 2))
    
    def calculate_mae(self, y_true, y_pred):
        """–†–∞—Å—á–µ—Ç MAE"""
        return np.mean(np.abs(y_true - y_pred))
    
    def predict_temperature(self, d_sigma, time_hours, grain_size):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –º–æ–¥–µ–ª–∏"""
        if self.coef_ is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–µ—Ä–Ω—É
        grain_info = grain_df[grain_df['G'] == grain_size]
        if len(grain_info) == 0:
            raise ValueError(f"–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ {grain_size} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        ln_inv_sqrt_a_v = grain_info['ln_inv_sqrt_a_v'].iloc[0]
        
        # –†–∞—Å—á–µ—Ç –ø–æ –º–æ–¥–µ–ª–∏: ln(d_œÉ) = Œ≤‚ÇÄ + Œ≤‚ÇÅ√óln(t) + Œ≤‚ÇÇ√ó(1/T) + Œ≤‚ÇÉ√óln(1/‚àöa_v)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: 1/T = [ln(d_œÉ) - Œ≤‚ÇÄ - Œ≤‚ÇÅ√óln(t) - Œ≤‚ÇÉ√óln(1/‚àöa_v)] / Œ≤‚ÇÇ
        ln_d_sigma = np.log(d_sigma)
        ln_time = np.log(time_hours)
        
        numerator = ln_d_sigma - self.intercept_ - self.coef_[0] * ln_time - self.coef_[2] * ln_inv_sqrt_a_v
        inv_T = numerator / self.coef_[1]
        
        T_kelvin = 1 / inv_T
        T_celsius = T_kelvin - 273.15
        
        return T_celsius

def read_excel_file(uploaded_file):
    """–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è
        try:
            df = pd.read_excel(uploaded_file, engine='openpyxl')
            return df
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å openpyxl: {e}. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...")
            try:
                df = pd.read_excel(uploaded_file, engine='xlrd')
                return df
            except:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞
                df = pd.read_excel(uploaded_file)
                return df
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel —Ñ–∞–π–ª.")
        return None

def prepare_data(df, excluded_indices=[]):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
    df_clean = df.drop(excluded_indices).copy()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    df_clean = df_clean[df_clean['d'] > 0].copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–µ—Ä–Ω–∞–º
    df_clean = df_clean.merge(grain_df[['G', 'ln_inv_sqrt_a_v']], on='G', how='left')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    df_clean['ln_d'] = np.log(df_clean['d'])
    df_clean['ln_t'] = np.log(df_clean['t'])
    df_clean['inv_T'] = 1 / (df_clean['T'] + 273.15)  # T –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    X = df_clean[['ln_t', 'inv_T', 'ln_inv_sqrt_a_v']].values
    y = df_clean['ln_d'].values
    
    return X, y, df_clean

def create_validation_charts(df_clean, y, y_pred):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Altair"""
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plot_data = pd.DataFrame({
        'actual': np.exp(y),
        'predicted': np.exp(y_pred),
        'residuals': np.exp(y) - np.exp(y_pred),
        'temperature': df_clean['T'],
        'grain_size': df_clean['G'],
        'time': df_clean['t']
    })
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ vs –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    chart1 = alt.Chart(plot_data).mark_circle(size=60).encode(
        x=alt.X('actual:Q', title='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–º–µ—Ç—Ä (–º–∫–º¬≤)'),
        y=alt.Y('predicted:Q', title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä (–º–∫–º¬≤)'),
        color='temperature:Q',
        tooltip=['actual', 'predicted', 'temperature', 'grain_size', 'time']
    ).properties(
        width=400,
        height=300,
        title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ vs –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è'
    )
    
    # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    min_val = plot_data[['actual', 'predicted']].min().min()
    max_val = plot_data[['actual', 'predicted']].max().max()
    line_data = pd.DataFrame({
        'x': [min_val, max_val],
        'y': [min_val, max_val]
    })
    
    line = alt.Chart(line_data).mark_line(color='red', strokeDash=[5,5]).encode(
        x='x:Q',
        y='y:Q'
    )
    
    chart1 = chart1 + line
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –û—Å—Ç–∞—Ç–∫–∏
    chart2 = alt.Chart(plot_data).mark_circle(size=60).encode(
        x=alt.X('predicted:Q', title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä (–º–∫–º¬≤)'),
        y=alt.Y('residuals:Q', title='–û—Å—Ç–∞—Ç–∫–∏'),
        color='temperature:Q',
        tooltip=['predicted', 'residuals', 'temperature']
    ).properties(
        width=400,
        height=300,
        title='–û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏'
    )
    
    zero_line = alt.Chart(pd.DataFrame({'y': [0]})).mark_rule(color='red', strokeDash=[5,5]).encode(y='y:Q')
    chart2 = chart2 + zero_line
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    chart3 = alt.Chart(plot_data).mark_bar().encode(
        x=alt.X('residuals:Q', bin=alt.Bin(maxbins=15), title='–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'),
        y=alt.Y('count()', title='–ß–∞—Å—Ç–æ—Ç–∞')
    ).properties(
        width=400,
        height=300,
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫'
    )
    
    return chart1, chart2, chart3

def main():
    st.set_page_config(page_title="Sigma Phase Analyzer", layout="wide")
    st.title("üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤ —Å—Ç–∞–ª–∏ 12–•18–ù12–¢")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"])
    
    with tab1:
        st.header("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['xlsx', 'xls'])
        
        if uploaded_file is not None:
            try:
                df = read_excel_file(uploaded_file)
                
                if df is None:
                    st.stop()
                
                required_columns = ['G', 'T', 't', 'd']
                
                if all(col in df.columns for col in required_columns):
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π", len(df))
                    with col2:
                        st.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä", f"{df['T'].min()} - {df['T'].max()} ¬∞C")
                    with col3:
                        st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{df['t'].min()} - {df['t'].max()} —á")
                    with col4:
                        st.metric("–ù–æ–º–µ—Ä–∞ –∑–µ—Ä–µ–Ω", ", ".join(map(str, sorted(df['G'].unique()))))
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                        st.dataframe(df)
                    
                    # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    st.subheader("2. –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
                    st.write("–ò—Å–∫–ª—é—á–∏—Ç–µ –≤—ã–±—Ä–æ—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:")
                    
                    excluded_indices = []
                    
                    for idx, row in df.iterrows():
                        col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])
                        with col1:
                            st.write(f"**{idx+1}**")
                        with col2:
                            st.write(f"G={row['G']}")
                        with col3:
                            st.write(f"T={row['T']}¬∞C")
                        with col4:
                            st.write(f"t={row['t']}—á")
                        with col5:
                            if st.checkbox("–ò—Å–∫–ª—é—á–∏—Ç—å", key=f"exclude_{idx}"):
                                excluded_indices.append(idx)
                    
                    st.info(f"–ò—Å–∫–ª—é—á–µ–Ω–æ —Ç–æ—á–µ–∫: {len(excluded_indices)}")
                    
                    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    st.subheader("3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                    if len(df) - len(excluded_indices) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                        try:
                            X, y, df_clean = prepare_data(df, excluded_indices)
                            
                            if len(df_clean) == 0:
                                st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è d > 0.")
                                st.stop()
                            
                            model = SigmaPhaseModel()
                            result = model.fit(X, y)
                            
                            if result is None:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                                return
                            
                            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                            y_pred = model.predict_ln_d(X)
                            df_clean['d_pred'] = np.exp(y_pred)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
                            st.subheader("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏")
                            st.latex(r"ln(d) = \beta_0 + \beta_1 \cdot ln(t) + \beta_2 \cdot \frac{1}{T} + \beta_3 \cdot ln\left(\frac{1}{\sqrt{a_v}}\right)")
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("Œ≤‚ÇÄ (intercept)", f"{model.intercept_:.6f}")
                                st.metric("Œ≤‚ÇÅ (ln(t))", f"{model.coef_[0]:.6f}")
                            with col2:
                                st.metric("Œ≤‚ÇÇ (1/T)", f"{model.coef_[1]:.6f}")
                                st.metric("Œ≤‚ÇÉ (ln(1/‚àöa_v))", f"{model.coef_[2]:.6f}")
                            with col3:
                                st.metric("–≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Q", f"{-2 * 8.314 * model.coef_[1]:.1f} –î–∂/–º–æ–ª—å")
                            
                            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                            st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("R¬≤", f"{model.r2:.4f}")
                            with col2:
                                st.metric("RMSE", f"{model.rmse:.4f}")
                            with col3:
                                st.metric("MAE", f"{model.mae:.4f}")
                            with col4:
                                st.metric("–¢–æ—á–µ–∫ –æ–±—É—á–µ–Ω–∏—è", f"{len(df_clean)}")
                            
                            # –ì—Ä–∞—Ñ–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                            st.subheader("4. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
                            chart1, chart2, chart3 = create_validation_charts(df_clean, y, y_pred)
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                st.altair_chart(chart1, use_container_width=True)
                                st.altair_chart(chart3, use_container_width=True)
                            with col2:
                                st.altair_chart(chart2, use_container_width=True)
                                
                                # –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º
                                error_by_temp = df_clean.groupby('T').apply(
                                    lambda x: (x['d'] - x['d_pred']).mean()
                                ).reset_index()
                                error_by_temp.columns = ['T', 'mean_error']
                                
                                chart4 = alt.Chart(error_by_temp).mark_bar().encode(
                                    x=alt.X('T:Q', title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'),
                                    y=alt.Y('mean_error:Q', title='–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞'),
                                    tooltip=['T', 'mean_error']
                                ).properties(
                                    height=300,
                                    title='–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º'
                                )
                                st.altair_chart(chart4, use_container_width=True)
                            
                            # –¢–∞–±–ª–∏—Ü–∞ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
                            st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                            comparison_df = df_clean[['G', 'T', 't', 'd', 'd_pred']].copy()
                            comparison_df['–û—à–∏–±–∫–∞, %'] = 100 * (comparison_df['d_pred'] - comparison_df['d']) / comparison_df['d']
                            comparison_df['d'] = comparison_df['d'].round(4)
                            comparison_df['d_pred'] = comparison_df['d_pred'].round(4)
                            comparison_df['–û—à–∏–±–∫–∞, %'] = comparison_df['–û—à–∏–±–∫–∞, %'].round(2)
                            
                            st.dataframe(comparison_df)
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
                            st.session_state['trained_model'] = model
                            st.session_state['model_coef'] = model.coef_
                            st.session_state['model_intercept'] = model.intercept_
                            
                            # –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
                            st.subheader("5. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                            st.code(f"""
–ú–û–î–ï–õ–¨ –†–û–°–¢–ê –°–ò–ì–ú–ê-–§–ê–ó–´
–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: ln(d) = Œ≤‚ÇÄ + Œ≤‚ÇÅ¬∑ln(t) + Œ≤‚ÇÇ¬∑(1/T) + Œ≤‚ÇÉ¬∑ln(1/‚àöa_v)

–ü–ê–†–ê–ú–ï–¢–†–´:
Œ≤‚ÇÄ = {model.intercept_:.8f}
Œ≤‚ÇÅ = {model.coef_[0]:.8f}  
Œ≤‚ÇÇ = {model.coef_[1]:.8f}
Œ≤‚ÇÉ = {model.coef_[2]:.8f}

–§–û–†–ú–£–õ–ê –î–õ–Ø –†–ê–°–ß–ï–¢–ê –¢–ï–ú–ü–ï–†–ê–¢–£–†–´:
T [¬∞C] = Œ≤‚ÇÇ / [ln(d) - Œ≤‚ÇÄ - Œ≤‚ÇÅ¬∑ln(t) - Œ≤‚ÇÉ¬∑ln(1/‚àöa_v)] - 273.15

–≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {-2 * 8.314 * model.coef_[1]:.1f} –î–∂/–º–æ–ª—å
–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: R¬≤ = {model.r2:.4f}
                            """)
                            
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
                        
                else:
                    missing_cols = [col for col in required_columns if col not in df.columns]
                    st.error(f"‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        else:
            st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: G, T, t, d")
            
            # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üìã –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"):
                example_data = pd.DataFrame({
                    'G': [3, 5, 8, 9],
                    'T': [600, 650, 700, 600],
                    't': [2000, 4000, 6000, 8000],
                    'd': [5.2, 8.7, 12.3, 6.8]
                })
                st.dataframe(example_data)
                st.write("**G** - –Ω–æ–º–µ—Ä –∑–µ—Ä–Ω–∞, **T** - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C), **t** - –≤—Ä–µ–º—è (—á), **d** - –¥–∏–∞–º–µ—Ç—Ä (–º–∫–º¬≤)")
    
    with tab2:
        st.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
        
        if 'trained_model' in st.session_state:
            model = st.session_state['trained_model']
            
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                grain_number = st.selectbox("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ (G)", options=grain_df['G'].tolist())
            with col2:
                time_hours = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (—á)", min_value=1, value=5000, step=100)
            with col3:
                d_sigma = st.number_input("–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä —Å–∏–≥–º–∞-—Ñ–∞–∑—ã (–º–∫–º¬≤)", 
                                        min_value=0.1, value=10.0, step=0.1)
            
            if st.button("üéØ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", type="primary"):
                try:
                    temperature = model.predict_temperature(d_sigma, time_hours, grain_number)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                    if temperature < 550:
                        st.error(f"""
                        ‚ö†Ô∏è **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f} ¬∞C**
                        
                        **–í–Ω–∏–º–∞–Ω–∏–µ:** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ 550¬∞C - —Å–∏–≥–º–∞-—Ñ–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è
                        """)
                    elif temperature > 900:
                        st.error(f"""
                        ‚ö†Ô∏è **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f} ¬∞C**
                        
                        **–í–Ω–∏–º–∞–Ω–∏–µ:** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ 900¬∞C - —Å–∏–≥–º–∞-—Ñ–∞–∑–∞ –Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è
                        """)
                    elif 590 <= temperature <= 630:
                        st.success(f"""
                        ‚úÖ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {temperature:.1f} ¬∞C**
                        
                        **–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é**
                        """)
                    else:
                        st.warning(f"""
                        üìä **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f} ¬∞C**
                        
                        **–í–Ω–∏–º–∞–Ω–∏–µ:** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 590-630¬∞C
                        """)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    with st.expander("üîç –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞"):
                        grain_info = grain_df[grain_df['G'] == grain_number].iloc[0]
                        st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–µ—Ä–Ω–∞ ‚Ññ{grain_number}:**")
                        st.write(f"- –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è: {grain_info['a_v']:.6f} –º–º¬≤")
                        st.write(f"- –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä: {grain_info['d_av']:.3f} –º–º")
                        st.write(f"- ln(1/‚àöa_v) = {grain_info['ln_inv_sqrt_a_v']:.4f}")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")
        else:
            st.warning("üìä –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'")

if __name__ == "__main__":
    main()
