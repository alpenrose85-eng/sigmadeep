import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ œÉ-—Ñ–∞–∑—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º")
st.markdown("""
**–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏:**
- –ú–æ–¥–µ–ª–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
- –ê—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
col1, col2 = st.columns(2)
with col1:
    initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                     value=0.1, min_value=0.0, step=0.1,
                                     help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.1-0.5 –º–∫–º)")
with col2:
    enable_phase_analysis = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (JMAK)", 
                                      value=True, 
                                      help="–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ñ–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é œÉ-—Ñ–∞–∑—ã")

target_grain = 10

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
def calculate_comprehensive_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    if len(y_true) == 0 or len(y_pred) == 0:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}
    
    min_len = min(len(y_true), len(y_pred))
    y_true = y_true[:min_len]
    y_pred = y_pred[:min_len]
    
    try:
        metrics = {
            'R¬≤': r2_score(y_true, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_true, y_pred)),
            'MAE': mean_absolute_error(y_true, y_pred),
            'MAPE': np.mean(np.abs((y_true - y_pred) / np.where(y_true != 0, y_true, 1e-10))) * 100
        }
        return metrics
    except:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}

def safe_plot_with_diagnostics(ax, t_exp, y_exp, y_pred, t_range=None, y_range=None, 
                              title="", xlabel="–í—Ä–µ–º—è (—á–∞—Å—ã)", ylabel="", 
                              model_name="–ú–æ–¥–µ–ª—å"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        ax.clear()
        
        if len(t_exp) == 0 or len(y_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        valid_mask = ~np.isnan(t_exp) & ~np.isnan(y_exp) & ~np.isnan(y_pred)
        t_exp = t_exp[valid_mask]
        y_exp = y_exp[valid_mask]
        y_pred = y_pred[valid_mask]
        
        if len(t_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        ax.scatter(t_exp, y_exp, alpha=0.8, s=60, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
        
        if t_range is not None and y_range is not None and len(t_range) > 0 and len(y_range) > 0:
            if ylabel == '–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)':
                valid_range_mask = y_range > 0
                if np.any(valid_range_mask):
                    ax.plot(t_range[valid_range_mask], y_range[valid_range_mask], 'r--', 
                           linewidth=2, label=model_name)
            else:
                ax.plot(t_range, y_range, 'r--', linewidth=2, label=model_name)
        
        sorted_idx = np.argsort(t_exp)
        ax.plot(t_exp.iloc[sorted_idx] if hasattr(t_exp, 'iloc') else t_exp[sorted_idx], 
               y_exp.iloc[sorted_idx] if hasattr(y_exp, 'iloc') else y_exp[sorted_idx], 
               'b:', alpha=0.5, label='–¢—Ä–µ–Ω–¥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
        
        for i in range(min(len(t_exp), len(y_exp), len(y_pred))):
            t_val = t_exp.iloc[i] if hasattr(t_exp, 'iloc') else t_exp[i]
            y_true = y_exp.iloc[i] if hasattr(y_exp, 'iloc') else y_exp[i]
            y_pred_val = y_pred.iloc[i] if hasattr(y_pred, 'iloc') else y_pred[i]
            ax.plot([t_val, t_val], [y_true, y_pred_val], 'gray', alpha=0.3, linewidth=1)
        
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        metrics = calculate_comprehensive_metrics(y_exp, y_pred)
        ax.text(0.02, 0.98, f"R¬≤ = {metrics['R¬≤']:.3f}\nRMSE = {metrics['RMSE']:.2f}", 
                transform=ax.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
                
    except Exception as e:
        ax.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è:\n{str(e)[:50]}...', 
                transform=ax.transAxes, ha='center', va='center', fontsize=8)
        ax.set_title(title)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è JMAK-–∞–Ω–∞–ª–∏–∑–∞
def jmak_model(t, k, n):
    """JMAK –º–æ–¥–µ–ª—å: X(t) = 1 - exp(-(k*t)^n)"""
    return 1 - np.exp(-(k * t) ** n)

def fit_jmak_model(time, f_phase, initial_n=1.0):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JMAK –º–æ–¥–µ–ª–∏"""
    f_normalized = np.array(f_phase) / 100.0
    
    valid_mask = ~np.isnan(time) & ~np.isnan(f_normalized) & (f_normalized >= 0) & (f_normalized <= 1)
    time_valid = time[valid_mask]
    f_valid = f_normalized[valid_mask]
    
    if len(time_valid) < 2:
        return None, None, None
    
    try:
        k_guess = 1.0 / np.mean(time_valid) if np.mean(time_valid) > 0 else 0.1
        
        popt, pcov = curve_fit(jmak_model, time_valid, f_valid, 
                              p0=[k_guess, initial_n],
                              bounds=([1e-6, 0.1], [10, 4]),
                              maxfev=5000)
        
        k_fit, n_fit = popt
        return k_fit, n_fit, pcov
    
    except Exception as e:
        return None, None, None

def calculate_jmak_predictions(time, k, n):
    """–†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π JMAK –º–æ–¥–µ–ª–∏"""
    return jmak_model(time, k, n) * 100

# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò
def arrhenius_model(T, A, Ea):
    """–ê—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–∞—è –º–æ–¥–µ–ª—å: k = A * exp(-Ea/(R*T))"""
    return A * np.exp(-Ea / (R * T))

def universal_diameter_model(t, T, A, Ea, n, d0):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ —Å –∞—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é"""
    k = arrhenius_model(T + 273.15, A, Ea)  # T –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    return (k * t + d0**n)**(1/n)

def universal_phase_model(t, T, A, Ea, n_jmak):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã —Å –∞—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é"""
    k = arrhenius_model(T + 273.15, A, Ea)
    return jmak_model(t, k, n_jmak) * 100

def fit_universal_diameter_model(df, best_n, d0):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        t_all = []
        T_all = []
        d_all = []
        
        for temp in df['T'].unique():
            temp_data = df[df['T'] == temp]
            t_all.extend(temp_data['t'].values)
            T_all.extend([temp] * len(temp_data))
            d_all.extend(temp_data['d'].values)
        
        t_all = np.array(t_all)
        T_all = np.array(T_all)
        d_all = np.array(d_all)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        A_guess = 1.0
        Ea_guess = 100000  # 100 –∫–î–∂/–º–æ–ª—å
        
        # –ü–æ–¥–≥–æ–Ω–∫–∞
        popt, pcov = curve_fit(
            lambda x, A, Ea: universal_diameter_model(x[0], x[1], A, Ea, best_n, d0),
            [t_all, T_all], d_all,
            p0=[A_guess, Ea_guess],
            bounds=([1e-10, 10000], [1e10, 1000000]),
            maxfev=10000
        )
        
        return popt, pcov
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞: {e}")
        return None, None

def fit_universal_phase_model(df):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã"""
    try:
        t_all = []
        T_all = []
        f_all = []
        
        for temp in df['T'].unique():
            temp_data = df[df['T'] == temp]
            t_all.extend(temp_data['t'].values)
            T_all.extend([temp] * len(temp_data))
            f_all.extend(temp_data['f'].values)
        
        t_all = np.array(t_all)
        T_all = np.array(T_all)
        f_all = np.array(f_all)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        A_guess = 1.0
        Ea_guess = 100000
        n_guess = 1.0
        
        # –ü–æ–¥–≥–æ–Ω–∫–∞
        popt, pcov = curve_fit(
            lambda x, A, Ea, n: universal_phase_model(x[0], x[1], A, Ea, n),
            [t_all, T_all], f_all,
            p0=[A_guess, Ea_guess, n_guess],
            bounds=([1e-10, 10000, 0.1], [1e10, 1000000, 4]),
            maxfev=10000
        )
        
        return popt, pcov
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã: {e}")
        return None, None

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd', 'f']
        
        if all(col in df.columns for col in required_cols):
            df_grain10 = df[df['G'] == target_grain].copy()
            
            if len(df_grain10) > 0:
                st.session_state['grain10_data'] = df_grain10
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10:")
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    unique_temps = df_grain10['T'].unique()
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                with col2:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", f"{len(df_grain10)}")
                with col3:
                    st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{df_grain10['t'].min()}-{df_grain10['t'].max()} —á")
                with col4:
                    st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", f"{df_grain10['f'].min():.1f}-{df_grain10['f'].max():.1f}%")
                
                st.dataframe(df_grain10.head(10))
                
            else:
                st.error(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'grain10_data' in st.session_state:
    df_grain10 = st.session_state['grain10_data']
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df_grain10_clean = df_grain10[(df_grain10['d'] > 0) & (df_grain10['f'] >= 0) & (df_grain10['f'] <= 100)].copy()
    
    if len(df_grain10_clean) < len(df_grain10):
        st.warning(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {len(df_grain10) - len(df_grain10_clean)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫")
        df_grain10 = df_grain10_clean
    
    df_grain10['T_K'] = df_grain10['T'] + 273.15
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    st.header("2. üìè –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ œÉ-—Ñ–∞–∑—ã")
    
    # ... [—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤] ...
    
    # –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    n_min, n_max, n_step = 3.0, 5.0, 0.1
    n_candidates = np.arange(n_min, n_max + n_step, n_step)
    
    n_results = {}
    available_temperatures = set()
    
    for n in n_candidates:
        k_values = []
        
        for temp in df_grain10['T'].unique():
            temp_data = df_grain10[df_grain10['T'] == temp]
            
            if len(temp_data) >= 2:
                d_transformed = temp_data['d']**n - initial_diameter**n
                
                if (d_transformed < 0).any():
                    continue
                
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        temp_data['t'], d_transformed
                    )
                    
                    if slope > 0:
                        d_pred_transformed = slope * temp_data['t'] + intercept
                        d_pred = (d_pred_transformed + initial_diameter**n)**(1/n)
                        
                        if (d_pred > 0).all():
                            metrics = calculate_comprehensive_metrics(temp_data['d'].values, d_pred)
                            
                            k_values.append({
                                'T': temp, 'T_K': temp + 273.15, 'K': slope,
                                'R2': r_value**2, 'std_err': std_err,
                                'n_points': len(temp_data), 'metrics': metrics
                            })
                            available_temperatures.add(temp)
                except:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            overall_r2 = k_df['R2'].mean()
            n_results[n] = {
                'k_df': k_df, 'mean_R2': overall_r2,
                'min_R2': k_df['R2'].min(), 'n_temperatures': len(k_df)
            }
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ n
    best_n = None
    if n_results:
        comparison_data = []
        for n, results in n_results.items():
            comparison_data.append({
                'n': n, '–°—Ä–µ–¥–Ω–∏–π R¬≤': results['mean_R2'],
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': results['min_R2'], 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        
        if len(comparison_df) > 0:
            best_n_row = comparison_df.loc[comparison_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
            best_n = best_n_row['n']
            
            st.success(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: n = {best_n:.1f} (R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.3f})")

    # –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
    st.header("3. üî¨ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
    
    if best_n is not None:
        # –ü–æ–¥–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ –¥–∏–∞–º–µ—Ç—Ä–∞")
        
        with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"):
            st.markdown("""
            **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞:**
            $$ d(t,T) = \\left[ A \\cdot \\exp\\left(-\\frac{E_a}{RT}\\right) \\cdot t + d_0^n \\right]^{1/n} $$
            
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
            - **A** - –ø—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            - **Ea** - —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–î–∂/–º–æ–ª—å)
            - **n** - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            - **d‚ÇÄ** - –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            
            **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
            - –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏–π
            """)
        
        # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        universal_diameter_params, universal_diameter_cov = fit_universal_diameter_model(
            df_grain10, best_n, initial_diameter
        )
        
        if universal_diameter_params is not None:
            A_diam, Ea_diam = universal_diameter_params
            
            st.success("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–∞!")
            st.info(f"""
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞:**
            - –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å A = {A_diam:.4e}
            - –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Ea = {Ea_diam:.0f} –î–∂/–º–æ–ª—å ({Ea_diam/1000:.1f} –∫–î–∂/–º–æ–ª—å)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ n = {best_n:.1f}
            - –ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ = {initial_diameter} –º–∫–º
            """)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞")
            
            fig, axes = plt.subplots(1, 2, figsize=(15, 6))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_predictions_diam = []
            all_actual_diam = []
            
            for temp in df_grain10['T'].unique():
                temp_data = df_grain10[df_grain10['T'] == temp]
                t_temp = temp_data['t'].values
                T_temp = np.array([temp] * len(t_temp))
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                d_pred_universal = universal_diameter_model(t_temp, T_temp, A_diam, Ea_diam, best_n, initial_diameter)
                
                axes[0].scatter(temp_data['t'], temp_data['d'], alpha=0.7, 
                               label=f'{temp}¬∞C (—ç–∫—Å–ø.)', s=50)
                axes[0].plot(temp_data['t'], d_pred_universal, '--', 
                            label=f'{temp}¬∞C (–º–æ–¥.)', linewidth=2)
                
                all_predictions_diam.extend(d_pred_universal)
                all_actual_diam.extend(temp_data['d'].values)
            
            axes[0].set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
            axes[0].set_ylabel('–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)')
            axes[0].set_title('–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞\n–¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä')
            axes[0].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            axes[0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            axes[1].scatter(all_actual_diam, all_predictions_diam, alpha=0.6)
            min_val = min(min(all_actual_diam), min(all_predictions_diam))
            max_val = max(max(all_actual_diam), max(all_predictions_diam))
            axes[1].plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2)
            axes[1].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
            axes[1].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
            axes[1].set_title('–ö–∞—á–µ—Å—Ç–≤–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞')
            axes[1].grid(True, alpha=0.3)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            metrics_universal_diam = calculate_comprehensive_metrics(
                np.array(all_actual_diam), np.array(all_predictions_diam)
            )
            axes[1].text(0.05, 0.95, f"R¬≤ = {metrics_universal_diam['R¬≤']:.3f}\nRMSE = {metrics_universal_diam['RMSE']:.2f}", 
                        transform=axes[1].transAxes, verticalalignment='top',
                        bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.tight_layout()
            st.pyplot(fig)
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã
    if enable_phase_analysis:
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (JMAK)")
        
        universal_phase_params, universal_phase_cov = fit_universal_phase_model(df_grain10)
        
        if universal_phase_params is not None:
            A_phase, Ea_phase, n_phase = universal_phase_params
            
            st.success("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–∞!")
            st.info(f"""
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã:**
            - –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å A = {A_phase:.4e}
            - –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Ea = {Ea_phase:.0f} –î–∂/–º–æ–ª—å ({Ea_phase/1000:.1f} –∫–î–∂/–º–æ–ª—å)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ê–≤—Ä–∞–º–∏ n = {n_phase:.2f}
            """)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã
            fig, axes = plt.subplots(1, 2, figsize=(15, 6))
            
            all_predictions_phase = []
            all_actual_phase = []
            
            for temp in df_grain10['T'].unique():
                temp_data = df_grain10[df_grain10['T'] == temp]
                if len(temp_data) >= 2:
                    t_temp = temp_data['t'].values
                    T_temp = np.array([temp] * len(t_temp))
                    
                    f_pred_universal = universal_phase_model(t_temp, T_temp, A_phase, Ea_phase, n_phase)
                    
                    axes[0].scatter(temp_data['t'], temp_data['f'], alpha=0.7, 
                                   label=f'{temp}¬∞C (—ç–∫—Å–ø.)', s=50)
                    axes[0].plot(temp_data['t'], f_pred_universal, '--', 
                                label=f'{temp}¬∞C (–º–æ–¥.)', linewidth=2)
                    
                    all_predictions_phase.extend(f_pred_universal)
                    all_actual_phase.extend(temp_data['f'].values)
            
            axes[0].set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
            axes[0].set_ylabel('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
            axes[0].set_title('–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã\n–¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä')
            axes[0].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            axes[0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            axes[1].scatter(all_actual_phase, all_predictions_phase, alpha=0.6)
            axes[1].plot([0, 100], [0, 100], 'r--', linewidth=2)
            axes[1].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
            axes[1].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
            axes[1].set_title('–ö–∞—á–µ—Å—Ç–≤–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã')
            axes[1].grid(True, alpha=0.3)
            
            metrics_universal_phase = calculate_comprehensive_metrics(
                np.array(all_actual_phase), np.array(all_predictions_phase)
            )
            axes[1].text(0.05, 0.95, f"R¬≤ = {metrics_universal_phase['R¬≤']:.3f}\nRMSE = {metrics_universal_phase['RMSE']:.2f}", 
                        transform=axes[1].transAxes, verticalalignment='top',
                        bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.tight_layout()
            st.pyplot(fig)

    # –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
    st.header("4. üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    st.markdown("""
    **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:**
    - –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """)
    
    calc_type = st.radio("–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞:", 
                        ["–ü—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–º–µ—Ç—Ä–∞/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"])
    
    if calc_type == "–ü—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–º–µ—Ç—Ä–∞/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è":
        col1, col2, col3 = st.columns(3)
        with col1:
            target_time = st.number_input("–í—Ä–µ–º—è (—á–∞—Å—ã)", value=100.0, min_value=0.0, step=10.0)
        with col2:
            target_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=800.0, min_value=0.0, step=10.0)
        with col3:
            calc_mode = st.selectbox("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å:", ["–î–∏–∞–º–µ—Ç—Ä", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"])
        
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
            if calc_mode in ["–î–∏–∞–º–µ—Ç—Ä", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"] and universal_diameter_params is not None:
                A_diam, Ea_diam = universal_diameter_params
                predicted_diameter = universal_diameter_model(
                    target_time, target_temp, A_diam, Ea_diam, best_n, initial_diameter
                )
                st.success(f"**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä:** {predicted_diameter:.2f} –º–∫–º")
            
            if calc_mode in ["–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"] and universal_phase_params is not None:
                A_phase, Ea_phase, n_phase = universal_phase_params
                predicted_phase = universal_phase_model(
                    target_time, target_temp, A_phase, Ea_phase, n_phase
                )
                st.success(f"**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã:** {predicted_phase:.1f}%")
    
    else:  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        col1, col2, col3 = st.columns(3)
        with col1:
            target_time_temp = st.number_input("–í—Ä–µ–º—è (—á–∞—Å—ã) ", value=100.0, min_value=0.0, step=10.0)
        with col2:
            target_value = st.number_input("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", value=2.0, min_value=0.0, step=0.1)
        with col3:
            temp_mode = st.selectbox("–¢–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:", ["–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)"])
        
        if st.button("–ù–∞–π—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"):
            if temp_mode == "–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)" and universal_diameter_params is not None:
                # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                A_diam, Ea_diam = universal_diameter_params
                
                def equation(T):
                    k = arrhenius_model(T + 273.15, A_diam, Ea_diam)
                    return (k * target_time_temp + initial_diameter**best_n)**(1/best_n) - target_value
                
                # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                T_candidates = np.linspace(400, 1200, 1000)
                differences = [equation(T) for T in T_candidates]
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≥–¥–µ —Ä–∞–∑–Ω–∏—Ü–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –Ω—É–ª—é
                idx_min = np.argmin(np.abs(differences))
                optimal_temp = T_candidates[idx_min]
                
                if np.abs(differences[idx_min]) < 0.1:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    st.success(f"**–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {optimal_temp:.1f}¬∞C")
                    st.info(f"–ü—Ä–∏ {optimal_temp:.1f}¬∞C –∑–∞ {target_time_temp} —á–∞—Å–æ–≤ –¥–∏–∞–º–µ—Ç—Ä –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç {target_value} –º–∫–º")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
            
            elif temp_mode == "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)" and universal_phase_params is not None:
                A_phase, Ea_phase, n_phase = universal_phase_params
                
                def equation_phase(T):
                    k = arrhenius_model(T + 273.15, A_phase, Ea_phase)
                    return jmak_model(target_time_temp, k, n_phase) * 100 - target_value
                
                T_candidates = np.linspace(400, 1200, 1000)
                differences = [equation_phase(T) for T in T_candidates]
                
                idx_min = np.argmin(np.abs(differences))
                optimal_temp = T_candidates[idx_min]
                
                if np.abs(differences[idx_min]) < 1.0:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1%
                    st.success(f"**–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {optimal_temp:.1f}¬∞C")
                    st.info(f"–ü—Ä–∏ {optimal_temp:.1f}¬∞C –∑–∞ {target_time_temp} —á–∞—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç {target_value}%")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    st.header("5. üìà –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    if universal_diameter_params is not None:
        st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
        T_range_kelvin = np.linspace(273 + 400, 273 + 1200, 100)
        T_range_celsius = T_range_kelvin - 273
        
        if universal_diameter_params is not None:
            A_diam, Ea_diam = universal_diameter_params
            k_diam = arrhenius_model(T_range_kelvin, A_diam, Ea_diam)
            ax1.semilogy(1000/T_range_kelvin, k_diam, 'b-', linewidth=2, label='–î–∏–∞–º–µ—Ç—Ä')
        
        if universal_phase_params is not None:
            A_phase, Ea_phase, n_phase = universal_phase_params
            k_phase = arrhenius_model(T_range_kelvin, A_phase, Ea_phase)
            ax1.semilogy(1000/T_range_kelvin, k_phase, 'r-', linewidth=2, label='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã')
        
        ax1.set_xlabel('1000/T (K‚Åª¬π)')
        ax1.set_ylabel('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ k')
        ax1.set_title('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê—Ä—Ä–µ–Ω–∏—É—Å–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤ –æ–±—ã—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        if universal_diameter_params is not None:
            ax2.plot(T_range_celsius, k_diam, 'b-', linewidth=2, label='–î–∏–∞–º–µ—Ç—Ä')
        if universal_phase_params is not None:
            ax2.plot(T_range_celsius, k_phase, 'r-', linewidth=2, label='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã')
        
        ax2.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
        ax2.set_ylabel('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ k')
        ax2.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        st.pyplot(fig)

st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–µ–π")

st.markdown("""
**–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç:**

1. **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å** –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∏ –≤—Ä–µ–º–µ–Ω
2. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å** —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
3. **–°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å** –∫–∏–Ω–µ—Ç–∏–∫—É —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

**–î–ª—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:**
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

**–≠–Ω–µ—Ä–≥–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
- –¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 100-300 –∫–î–∂/–º–æ–ª—å
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Ea –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã –º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏
""")
