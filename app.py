import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ì–û–°–¢ 5639-82
grain_data = {
    'grain_size': [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    'grain_area': [1.0, 0.5, 0.25, 0.125, 0.0625, 0.0312, 0.0156, 0.00781, 0.00390, 
                   0.00195, 0.00098, 0.00049, 0.000244, 0.000122, 0.000061, 0.000030, 
                   0.000015, 0.000008],
    'grain_diameter': [0.875, 0.650, 0.444, 0.313, 0.222, 0.157, 0.111, 0.0783, 0.0553,
                       0.0391, 0.0267, 0.0196, 0.0138, 0.0099, 0.0069, 0.0049, 0.0032, 0.0027]
}

grain_df = pd.DataFrame(grain_data)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∏ –∑–µ—Ä–µ–Ω")
st.markdown("""
**–ü–æ–ª–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:**
- –°—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω —Ä–æ—Å—Ç–∞: $d^n - d_0^n = K \\cdot t$
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ –ê—Ä—Ä–µ–Ω–∏—É—Å—É: $K = K_0(G) \\cdot \\exp(-Q/RT)$
- –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞: $\\ln K_0(G) = a_0 + a_1 \\cdot Z(G)$
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –í–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
has_sigma_content = st.radio("–ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ œÉ-—Ñ–∞–∑—ã?", 
                           ["–î–∞", "–ù–µ—Ç"])
initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                 value=0.0, min_value=0.0, step=0.1)

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd']
        if has_sigma_content == "–î–∞" and 'sigma_content' in df.columns:
            required_cols.append('sigma_content')
        
        if all(col in df.columns for col in required_cols):
            st.session_state['experimental_data'] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                unique_temps = df['T'].unique()
                st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                st.write(f"({', '.join(map(str, sorted(unique_temps)))}¬∞C)")
            with col2:
                unique_grains = df['G'].unique()
                st.metric("–ù–æ–º–µ—Ä–∞ –∑–µ—Ä–µ–Ω", f"{len(unique_grains)} —Ç–∏–ø–æ–≤")
                st.write(f"({', '.join(map(str, sorted(unique_grains)))})")
            with col3:
                time_range = f"{df['t'].min()} - {df['t'].max()}"
                st.metric("–í—Ä–µ–º—è –≤—ã–¥–µ—Ä–∂–∫–∏", time_range + " —á")
            with col4:
                diam_range = f"{df['d'].min():.1f} - {df['d'].max():.1f}"
                st.metric("–î–∏–∞–º–µ—Ç—Ä—ã", diam_range + " –º–∫–º")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º –∏ –∑–µ—Ä–Ω–∞–º
            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º –∑–µ—Ä–µ–Ω:**")
            distribution = df.groupby(['T', 'G']).size().reset_index()
            distribution.columns = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C', '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫']
            st.dataframe(distribution.pivot(index='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C', 
                                          columns='–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞', 
                                          values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫').fillna(0))
                
            st.dataframe(df.head(10))
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'experimental_data' in st.session_state:
    df = st.session_state['experimental_data']
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.header("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    df_prep = df.copy()
    df_prep['T_K'] = df_prep['T'] + 273.15
    df_prep = df_prep.merge(grain_df, left_on='G', right_on='grain_size', how='left')
    
    st.write("**–î–∞–Ω–Ω—ã–µ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–µ—Ä–Ω–∞—Ö:**")
    st.dataframe(df_prep.head())
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    st.header("3. –û–±–∑–æ—Ä –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º
    temperatures = sorted(df_prep['T'].unique())
    colors = plt.cm.viridis(np.linspace(0, 1, len(temperatures)))
    
    for i, temp in enumerate(temperatures):
        temp_data = df_prep[df_prep['T'] == temp]
        ax1.scatter(temp_data['t'], temp_data['d'], 
                   color=colors[i], label=f'{temp}¬∞C', alpha=0.7, s=50)
    
    ax1.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
    ax1.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
    ax1.set_title('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º')
    ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–µ—Ä–µ–Ω
    grains = sorted(df_prep['G'].unique())
    colors_grain = plt.cm.plasma(np.linspace(0, 1, len(grains)))
    
    for i, grain in enumerate(grains):
        grain_data = df_prep[df_prep['G'] == grain]
        ax2.scatter(grain_data['t'], grain_data['d'], 
                   color=colors_grain[i], label=f'–ó–µ—Ä–Ω–æ {grain}', alpha=0.7, s=50)
    
    ax2.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
    ax2.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
    ax2.set_title('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–µ—Ä–µ–Ω')
    ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –¥–∏–∞–º–µ—Ç—Ä–æ–≤
    pivot_data = df_prep.pivot_table(values='d', index='G', columns='T', aggfunc='mean')
    sns.heatmap(pivot_data, annot=True, cmap='YlOrRd', ax=ax3, fmt='.2f')
    ax3.set_title('–°—Ä–µ–¥–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º –∏ –∑–µ—Ä–Ω–∞–º')
    ax3.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    ax3.set_ylabel('–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
    count_data = df_prep.groupby(['T', 'G']).size().reset_index()
    count_pivot = count_data.pivot(index='G', columns='T', values=0).fillna(0)
    sns.heatmap(count_pivot, annot=True, cmap='Blues', ax=ax4, fmt='.0f')
    ax4.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö')
    ax4.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    ax4.set_ylabel('–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞')
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.header("4. –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    
    n_candidates = [3.0, 3.5, 4.0]
    n_results = {}
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ n
    for n in n_candidates:
        st.subheader(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–ª—è n = {n}")
        
        k_values = []
        all_combinations = []
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ T –∏ G
        combinations = df_prep.groupby(['T', 'G']).size().reset_index()[['T', 'G']]
        
        for _, row in combinations.iterrows():
            temp, grain = row['T'], row['G']
            subset = df_prep[(df_prep['T'] == temp) & (df_prep['G'] == grain)]
            
            if len(subset) >= 2:
                # –í—ã—á–∏—Å–ª—è–µ–º d^n - d‚ÇÄ^n
                d_transformed = subset['d']**n - initial_diameter**n
                
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        subset['t'], d_transformed
                    )
                    
                    k_values.append({
                        'T': temp,
                        'T_K': temp + 273.15,
                        'G': grain,
                        'K': max(slope, 1e-10),
                        'R2': r_value**2,
                        'std_err': std_err,
                        'grain_area': subset['grain_area'].iloc[0],
                        'n_points': len(subset)
                    })
                    all_combinations.append((temp, grain))
                except:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            n_results[n] = k_df
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ n
            st.write(f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è n = {n}:**")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–∏–π R¬≤", f"{k_df['R2'].mean():.4f}")
            with col2:
                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤", f"{k_df['R2'].min():.4f}")
            with col3:
                st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", f"{len(k_df)}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ n
            fig, axes = plt.subplots(2, 2, figsize=(16, 12))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R¬≤
            axes[0,0].hist(k_df['R2'], bins=15, alpha=0.7, edgecolor='black')
            axes[0,0].axvline(k_df['R2'].mean(), color='red', linestyle='--', 
                            label=f'–°—Ä–µ–¥–Ω–µ–µ = {k_df["R2"].mean():.3f}')
            axes[0,0].set_xlabel('R¬≤')
            axes[0,0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            axes[0,0].set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R¬≤ –¥–ª—è n = {n}')
            axes[0,0].legend()
            axes[0,0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ó–Ω–∞—á–µ–Ω–∏—è K –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º –∏ –∑–µ—Ä–Ω–∞–º
            for grain in k_df['G'].unique():
                grain_data = k_df[k_df['G'] == grain]
                axes[0,1].scatter(grain_data['T'], grain_data['K'], 
                                label=f'–ó–µ—Ä–Ω–æ {grain}', s=80, alpha=0.7)
            axes[0,1].set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
            axes[0,1].set_ylabel('K')
            axes[0,1].set_title('–ó–Ω–∞—á–µ–Ω–∏—è K –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º –∏ –∑–µ—Ä–Ω–∞–º')
            axes[0,1].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            axes[0,1].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ü—Ä–∏–º–µ—Ä—ã –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            shown_combinations = 0
            for i, (temp, grain) in enumerate(all_combinations[:4]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4
                subset = df_prep[(df_prep['T'] == temp) & (df_prep['G'] == grain)]
                if len(subset) >= 2:
                    d_transformed = subset['d']**n - initial_diameter**n
                    row = i // 2
                    col = i % 2
                    
                    axes[1, col].scatter(subset['t'], d_transformed, alpha=0.7)
                    
                    # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                    slope = k_df[(k_df['T'] == temp) & (k_df['G'] == grain)]['K'].iloc[0]
                    t_range = np.linspace(subset['t'].min(), subset['t'].max(), 100)
                    axes[1, col].plot(t_range, slope * t_range, 'r--')
                    
                    r2 = k_df[(k_df['T'] == temp) & (k_df['G'] == grain)]['R2'].iloc[0]
                    axes[1, col].set_title(f'T={temp}¬∞C, G={grain}, R¬≤={r2:.3f}')
                    axes[1, col].set_xlabel('–í—Ä–µ–º—è (—á)')
                    axes[1, col].set_ylabel(f'$d^{{{n}}} - d_0^{{{n}}}$')
                    axes[1, col].grid(True, alpha=0.3)
                    
                    shown_combinations += 1
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
            for i in range(shown_combinations, 4):
                row = i // 2
                col = i % 2
                axes[1, col].set_visible(False)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ n
            st.write(f"**–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è n = {n}:**")
            display_df = k_df[['T', 'G', 'K', 'R2', 'n_points']].copy()
            display_df['K'] = display_df['K'].apply(lambda x: f"{x:.6f}")
            display_df['R2'] = display_df['R2'].apply(lambda x: f"{x:.4f}")
            st.dataframe(display_df)
    
    # –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ n
    st.header("5. –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è n")
    
    if n_results:
        n_comparison = []
        for n, k_df in n_results.items():
            n_comparison.append({
                'n': n,
                '–°—Ä–µ–¥–Ω–∏–π R¬≤': k_df['R2'].mean(),
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': k_df['R2'].min(),
                '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π R¬≤': k_df['R2'].max(),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π': len(k_df),
                '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫': k_df['n_points'].sum()
            })
        
        n_comp_df = pd.DataFrame(n_comparison)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        def highlight_best(s):
            is_max = s == s.max()
            return ['background-color: lightgreen' if v else '' for v in is_max]
        
        st.dataframe(n_comp_df.style.format({
            '–°—Ä–µ–¥–Ω–∏–π R¬≤': '{:.4f}',
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': '{:.4f}',
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π R¬≤': '{:.4f}'
        }).apply(highlight_best, subset=['–°—Ä–µ–¥–Ω–∏–π R¬≤']))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä n
        best_n_row = n_comp_df.loc[n_comp_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
        best_n = best_n_row['n']
        
        st.success(f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏: n = {best_n}**")
        st.info(f"""
        *–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞:*
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.4f}
        - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {best_n_row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π']} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π T,G
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {best_n_row['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫']} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.session_state['best_n'] = best_n
        st.session_state['k_values'] = n_results[best_n]
        best_k_df = n_results[best_n]
        
        # –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –í–°–ï–• –∑–µ—Ä–µ–Ω
        st.header("6. –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–µ—Ä–µ–Ω")
        
        arrhenius_results = {}
        grains_with_data = best_k_df['G'].unique()
        
        st.write(f"**–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –¥–ª—è {len(grains_with_data)} –Ω–æ–º–µ—Ä–æ–≤ –∑–µ—Ä–µ–Ω:**")
        st.write(f"{list(sorted(grains_with_data))}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
        n_grains = len(grains_with_data)
        n_cols = 3
        n_rows = (n_grains + n_cols - 1) // n_cols
        
        fig, axes = plt.subplots(n_rows, n_cols, figsize=(5*n_cols, 4*n_rows))
        if n_rows == 1:
            axes = axes.reshape(1, -1)
        elif n_grains == 1:
            axes = np.array([[axes]])
        
        for idx, grain in enumerate(sorted(grains_with_data)):
            grain_data = best_k_df[best_k_df['G'] == grain]
            
            if len(grain_data) >= 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
                x = 1 / grain_data['T_K']
                y = np.log(grain_data['K'])
                
                slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
                
                Q = -slope * R
                K0 = np.exp(intercept)
                
                arrhenius_results[grain] = {
                    'Q': Q,
                    'K0': K0,
                    'R2': r_value**2,
                    'grain_area': grain_data['grain_area'].iloc[0],
                    'n_temperatures': len(grain_data)
                }
                
                # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–µ—Ä–Ω–∞
                row = idx // n_cols
                col = idx % n_cols
                ax = axes[row, col]
                
                ax.scatter(x, y, s=60, alpha=0.7)
                
                # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                x_fit = np.linspace(x.min(), x.max(), 100)
                y_fit = slope * x_fit + intercept
                ax.plot(x_fit, y_fit, 'r--', alpha=0.8)
                
                ax.set_xlabel('1/T (1/K)')
                ax.set_ylabel('ln(K)')
                ax.set_title(f'–ó–µ—Ä–Ω–æ {grain}\nQ={Q:.0f} –î–∂/–º–æ–ª—å\nR¬≤={r_value**2:.3f}')
                ax.grid(True, alpha=0.3)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
        for idx in range(len(grains_with_data), n_rows * n_cols):
            row = idx // n_cols
            col = idx % n_cols
            axes[row, col].set_visible(False)
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
        st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞")
        
        arrhenius_summary = []
        for grain, results in arrhenius_results.items():
            arrhenius_summary.append({
                '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞': grain,
                '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞, –º–º¬≤': results['grain_area'],
                'Q, –î–∂/–º–æ–ª—å': results['Q'],
                'K‚ÇÄ': results['K0'],
                'R¬≤': results['R2'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        arrhenius_df = pd.DataFrame(arrhenius_summary)
        st.dataframe(arrhenius_df.style.format({
            '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞, –º–º¬≤': '{:.6f}',
            'Q, –î–∂/–º–æ–ª—å': '{:.0f}',
            'K‚ÇÄ': '{:.6f}',
            'R¬≤': '{:.4f}'
        }))
        
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ (—É—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
        # ... [–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ]
        
        st.session_state['arrhenius_results'] = arrhenius_results
        st.session_state['best_k_df'] = best_k_df

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
with st.expander("üìä –û –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ"):
    st.markdown("""
    **–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑:**
    
    ‚úÖ **–í—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã** - –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ç–æ—á–∫–∏
    ‚úÖ **–í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–µ–Ω** - –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã  
    ‚úÖ **–í—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏** - –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è T –∏ G
    ‚úÖ **–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç—Ç–∞–ø—É
    
    **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:** –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã (–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞)
    """)
