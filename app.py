import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
from sklearn.ensemble import IsolationForest
from sklearn.covariance import EllipticEnvelope
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.metrics import r2_score, mean_squared_error
import pickle
import json
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–º–∞-—Ñ–∞–∑—ã",
    page_icon="üî¨",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∏–Ω–µ—Ç–∏–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤ —Å—Ç–∞–ª–∏ 12–•18–ù12–¢")
st.markdown("""
### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å–∏–≥–º–∞-—Ñ–∞–∑—ã, –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä—É –∑–µ—Ä–Ω–∞
""")

class DataValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def normalize_column_names(df):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        column_mapping = {
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            '–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞': 'G', '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞': 'G', '–ó–µ—Ä–Ω–æ': 'G',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 'T', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_C': 'T', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C': 'T',
            '–í—Ä–µ–º—è': 't', '–í—Ä–µ–º—è_—á': 't', '–í—Ä–µ–º—è, —á': 't',
            '–°–∏–≥–º–∞_—Ñ–∞–∑–∞': 'f_exp (%)', '–°–∏–≥–º–∞-—Ñ–∞–∑–∞': 'f_exp (%)', 
            '–°–∏–≥–º–∞_—Ñ–∞–∑–∞_%': 'f_exp (%)', '–°–∏–≥–º–∞ —Ñ–∞–∑–∞': 'f_exp (%)',
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'Grain': 'G', 'Grain_number': 'G', 'Grain size': 'G',
            'Temperature': 'T', 'Temp': 'T', 'Temperature_C': 'T',
            'Time': 't', 'Time_h': 't', 'Hours': 't',
            'Sigma_phase': 'f_exp (%)', 'Sigma': 'f_exp (%)', 
            'Sigma_%': 'f_exp (%)', 'f_exp': 'f_exp (%)'
        }
        
        df_normalized = df.copy()
        new_columns = {}
        
        for col in df.columns:
            col_clean = str(col).strip()
            if col_clean in column_mapping:
                new_columns[col] = column_mapping[col_clean]
            else:
                new_columns[col] = col_clean
        
        df_normalized.columns = [new_columns[col] for col in df.columns]
        return df_normalized
    
    @staticmethod
    def validate_data(df):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
        required_columns = ['G', 'T', 't', 'f_exp (%)']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            df['G'] = pd.to_numeric(df['G'], errors='coerce')
            df['T'] = pd.to_numeric(df['T'], errors='coerce')
            df['t'] = pd.to_numeric(df['t'], errors='coerce')
            df['f_exp (%)'] = pd.to_numeric(df['f_exp (%)'], errors='coerce')
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
        if df[required_columns].isna().any().any():
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
        if (df['G'] < -3).any() or (df['G'] > 14).any():
            return False, "–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -3 –¥–æ 14"
        
        if (df['T'] < 500).any() or (df['T'] > 1000).any():
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ typical –¥–∏–∞–ø–∞–∑–æ–Ω 500-1000¬∞C")
        
        if (df['f_exp (%)'] < 0).any() or (df['f_exp (%)'] > 50).any():
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ typical –¥–∏–∞–ø–∞–∑–æ–Ω 0-50%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
        DataValidator.validate_time_range(df['t'])
        
        return True, "–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã"
    
    @staticmethod
    def validate_time_range(t_values):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        max_time = 500000  # —á–∞—Å–æ–≤
        if (t_values > max_time).any():
            st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–≤—ã—à–µ {max_time} —á–∞—Å–æ–≤")
        return True

class GrainSizeConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –ì–û–°–¢ 5639-82"""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ì–û–°–¢ 5639-82
    GRAIN_DATA = {
        -3: {'area_mm2': 1.000, 'diameter_mm': 1.000, 'conditional_diameter_mm': 0.875, 'grains_per_mm2': 1.0},
        -2: {'area_mm2': 0.500, 'diameter_mm': 0.707, 'conditional_diameter_mm': 0.650, 'grains_per_mm2': 2.8},
        -1: {'area_mm2': 0.250, 'diameter_mm': 0.500, 'conditional_diameter_mm': 0.444, 'grains_per_mm2': 8.0},
        0:  {'area_mm2': 0.125, 'diameter_mm': 0.353, 'conditional_diameter_mm': 0.313, 'grains_per_mm2': 22.6},
        1:  {'area_mm2': 0.0625, 'diameter_mm': 0.250, 'conditional_diameter_mm': 0.222, 'grains_per_mm2': 64.0},
        2:  {'area_mm2': 0.0312, 'diameter_mm': 0.177, 'conditional_diameter_mm': 0.157, 'grains_per_mm2': 181.0},
        3:  {'area_mm2': 0.0156, 'diameter_mm': 0.125, 'conditional_diameter_mm': 0.111, 'grains_per_mm2': 512.0},
        4:  {'area_mm2': 0.00781, 'diameter_mm': 0.088, 'conditional_diameter_mm': 0.0783, 'grains_per_mm2': 1448.0},
        5:  {'area_mm2': 0.00390, 'diameter_mm': 0.062, 'conditional_diameter_mm': 0.0553, 'grains_per_mm2': 4096.0},
        6:  {'area_mm2': 0.00195, 'diameter_mm': 0.044, 'conditional_diameter_mm': 0.0391, 'grains_per_mm2': 11585.0},
        7:  {'area_mm2': 0.00098, 'diameter_mm': 0.031, 'conditional_diameter_mm': 0.0267, 'grains_per_mm2': 32768.0},
        8:  {'area_mm2': 0.00049, 'diameter_mm': 0.022, 'conditional_diameter_mm': 0.0196, 'grains_per_mm2': 92682.0},
        9:  {'area_mm2': 0.000244, 'diameter_mm': 0.015, 'conditional_diameter_mm': 0.0138, 'grains_per_mm2': 262144.0},
        10: {'area_mm2': 0.000122, 'diameter_mm': 0.011, 'conditional_diameter_mm': 0.0099, 'grains_per_mm2': 741485.0},
        11: {'area_mm2': 0.000061, 'diameter_mm': 0.0079, 'conditional_diameter_mm': 0.0069, 'grains_per_mm2': 2097152.0},
        12: {'area_mm2': 0.000030, 'diameter_mm': 0.0056, 'conditional_diameter_mm': 0.0049, 'grains_per_mm2': 5931008.0},
        13: {'area_mm2': 0.000015, 'diameter_mm': 0.0039, 'conditional_diameter_mm': 0.0032, 'grains_per_mm2': 16777216.0},
        14: {'area_mm2': 0.000008, 'diameter_mm': 0.0027, 'conditional_diameter_mm': 0.0027, 'grains_per_mm2': 47449064.0}
    }
    
    @classmethod
    def grain_number_to_area(cls, grain_number):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è (–º–º¬≤)"""
        data = cls.GRAIN_DATA.get(grain_number)
        if data:
            return data['area_mm2']
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            numbers = sorted(cls.GRAIN_DATA.keys())
            if grain_number < numbers[0]:
                return cls.GRAIN_DATA[numbers[0]]['area_mm2']
            elif grain_number > numbers[-1]:
                return cls.GRAIN_DATA[numbers[-1]]['area_mm2']
            else:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                lower = max([n for n in numbers if n <= grain_number])
                upper = min([n for n in numbers if n >= grain_number])
                if lower == upper:
                    return cls.GRAIN_DATA[lower]['area_mm2']
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–µ
                log_area_lower = np.log(cls.GRAIN_DATA[lower]['area_mm2'])
                log_area_upper = np.log(cls.GRAIN_DATA[upper]['area_mm2'])
                fraction = (grain_number - lower) / (upper - lower)
                log_area = log_area_lower + fraction * (log_area_upper - log_area_lower)
                return np.exp(log_area)
    
    @classmethod
    def grain_number_to_diameter(cls, grain_number, use_conditional=True):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä (–º–º)"""
        data = cls.GRAIN_DATA.get(grain_number)
        if data:
            return data['conditional_diameter_mm'] if use_conditional else data['diameter_mm']
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            numbers = sorted(cls.GRAIN_DATA.keys())
            if grain_number < numbers[0]:
                return cls.GRAIN_DATA[numbers[0]]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[numbers[0]]['diameter_mm']
            elif grain_number > numbers[-1]:
                return cls.GRAIN_DATA[numbers[-1]]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[numbers[-1]]['diameter_mm']
            else:
                lower = max([n for n in numbers if n <= grain_number])
                upper = min([n for n in numbers if n >= grain_number])
                if lower == upper:
                    return cls.GRAIN_DATA[lower]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[lower]['diameter_mm']
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                diam_lower = cls.GRAIN_DATA[lower]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[lower]['diameter_mm']
                diam_upper = cls.GRAIN_DATA[upper]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[upper]['diameter_mm']
                fraction = (grain_number - lower) / (upper - lower)
                return diam_lower + fraction * (diam_upper - diam_lower)
    
    @classmethod
    def calculate_grain_boundary_density(cls, grain_number):
        """
        –†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω (–º–º¬≤/–º–º¬≥)
        –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –∏–∑ –ì–û–°–¢
        """
        d = cls.grain_number_to_diameter(grain_number, use_conditional=True)  # –º–º
        
        # –î–ª—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–µ—Ä–µ–Ω: Sv = 3/R = 6/D
        Sv = 3.0 / (d / 2.0)  # –º–º¬≤/–º–º¬≥
        
        return Sv
    
    @classmethod
    def calculate_activation_energy_factor(cls, grain_number):
        """
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ì–û–°–¢
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ 5 (–±–∞–∑–æ–≤—ã–π)
        ref_grain = 5
        Sv_ref = cls.calculate_grain_boundary_density(ref_grain)
        Sv_current = cls.calculate_grain_boundary_density(grain_number)
        
        return Sv_current / Sv_ref

class SigmaPhaseAnalyzer:
    def __init__(self):
        self.params = None
        self.R2 = None
        self.rmse = None
        self.outlier_info = None
        self.original_data = None
        self.clean_data = None
        self.model_version = "2.0"
        self.creation_date = datetime.now().isoformat()
        self.last_modified = datetime.now().isoformat()
        self.use_advanced_model = True
        
    def fit_model(self, data, remove_outliers=True, outlier_method='iqr', contamination=0.1):
        """–ü–æ–¥–≥–æ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤"""
        try:
            self.last_modified = datetime.now().isoformat()
            self.original_data = data.copy()
            
            if remove_outliers:
                outlier_data, clean_data = self.detect_outliers(data, outlier_method, contamination)
                self.clean_data = clean_data
                self.outlier_info = {
                    'outlier_data': outlier_data,
                    'method': outlier_method,
                    'contamination': contamination,
                    'outlier_count': len(outlier_data) if outlier_data is not None else 0,
                    'total_count': len(data)
                }
            else:
                self.clean_data = data
                self.outlier_info = {
                    'outlier_data': None,
                    'method': 'none',
                    'outlier_count': 0,
                    'total_count': len(data)
                }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏
            G = self.clean_data['G'].values
            T_celsius = self.clean_data['T'].values
            T_kelvin = T_celsius + 273.15  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ö–µ–ª—å–≤–∏–Ω—ã
            t = self.clean_data['t'].values
            sigma_exp = self.clean_data['f_exp (%)'].values / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è % –≤ –¥–æ–ª–∏
            
            # –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é –≥—Ä–∞–Ω–∏—Ü
            initial_guess = [1e10, 200000, 10000, 1.0, 550.0, 900.0, 0.1]
            bounds = (
                [1e5, 100000, 0, 0.1, 500.0, 850.0, 0.0],
                [1e15, 500000, 50000, 4.0, 600.0, 950.0, 1.0]
            )
            
            self.params, _ = curve_fit(
                lambda x, K0, a, b, n, T_min, T_max, alpha: 
                self.sigma_phase_model_advanced([K0, a, b, n, T_min, T_max, alpha], G, T_kelvin, t),
                np.arange(len(G)), sigma_exp,
                p0=initial_guess,
                bounds=bounds,
                maxfev=10000
            )
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            sigma_pred = self.sigma_phase_model_advanced(self.params, G, T_kelvin, t) * 100
            sigma_exp_percent = sigma_exp * 100
            self.R2 = r2_score(sigma_exp_percent, sigma_pred)
            self.rmse = np.sqrt(mean_squared_error(sigma_exp_percent, sigma_pred))
            
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ–Ω–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
            return False
    
    def sigma_phase_model_advanced(self, params, G, T, t):
        """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω"""
        K0, a, b, n, T_sigma_min, T_sigma_max, alpha = params
        R = 8.314  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        T_min = T_sigma_min + 273.15
        T_max = T_sigma_max + 273.15
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        T_eff = np.where(T < T_min, T_min, T)
        T_eff = np.where(T_eff > T_max, T_max, T_eff)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        temp_factor = 1 / (1 + np.exp(-0.1 * (T - (T_min + 50)))) * 1 / (1 + np.exp(0.1 * (T - (T_max - 50))))
        
        # –ë–∞–∑–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        Q_base = a + b * G
        
        # –í–ª–∏—è–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω
        grain_boundary_factor = np.array([GrainSizeConverter.calculate_activation_energy_factor(g) for g in G])
        Q_effective = Q_base * (1 + alpha * (grain_boundary_factor - 1))
        
        K = K0 * np.exp(-Q_effective / (R * T_eff)) * temp_factor
        
        sigma = 1 - np.exp(-K * (t ** n))
        return sigma
    
    def detect_outliers(self, data, method='iqr', contamination=0.1):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ö–µ–ª—å–≤–∏–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        T_kelvin = data['T'] + 273.15
        features = np.column_stack([data['G'].values, T_kelvin.values, data['t'].values, data['f_exp (%)'].values])
        
        if method == 'iqr':
            outlier_flags = np.zeros(len(data), dtype=bool)
            
            for i, col in enumerate(['f_exp (%)', 't', 'T']):
                if col == 'T':
                    values = T_kelvin.values
                else:
                    values = data[col].values
                    
                Q1 = np.percentile(values, 25)
                Q3 = np.percentile(values, 75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                
                col_outliers = (values < lower_bound) | (values > upper_bound)
                outlier_flags = outlier_flags | col_outliers
            
        elif method == 'isolation_forest':
            from sklearn.ensemble import IsolationForest
            clf = IsolationForest(contamination=contamination, random_state=42)
            labels = clf.fit_predict(features)
            outlier_flags = labels == -1
        
        outlier_data = data[outlier_flags]
        clean_data = data[~outlier_flags]
        
        return outlier_data, clean_data
    
    def predict_temperature(self, G, sigma_percent, t):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        if self.params is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
        
        R = 8.314
        sigma = sigma_percent / 100.0
        
        try:
            K0, a, b, n, T_sigma_min, T_sigma_max, alpha = self.params
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            grain_boundary_factor = GrainSizeConverter.calculate_activation_energy_factor(G)
            Q_effective = (a + b * G) * (1 + alpha * (grain_boundary_factor - 1))
            
            term = -np.log(1 - sigma) / (K0 * (t ** n))
            if term <= 0:
                return None
            
            T_kelvin = -Q_effective / (R * np.log(term))
            T_celsius = T_kelvin - 273.15
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if T_celsius < T_sigma_min:
                return T_sigma_min
            elif T_celsius > T_sigma_max:
                return T_sigma_max
            else:
                return T_celsius
                
        except:
            return None

    def predict_temperature_improved(self, G, sigma_percent, t):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        if self.params is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
        
        R = 8.314
        sigma = sigma_percent / 100.0
        
        try:
            K0, a, b, n, T_sigma_min, T_sigma_max, alpha = self.params
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            grain_boundary_factor = GrainSizeConverter.calculate_activation_energy_factor(G)
            Q_effective = (a + b * G) * (1 + alpha * (grain_boundary_factor - 1))
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω–∞—Ö
            if sigma >= 1.0:
                sigma = 0.999  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è log(0)
            
            term = -np.log(1 - sigma) / (K0 * (t ** n))
            
            if term <= 0:
                # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                return T_sigma_min
            
            T_kelvin = -Q_effective / (R * np.log(term))
            T_celsius = T_kelvin - 273.15
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if T_celsius < T_sigma_min:
                return T_sigma_min
            elif T_celsius > T_sigma_max:
                return T_sigma_max
            else:
                return T_celsius
                
        except (ValueError, ZeroDivisionError) as e:
            # –ü—Ä–∏ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            st.warning(f"‚ö†Ô∏è –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–ª—è t={t} —á –≤–æ–∑–Ω–∏–∫–ª–∞ —á–∏—Å–ª–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.")
            return T_sigma_min

def read_uploaded_file(uploaded_file):
    """–ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if uploaded_file.name.endswith('.csv'):
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            try:
                data = pd.read_csv(uploaded_file, decimal=',', encoding='utf-8')
            except:
                try:
                    data = pd.read_csv(uploaded_file, decimal=',', encoding='cp1251')
                except:
                    data = pd.read_csv(uploaded_file, decimal='.', encoding='utf-8')
        else:
            # –î–ª—è Excel —Ñ–∞–π–ª–æ–≤
            try:
                if uploaded_file.name.endswith('.xlsx'):
                    try:
                        data = pd.read_excel(uploaded_file, engine='openpyxl')
                    except ImportError:
                        st.error("‚ùå –î–ª—è —á—Ç–µ–Ω–∏—è .xlsx —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl")
                        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: `pip install openpyxl`")
                        return None
                else:  # .xls
                    try:
                        data = pd.read_excel(uploaded_file, engine='xlrd')
                    except ImportError:
                        st.error("‚ùå –î–ª—è —á—Ç–µ–Ω–∏—è .xls —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ xlrd")
                        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: `pip install xlrd`")
                        return None
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {str(e)}")
                return None
        
        return data
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = None
    if 'current_data' not in st.session_state:
        st.session_state.current_data = None
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if st.session_state.analyzer is not None and st.session_state.current_data is not None:
        if st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
            project_data = {
                'analyzer': st.session_state.analyzer.__dict__,
                'current_data': st.session_state.current_data.to_dict()
            }
            
            project_json = json.dumps(project_data, indent=2)
            st.sidebar.download_button(
                label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                data=project_json,
                file_name=f"sigma_phase_project_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
    st.sidebar.header("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤")
    remove_outliers = st.sidebar.checkbox("–£–¥–∞–ª—è—Ç—å –≤—ã–±—Ä–æ—Å—ã", value=True)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    sample_data = pd.DataFrame({
        'G': [3, 3, 5, 5, 8, 8, 9, 9, 3, 5, 8],
        'T': [600, 650, 600, 700, 650, 700, 600, 700, 600, 650, 750],
        't': [2000, 4000, 4000, 2000, 6000, 4000, 8000, 6000, 2000, 4000, 4000],
        'f_exp (%)': [5.2, 12.5, 8.1, 15.3, 18.7, 25.1, 22.4, 35.2, 12.8, 25.6, 2.1]
    })
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.header("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        type=['csv', 'xlsx', 'xls'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, Excel (.xlsx, .xls)"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if uploaded_file is not None:
        data = read_uploaded_file(uploaded_file)
        
        if data is not None:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            data = DataValidator.normalize_column_names(data)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            is_valid, message = DataValidator.validate_data(data)
            
            if is_valid:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ç—ã—Å—è—á–Ω—ã—Ö
                data['f_exp (%)'] = data['f_exp (%)'].round(3)
                st.session_state.current_data = data
                st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã!")
                st.sidebar.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫")
            else:
                st.sidebar.error(f"‚ùå {message}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
                st.sidebar.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä
    if st.session_state.current_data is None:
        st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.session_state.current_data = sample_data
    
    # –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.header("üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    if st.session_state.current_data is not None:
        st.info(f"**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:** {len(st.session_state.current_data)} —Å—Ç—Ä–æ–∫ √ó {len(st.session_state.current_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        st.write("**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**", list(st.session_state.current_data.columns))
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if st.session_state.current_data is not None:
        edited_data = st.data_editor(
            st.session_state.current_data,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "f_exp (%)": st.column_config.NumberColumn(format="%.3f"),
                "G": st.column_config.NumberColumn(format="%d"),
                "T": st.column_config.NumberColumn(format="%.1f"),
                "t": st.column_config.NumberColumn(format="%d")
            }
        )
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'f_exp (%)' in edited_data.columns:
            edited_data['f_exp (%)'] = edited_data['f_exp (%)'].round(3)
        
        if not edited_data.equals(st.session_state.current_data):
            st.session_state.current_data = edited_data
            st.session_state.analyzer = None
            st.rerun()
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    if st.session_state.current_data is not None and 'G' in st.session_state.current_data.columns:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–µ—Ä–Ω–∞—Ö –≤ –¥–∞–Ω–Ω—ã—Ö
        unique_grain_numbers = sorted(st.session_state.current_data['G'].unique())
        
        st.subheader("üìê –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–µ—Ä–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        cols = st.columns(min(5, len(unique_grain_numbers)))
        
        for i, grain_num in enumerate(unique_grain_numbers):
            with cols[i % 5]:
                diameter = GrainSizeConverter.grain_number_to_diameter(grain_num)
                boundary_density = GrainSizeConverter.calculate_grain_boundary_density(grain_num)
                activation_factor = GrainSizeConverter.calculate_activation_energy_factor(grain_num)
                
                st.metric(
                    f"G = {grain_num}",
                    f"{diameter*1000:.1f} –º–∫–º",
                    f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {boundary_density:.0f} –º–º¬≤/–º–º¬≥"
                )
                st.caption(f"–ö–æ—ç—Ñ. –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_factor:.3f}")
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    if st.button("üéØ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏", use_container_width=True):
        if st.session_state.current_data is not None and all(col in st.session_state.current_data.columns for col in ['G', 'T', 't', 'f_exp (%)']):
            analyzer = SigmaPhaseAnalyzer()
            
            with st.spinner("–ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏..."):
                success = analyzer.fit_model(
                    st.session_state.current_data, 
                    remove_outliers=remove_outliers
                )
            
            if success:
                st.session_state.analyzer = analyzer
                st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                st.rerun()
        else:
            st.error("‚ùå –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–æ–ª–æ–Ω–∫–∏: G, T, t, f_exp (%)")
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    if st.session_state.analyzer is not None:
        analyzer = st.session_state.analyzer
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        st.subheader("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
        
        if analyzer.params is not None:
            K0, a, b, n, T_sigma_min, T_sigma_max, alpha = analyzer.params
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("K‚ÇÄ", f"{K0:.2e}")
                st.metric("a", f"{a:.2f}")
            with col2:
                st.metric("b", f"{b:.2f}")
                st.metric("n", f"{n:.3f}")
            with col3:
                st.metric("Œ±", f"{alpha:.3f}")
            
            st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω", f"{T_sigma_min:.1f}¬∞C - {T_sigma_max:.1f}¬∞C")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("R¬≤", f"{analyzer.R2:.4f}")
            with col2:
                st.metric("RMSE", f"{analyzer.rmse:.2f}%")
            
            # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                G_input = st.number_input("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ (G)", 
                                        min_value=-3.0, max_value=14.0, 
                                        value=5.0, step=0.1)
            with col2:
                sigma_input = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã f_exp (%)", 
                                            min_value=0.0, max_value=50.0,
                                            value=10.0, step=0.1,
                                            format="%.3f")
            with col3:
                t_input = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ t (—á)", 
                                        min_value=100, max_value=500000,  # –ò–ó–ú–ï–ù–ï–ù–û: 500000 —á–∞—Å–æ–≤
                                        value=4000, step=1000)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∞–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if t_input > 100000:
                st.info("üîç –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (—Å–≤—ã—à–µ 100000 —á–∞—Å–æ–≤)")
            
            if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", key="calc_temp"):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω
                    if t_input > 100000:
                        T_celsius = analyzer.predict_temperature_improved(G_input, sigma_input, t_input)
                    else:
                        T_celsius = analyzer.predict_temperature(G_input, sigma_input, t_input)
                    
                    if T_celsius is not None:
                        st.success(f"""
                        ### –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:
                        - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:** {T_celsius:.1f}¬∞C
                        - –ü—Ä–∏ –Ω–æ–º–µ—Ä–µ –∑–µ—Ä–Ω–∞: {G_input}
                        - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã: {sigma_input:.3f}%
                        - –ù–∞—Ä–∞–±–æ—Ç–∫–µ: {t_input} —á
                        """)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω
                        if t_input > 200000:
                            st.info("üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–∞—Å—á–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–≤—ã—à–µ 200000 —á–∞—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        if T_celsius <= T_sigma_min + 10:
                            st.warning("‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã")
                        elif T_celsius >= T_sigma_max - 10:
                            st.warning("‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")

if __name__ == "__main__":
    main()
