import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
from sklearn.ensemble import IsolationForest
from sklearn.covariance import EllipticEnvelope
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Ridge
import pickle
import json
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–º–∞-—Ñ–∞–∑—ã",
    page_icon="üî¨",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∏–Ω–µ—Ç–∏–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤ —Å—Ç–∞–ª–∏ 12–•18–ù12–¢")
st.markdown("""
### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å–∏–≥–º–∞-—Ñ–∞–∑—ã, –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä—É –∑–µ—Ä–Ω–∞
""")

class DataValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def normalize_column_names(df):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        column_mapping = {
            '–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞': 'G', '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞': 'G', '–ó–µ—Ä–Ω–æ': 'G',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 'T', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_C': 'T', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C': 'T',
            '–í—Ä–µ–º—è': 't', '–í—Ä–µ–º—è_—á': 't', '–í—Ä–µ–º—è, —á': 't',
            '–°–∏–≥–º–∞_—Ñ–∞–∑–∞': 'f_exp (%)', '–°–∏–≥–º–∞-—Ñ–∞–∑–∞': 'f_exp (%)', 
            '–°–∏–≥–º–∞_—Ñ–∞–∑–∞_%': 'f_exp (%)', '–°–∏–≥–º–∞ —Ñ–∞–∑–∞': 'f_exp (%)',
            'Grain': 'G', 'Grain_number': 'G', 'Grain size': 'G',
            'Temperature': 'T', 'Temp': 'T', 'Temperature_C': 'T',
            'Time': 't', 'Time_h': 't', 'Hours': 't',
            'Sigma_phase': 'f_exp (%)', 'Sigma': 'f_exp (%)', 
            'Sigma_%': 'f_exp (%)', 'f_exp': 'f_exp (%)'
        }
        
        df_normalized = df.copy()
        new_columns = {}
        
        for col in df.columns:
            col_clean = str(col).strip()
            if col_clean in column_mapping:
                new_columns[col] = column_mapping[col_clean]
            else:
                new_columns[col] = col_clean
        
        df_normalized.columns = [new_columns[col] for col in df.columns]
        return df_normalized
    
    @staticmethod
    def validate_data(df):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
        required_columns = ['G', 'T', 't', 'f_exp (%)']
        
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}"
        
        try:
            df['G'] = pd.to_numeric(df['G'], errors='coerce')
            df['T'] = pd.to_numeric(df['T'], errors='coerce')
            df['t'] = pd.to_numeric(df['t'], errors='coerce')
            df['f_exp (%)'] = pd.to_numeric(df['f_exp (%)'], errors='coerce')
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        if df[required_columns].isna().any().any():
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö"
        
        if (df['G'] < -3).any() or (df['G'] > 14).any():
            return False, "–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -3 –¥–æ 14"
        
        if (df['T'] < 500).any() or (df['T'] > 1000).any():
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ typical –¥–∏–∞–ø–∞–∑–æ–Ω 500-1000¬∞C")
        
        if (df['f_exp (%)'] < 0).any() or (df['f_exp (%)'] > 50).any():
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ typical –¥–∏–∞–ø–∞–∑–æ–Ω 0-50%")
        
        DataValidator.validate_time_range(df['t'])
        
        return True, "–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã"
    
    @staticmethod
    def validate_time_range(t_values):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        max_time = 500000
        if (t_values > max_time).any():
            st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–≤—ã—à–µ {max_time} —á–∞—Å–æ–≤")
        return True

class GrainSizeConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –ì–û–°–¢ 5639-82"""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ì–û–°–¢ 5639-82
    GRAIN_DATA = {
        -3: {'area_mm2': 1.000, 'diameter_mm': 1.000, 'conditional_diameter_mm': 0.875, 'grains_per_mm2': 1.0},
        -2: {'area_mm2': 0.500, 'diameter_mm': 0.707, 'conditional_diameter_mm': 0.650, 'grains_per_mm2': 2.8},
        -1: {'area_mm2': 0.250, 'diameter_mm': 0.500, 'conditional_diameter_mm': 0.444, 'grains_per_mm2': 8.0},
        0:  {'area_mm2': 0.125, 'diameter_mm': 0.353, 'conditional_diameter_mm': 0.313, 'grains_per_mm2': 22.6},
        1:  {'area_mm2': 0.0625, 'diameter_mm': 0.250, 'conditional_diameter_mm': 0.222, 'grains_per_mm2': 64.0},
        2:  {'area_mm2': 0.0312, 'diameter_mm': 0.177, 'conditional_diameter_mm': 0.157, 'grains_per_mm2': 181.0},
        3:  {'area_mm2': 0.0156, 'diameter_mm': 0.125, 'conditional_diameter_mm': 0.111, 'grains_per_mm2': 512.0},
        4:  {'area_mm2': 0.00781, 'diameter_mm': 0.088, 'conditional_diameter_mm': 0.0783, 'grains_per_mm2': 1448.0},
        5:  {'area_mm2': 0.00390, 'diameter_mm': 0.062, 'conditional_diameter_mm': 0.0553, 'grains_per_mm2': 4096.0},
        6:  {'area_mm2': 0.00195, 'diameter_mm': 0.044, 'conditional_diameter_mm': 0.0391, 'grains_per_mm2': 11585.0},
        7:  {'area_mm2': 0.00098, 'diameter_mm': 0.031, 'conditional_diameter_mm': 0.0267, 'grains_per_mm2': 32768.0},
        8:  {'area_mm2': 0.00049, 'diameter_mm': 0.022, 'conditional_diameter_mm': 0.0196, 'grains_per_mm2': 92682.0},
        9:  {'area_mm2': 0.000244, 'diameter_mm': 0.015, 'conditional_diameter_mm': 0.0138, 'grains_per_mm2': 262144.0},
        10: {'area_mm2': 0.000122, 'diameter_mm': 0.011, 'conditional_diameter_mm': 0.0099, 'grains_per_mm2': 741485.0},
        11: {'area_mm2': 0.000061, 'diameter_mm': 0.0079, 'conditional_diameter_mm': 0.0069, 'grains_per_mm2': 2097152.0},
        12: {'area_mm2': 0.000030, 'diameter_mm': 0.0056, 'conditional_diameter_mm': 0.0049, 'grains_per_mm2': 5931008.0},
        13: {'area_mm2': 0.000015, 'diameter_mm': 0.0039, 'conditional_diameter_mm': 0.0032, 'grains_per_mm2': 16777216.0},
        14: {'area_mm2': 0.000008, 'diameter_mm': 0.0027, 'conditional_diameter_mm': 0.0027, 'grains_per_mm2': 47449064.0}
    }
    
    @classmethod
    def grain_number_to_area(cls, grain_number):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è (–º–º¬≤)"""
        data = cls.GRAIN_DATA.get(grain_number)
        if data:
            return data['area_mm2']
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            numbers = sorted(cls.GRAIN_DATA.keys())
            if grain_number < numbers[0]:
                return cls.GRAIN_DATA[numbers[0]]['area_mm2']
            elif grain_number > numbers[-1]:
                return cls.GRAIN_DATA[numbers[-1]]['area_mm2']
            else:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                lower = max([n for n in numbers if n <= grain_number])
                upper = min([n for n in numbers if n >= grain_number])
                if lower == upper:
                    return cls.GRAIN_DATA[lower]['area_mm2']
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–µ
                log_area_lower = np.log(cls.GRAIN_DATA[lower]['area_mm2'])
                log_area_upper = np.log(cls.GRAIN_DATA[upper]['area_mm2'])
                fraction = (grain_number - lower) / (upper - lower)
                log_area = log_area_lower + fraction * (log_area_upper - log_area_lower)
                return np.exp(log_area)
    
    @classmethod
    def grain_number_to_diameter(cls, grain_number, use_conditional=True):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä (–º–º)"""
        data = cls.GRAIN_DATA.get(grain_number)
        if data:
            return data['conditional_diameter_mm'] if use_conditional else data['diameter_mm']
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            numbers = sorted(cls.GRAIN_DATA.keys())
            if grain_number < numbers[0]:
                return cls.GRAIN_DATA[numbers[0]]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[numbers[0]]['diameter_mm']
            elif grain_number > numbers[-1]:
                return cls.GRAIN_DATA[numbers[-1]]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[numbers[-1]]['diameter_mm']
            else:
                lower = max([n for n in numbers if n <= grain_number])
                upper = min([n for n in numbers if n >= grain_number])
                if lower == upper:
                    return cls.GRAIN_DATA[lower]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[lower]['diameter_mm']
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                diam_lower = cls.GRAIN_DATA[lower]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[lower]['diameter_mm']
                diam_upper = cls.GRAIN_DATA[upper]['conditional_diameter_mm'] if use_conditional else cls.GRAIN_DATA[upper]['diameter_mm']
                fraction = (grain_number - lower) / (upper - lower)
                return diam_lower + fraction * (diam_upper - diam_lower)
    
    @classmethod
    def calculate_grain_boundary_density(cls, grain_number):
        """
        –†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω (–º–º¬≤/–º–º¬≥)
        –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –∏–∑ –ì–û–°–¢
        """
        d = cls.grain_number_to_diameter(grain_number, use_conditional=True)  # –º–º
        
        # –î–ª—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–µ—Ä–µ–Ω: Sv = 3/R = 6/D
        Sv = 3.0 / (d / 2.0)  # –º–º¬≤/–º–º¬≥
        
        return Sv
    
    @classmethod
    def calculate_activation_energy_factor(cls, grain_number):
        """
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ì–û–°–¢
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ 5 (–±–∞–∑–æ–≤—ã–π)
        ref_grain = 5
        Sv_ref = cls.calculate_grain_boundary_density(ref_grain)
        Sv_current = cls.calculate_grain_boundary_density(grain_number)
        
        return Sv_current / Sv_ref

class AdvancedSigmaPhaseAnalyzer:
    def __init__(self):
        self.params = None
        self.R2 = None
        self.rmse = None
        self.mape = None
        self.model_type = None
        self.creation_date = datetime.now().isoformat()
        self.final_formula = ""
        
    def fit_ensemble_model(self, data):
        """–ê–Ω—Å–∞–º–±–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
        try:
            G = data['G'].values
            T = data['T'].values + 273.15
            t = data['t'].values
            f_exp = data['f_exp (%)'].values
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω—Å–∞–º–±–ª—è: f_max, K0, Q, n, alpha, w, beta
            initial_guess = [5.0, 1e8, 150000, 0.5, 0.1, 0.1, -20000]
            bounds = (
                [1.0, 1e5, 100000, 0.1, -1.0, 0.01, -50000],
                [15.0, 1e12, 300000, 2.0, 1.0, 1.0, -1000]
            )
            
            def model(params, G, T, t):
                f_max, K0, Q, n, alpha, w, beta = params
                R = 8.314
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ê–≤—Ä–∞–º–∏
                grain_effect_avrami = 1 + alpha * (G - 8)
                K_avrami = K0 * np.exp(-Q / (R * T)) * grain_effect_avrami
                f_avrami = f_max * (1 - np.exp(-K_avrami * (t ** n)))
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞
                temp_effect_power = np.exp(beta / (R * T))
                f_power = w * temp_effect_power * (t ** 0.5) * (1 + 0.05 * (G - 8))
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
                f_pred = f_avrami + f_power
                return np.clip(f_pred, 0, 15)
            
            self.params, _ = curve_fit(
                lambda x, f_max, K0, Q, n, alpha, w, beta: model([f_max, K0, Q, n, alpha, w, beta], G, T, t),
                np.arange(len(G)), f_exp,
                p0=initial_guess,
                bounds=bounds,
                maxfev=10000
            )
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            f_pred = model(self.params, G, T, t)
            self.R2 = r2_score(f_exp, f_pred)
            self.rmse = np.sqrt(mean_squared_error(f_exp, f_pred))
            self.mape = np.mean(np.abs((f_exp - f_pred) / f_exp)) * 100
            self.model_type = "ensemble"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
            self._generate_final_formula()
            
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def _generate_final_formula(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Ç–∞–µ–º–æ–π —Ñ–æ—Ä–º—É–ª—ã –º–æ–¥–µ–ª–∏"""
        if self.params is None:
            self.final_formula = "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞"
            return
            
        f_max, K0, Q, n, alpha, w, beta = self.params
        
        self.final_formula = f"""
**–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏:**
f(G, T, t) = f_avrami(G, T, t) + f_power(G, T, t)

–≥–¥–µ:

f_avrami(G, T, t) = {f_max:.3f} √ó [1 - exp(-K_avrami √ó t^{n:.3f})]
K_avrami = {K0:.3e} √ó exp(-{Q/1000:.1f} –∫–î–∂/–º–æ–ª—å / (R √ó T)) √ó [1 + {alpha:.3f} √ó (G - 8)]

f_power(G, T, t) = {w:.3f} √ó exp({beta:.0f} / (R √ó T)) √ó t^0.5 √ó [1 + 0.05 √ó (G - 8)]

R = 8.314 –î–∂/(–º–æ–ª—å¬∑–ö) - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
T - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (T[¬∞C] + 273.15)
        
**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
- `f_max = {f_max:.3f} %` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã
- `K0 = {K0:.3e}` - –ø—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
- `Q = {Q/1000:.1f} –∫–î–∂/–º–æ–ª—å` - —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
- `n = {n:.3f}` - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ –≤ –º–æ–¥–µ–ª–∏ –ê–≤—Ä–∞–º–∏
- `Œ± = {alpha:.3f}` - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞
- `w = {w:.3f}` - –≤–µ—Å —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
- `Œ≤ = {beta:.0f}` - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Å—Ç–µ–ø–µ–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–µ
"""
    
    def predict_temperature(self, G, sigma_percent, t, method="bisection"):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        if self.params is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
        
        sigma = sigma_percent
        
        if method == "bisection":
            return self._predict_temperature_bisection(G, sigma, t)
        else:
            return self._predict_temperature_analytic(G, sigma, t)
    
    def _predict_temperature_bisection(self, G, sigma, t, tol=1.0, max_iter=100):
        """–ë–∏—Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        T_min, T_max = 500, 900  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        
        for i in range(max_iter):
            T_mid = (T_min + T_max) / 2
            f_pred = self._evaluate_model(G, T_mid, t)
            
            if abs(f_pred - sigma) < tol:
                return T_mid
            
            if f_pred < sigma:
                T_min = T_mid
            else:
                T_max = T_mid
        
        return (T_min + T_max) / 2
    
    def _evaluate_model(self, G, T, t):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.params is None:
            return 0.0
            
        T_kelvin = T + 273.15
        f_max, K0, Q, n, alpha, w, beta = self.params
        R = 8.314
        
        # –ê–≤—Ä–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        grain_effect_avrami = 1 + alpha * (G - 8)
        K_avrami = K0 * np.exp(-Q / (R * T_kelvin)) * grain_effect_avrami
        f_avrami = f_max * (1 - np.exp(-K_avrami * (t ** n)))
        
        # –°—Ç–µ–ø–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        temp_effect_power = np.exp(beta / (R * T_kelvin))
        f_power = w * temp_effect_power * (t ** 0.5) * (1 + 0.05 * (G - 8))
        
        return f_avrami + f_power
    
    def calculate_validation_metrics(self, data):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.params is None:
            return None
        
        G = data['G'].values
        T = data['T'].values
        t = data['t'].values
        f_exp = data['f_exp (%)'].values
        
        f_pred = np.array([self._evaluate_model(g, temp, time) for g, temp, time in zip(G, T, t)])
        
        residuals = f_pred - f_exp
        relative_errors = (residuals / f_exp) * 100
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        valid_mask = np.isfinite(relative_errors) & (f_exp > 0.1)
        f_exp_valid = f_exp[valid_mask]
        f_pred_valid = f_pred[valid_mask]
        residuals_valid = residuals[valid_mask]
        relative_errors_valid = relative_errors[valid_mask]
        
        if len(f_exp_valid) == 0:
            return None
            
        mae = np.mean(np.abs(residuals_valid))
        rmse = np.sqrt(mean_squared_error(f_exp_valid, f_pred_valid))
        mape = np.mean(np.abs(relative_errors_valid))
        r2 = r2_score(f_exp_valid, f_pred_valid)
        
        validation_results = {
            'data': data.copy(),
            'predictions': f_pred,
            'residuals': residuals,
            'relative_errors': relative_errors,
            'metrics': {
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape,
                'R2': r2
            }
        }
        
        return validation_results

def read_uploaded_file(uploaded_file):
    """–ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if uploaded_file.name.endswith('.csv'):
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            try:
                data = pd.read_csv(uploaded_file, decimal=',', encoding='utf-8')
            except:
                try:
                    data = pd.read_csv(uploaded_file, decimal=',', encoding='cp1251')
                except:
                    data = pd.read_csv(uploaded_file, decimal='.', encoding='utf-8')
        else:
            # –î–ª—è Excel —Ñ–∞–π–ª–æ–≤
            try:
                if uploaded_file.name.endswith('.xlsx'):
                    try:
                        data = pd.read_excel(uploaded_file, engine='openpyxl')
                    except ImportError:
                        st.error("‚ùå –î–ª—è —á—Ç–µ–Ω–∏—è .xlsx —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl")
                        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: `pip install openpyxl`")
                        return None
                else:  # .xls
                    try:
                        data = pd.read_excel(uploaded_file, engine='xlrd')
                    except ImportError:
                        st.error("‚ùå –î–ª—è —á—Ç–µ–Ω–∏—è .xls —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ xlrd")
                        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: `pip install xlrd`")
                        return None
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {str(e)}")
                return None
        
        return data
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = None
    if 'current_data' not in st.session_state:
        st.session_state.current_data = None
    if 'validation_results' not in st.session_state:
        st.session_state.validation_results = None
    if 'excluded_points' not in st.session_state:
        st.session_state.excluded_points = set()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2, tab3 = st.tabs(["üìä –î–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üìà –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"])
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if st.session_state.analyzer is not None and st.session_state.current_data is not None:
        if st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
            project_data = {
                'analyzer': st.session_state.analyzer.__dict__,
                'current_data': st.session_state.current_data.to_dict()
            }
            
            project_json = json.dumps(project_data, indent=2)
            st.sidebar.download_button(
                label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                data=project_json,
                file_name=f"sigma_phase_project_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
    st.sidebar.header("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤")
    remove_outliers = st.sidebar.checkbox("–£–¥–∞–ª—è—Ç—å –≤—ã–±—Ä–æ—Å—ã", value=True)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    sample_data = pd.DataFrame({
        'G': [8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        'T': [600, 600, 600, 600, 650, 650, 650, 650, 600, 600, 600, 600, 650, 650, 650, 650, 600, 600, 600, 600, 650, 650, 650, 650, 700, 700],
        't': [2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000],
        'f_exp (%)': [1.76, 0.68, 0.94, 1.09, 0.67, 1.2, 1.48, 1.13, 0.87, 1.28, 2.83, 3.25, 1.88, 2.29, 3.25, 2.89, 1.261, 2.04, 2.38, 3.3, 3.2, 4.26, 5.069, 5.41, 3.3, 5.0]
    })
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.header("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        type=['csv', 'xlsx', 'xls'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, Excel (.xlsx, .xls)"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if uploaded_file is not None:
        data = read_uploaded_file(uploaded_file)
        
        if data is not None:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            data = DataValidator.normalize_column_names(data)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            is_valid, message = DataValidator.validate_data(data)
            
            if is_valid:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ç—ã—Å—è—á–Ω—ã—Ö
                data['f_exp (%)'] = data['f_exp (%)'].round(3)
                st.session_state.current_data = data
                st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã!")
                st.sidebar.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫")
            else:
                st.sidebar.error(f"‚ùå {message}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
                st.sidebar.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä
    if st.session_state.current_data is None:
        st.session_state.current_data = sample_data

    # –í–ö–õ–ê–î–ö–ê 1: –î–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å
    with tab1:
        st.header("üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        if st.session_state.current_data is not None:
            st.info(f"**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:** {len(st.session_state.current_data)} —Å—Ç—Ä–æ–∫ √ó {len(st.session_state.current_data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            st.write("**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**", list(st.session_state.current_data.columns))
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        display_data = st.session_state.current_data.copy()
        display_data['–í–∫–ª—é—á–∏—Ç—å'] = [i not in st.session_state.excluded_points for i in range(len(display_data))]
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—á–µ–∫
        edited_data = st.data_editor(
            display_data,
            column_config={
                "–í–∫–ª—é—á–∏—Ç—å": st.column_config.CheckboxColumn(
                    "–í–∫–ª—é—á–∏—Ç—å –≤ –∞–Ω–∞–ª–∏–∑",
                    help="–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"
                ),
                "f_exp (%)": st.column_config.NumberColumn(format="%.3f"),
                "G": st.column_config.NumberColumn(format="%d"),
                "T": st.column_config.NumberColumn(format="%.1f"),
                "t": st.column_config.NumberColumn(format="%d")
            },
            disabled=["G", "T", "t", "f_exp (%)"],
            use_container_width=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        new_excluded = set()
        for i, included in enumerate(edited_data['–í–∫–ª—é—á–∏—Ç—å']):
            if not included:
                new_excluded.add(i)
        
        if new_excluded != st.session_state.excluded_points:
            st.session_state.excluded_points = new_excluded
            st.session_state.analyzer = None
            st.session_state.validation_results = None
            st.rerun()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        total_points = len(st.session_state.current_data)
        excluded_count = len(st.session_state.excluded_points)
        included_count = total_points - excluded_count
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", total_points)
        with col2:
            st.metric("–í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑", included_count)
        with col3:
            st.metric("–ò—Å–∫–ª—é—á–µ–Ω–æ", excluded_count)
        
        if excluded_count > 0:
            st.info(f"–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏: {sorted(st.session_state.excluded_points)}")
            
            if st.button("üîÑ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏", key="include_all"):
                st.session_state.excluded_points = set()
                st.session_state.analyzer = None
                st.session_state.validation_results = None
                st.rerun()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        st.header("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        
        if st.session_state.current_data is not None and 'G' in st.session_state.current_data.columns:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–µ—Ä–Ω–∞—Ö –≤ –¥–∞–Ω–Ω—ã—Ö
            unique_grain_numbers = sorted(st.session_state.current_data['G'].unique())
            
            st.subheader("üìê –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–µ—Ä–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            cols = st.columns(min(5, len(unique_grain_numbers)))
            
            for i, grain_num in enumerate(unique_grain_numbers):
                with cols[i % 5]:
                    diameter = GrainSizeConverter.grain_number_to_diameter(grain_num)
                    boundary_density = GrainSizeConverter.calculate_grain_boundary_density(grain_num)
                    activation_factor = GrainSizeConverter.calculate_activation_energy_factor(grain_num)
                    
                    st.metric(
                        f"G = {grain_num}",
                        f"{diameter*1000:.1f} –º–∫–º",
                        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {boundary_density:.0f} –º–º¬≤/–º–º¬≥"
                    )
                    st.caption(f"–ö–æ—ç—Ñ. –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_factor:.3f}")
        
        # –ü–æ–¥–±–æ—Ä –º–æ–¥–µ–ª–∏
        st.header("üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏)
        analysis_data = st.session_state.current_data.copy()
        if st.session_state.excluded_points:
            analysis_data = analysis_data.drop(list(st.session_state.excluded_points)).reset_index(drop=True)
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", use_container_width=True):
            if analysis_data is not None and all(col in analysis_data.columns for col in ['G', 'T', 't', 'f_exp (%)']):
                analyzer = AdvancedSigmaPhaseAnalyzer()
                
                with st.spinner("–ü–æ–¥–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏..."):
                    success = analyzer.fit_ensemble_model(analysis_data)
                
                if success:
                    st.session_state.analyzer = analyzer
                    validation_results = analyzer.calculate_validation_metrics(analysis_data)
                    st.session_state.validation_results = validation_results
                    
                    st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! R¬≤ = {analyzer.R2:.4f}")
                    st.rerun()
            else:
                st.error("‚ùå –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–æ–ª–æ–Ω–∫–∏: G, T, t, f_exp (%)")
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
        if st.session_state.analyzer is not None:
            analyzer = st.session_state.analyzer
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            st.subheader("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
            
            if analyzer.params is not None:
                f_max, K0, Q, n, alpha, w, beta = analyzer.params
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("f_max", f"{f_max:.3f}%")
                    st.metric("K‚ÇÄ", f"{K0:.2e}")
                with col2:
                    st.metric("Q", f"{Q/1000:.1f} –∫–î–∂/–º–æ–ª—å")
                    st.metric("n", f"{n:.3f}")
                with col3:
                    st.metric("Œ±", f"{alpha:.3f}")
                    st.metric("w", f"{w:.3f}")
                
                st.metric("Œ≤", f"{beta:.0f}")
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("R¬≤", f"{analyzer.R2:.4f}")
                with col2:
                    st.metric("RMSE", f"{analyzer.rmse:.2f}%")

    # –í–ö–õ–ê–î–ö–ê 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    with tab2:
        st.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
        
        if st.session_state.analyzer is not None:
            analyzer = st.session_state.analyzer
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                G_input = st.number_input("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ (G)", 
                                        min_value=-3.0, max_value=14.0, 
                                        value=8.0, step=0.1)
            with col2:
                sigma_input = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã f_exp (%)", 
                                            min_value=0.0, max_value=50.0,
                                            value=2.0, step=0.1,
                                            format="%.3f")
            with col3:
                t_input = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ t (—á)", 
                                        min_value=100, max_value=500000,
                                        value=4000, step=1000)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if t_input > 100000:
                st.info("üîç –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (—Å–≤—ã—à–µ 100000 —á–∞—Å–æ–≤)")
            
            if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", key="calc_temp"):
                try:
                    T_celsius = analyzer.predict_temperature(G_input, sigma_input, t_input)
                    
                    if T_celsius is not None:
                        st.success(f"""
                        ### –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:
                        - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:** {T_celsius:.1f}¬∞C
                        - –ü—Ä–∏ –Ω–æ–º–µ—Ä–µ –∑–µ—Ä–Ω–∞: {G_input}
                        - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã: {sigma_input:.3f}%
                        - –ù–∞—Ä–∞–±–æ—Ç–∫–µ: {t_input} —á
                        """)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω
                        if t_input > 200000:
                            st.info("üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–∞—Å—á–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–≤—ã—à–µ 200000 —á–∞—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")
        else:
            st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–î–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å'")

    # –í–ö–õ–ê–î–ö–ê 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    with tab3:
        st.header("üìà –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
        
        if st.session_state.analyzer is not None and st.session_state.validation_results is not None:
            analyzer = st.session_state.analyzer
            validation = st.session_state.validation_results
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
            metrics = validation['metrics']
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("R¬≤", f"{metrics['R2']:.4f}")
                st.metric("MAE", f"{metrics['MAE']:.3f}%")
            with col2:
                st.metric("RMSE", f"{metrics['RMSE']:.3f}%")
            with col3:
                st.metric("MAPE", f"{metrics['MAPE']:.2f}%")
            with col4:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", f"{len(validation['data'])}")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if metrics['MAPE'] < 15:
                st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏!")
            elif metrics['MAPE'] < 25:
                st.warning("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏")
            else:
                st.error("‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            st.subheader("üßÆ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –º–æ–¥–µ–ª–∏")
            st.markdown(analyzer.final_formula)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.subheader("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            
            comparison_df = validation['data'].copy()
            comparison_df['f_pred (%)'] = validation['predictions']
            comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'] = validation['residuals']
            comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'] = validation['relative_errors']
            comparison_df['f_pred (%)'] = comparison_df['f_pred (%)'].round(3)
            comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'] = comparison_df['–ê–±—Å. –æ—à–∏–±–∫–∞ (%)'].round(3)
            comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'] = comparison_df['–û—Ç–Ω. –æ—à–∏–±–∫–∞ (%)'].round(1)
            
            st.dataframe(comparison_df, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                fig1 = go.Figure()
                
                fig1.add_trace(go.Scatter(
                    x=validation['data']['f_exp (%)'],
                    y=validation['predictions'],
                    mode='markers',
                    name='–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
                    marker=dict(size=8, color='blue', opacity=0.6)
                ))
                
                # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                max_val = max(validation['data']['f_exp (%)'].max(), validation['predictions'].max())
                fig1.add_trace(go.Scatter(
                    x=[0, max_val],
                    y=[0, max_val],
                    mode='lines',
                    name='–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ',
                    line=dict(color='red', dash='dash')
                ))
                
                fig1.update_layout(
                    title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ vs –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç',
                    xaxis_title='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ f_exp (%)',
                    yaxis_title='–†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ f_pred (%)',
                    showlegend=True
                )
                
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
                fig2 = go.Figure()
                
                fig2.add_trace(go.Scatter(
                    x=validation['predictions'],
                    y=validation['residuals'],
                    mode='markers',
                    name='–û—Å—Ç–∞—Ç–∫–∏',
                    marker=dict(size=8, color='green', opacity=0.6)
                ))
                
                # –ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è
                fig2.add_trace(go.Scatter(
                    x=[validation['predictions'].min(), validation['predictions'].max()],
                    y=[0, 0],
                    mode='lines',
                    name='–ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è',
                    line=dict(color='red', dash='dash')
                ))
                
                fig2.update_layout(
                    title='–û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏',
                    xaxis_title='–†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ f_pred (%)',
                    yaxis_title='–û—Å—Ç–∞—Ç–æ–∫ (f_pred - f_exp) (%)',
                    showlegend=True
                )
                
                st.plotly_chart(fig2, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
            st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫")
            
            abs_errors = np.abs(validation['residuals'])
            rel_errors = np.abs(validation['relative_errors'])
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ú–∞–∫—Å. –∞–±—Å. –æ—à–∏–±–∫–∞", f"{abs_errors.max():.3f}%")
            with col2:
                st.metric("–ú–∞–∫—Å. –æ—Ç–Ω. –æ—à–∏–±–∫–∞", f"{rel_errors.max():.2f}%")
            with col3:
                st.metric("–°—Ä–µ–¥–Ω—è—è –∞–±—Å. –æ—à–∏–±–∫–∞", f"{abs_errors.mean():.3f}%")
            with col4:
                st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ç–Ω. –æ—à–∏–±–∫–∞", f"{rel_errors.mean():.2f}%")
                
        else:
            st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–î–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å'")

if __name__ == "__main__":
    main()
