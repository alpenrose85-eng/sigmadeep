import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ œÉ-—Ñ–∞–∑—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º")
st.markdown("""
**–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏:**
- –ú–æ–¥–µ–ª–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –£—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è (550¬∞C)
- –£—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è œÉ-—Ñ–∞–∑—ã (900¬∞C)
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
- –ê—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
col1, col2, col3, col4 = st.columns(4)
with col1:
    initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                     value=0.1, min_value=0.0, step=0.1,
                                     help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.1-0.5 –º–∫–º)")
with col2:
    enable_phase_analysis = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (JMAK)", 
                                      value=True, 
                                      help="–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ñ–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é œÉ-—Ñ–∞–∑—ã")
with col3:
    min_temperature = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è (¬∞C)", 
                                    value=550.0, min_value=0.0, step=10.0,
                                    help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")
with col4:
    dissolution_temperature = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è œÉ-—Ñ–∞–∑—ã (¬∞C)", 
                                           value=900.0, min_value=0.0, step=10.0,
                                           help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–π œÉ-—Ñ–∞–∑–∞ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è")

target_grain = 9

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
if 'calc_type' not in st.session_state:
    st.session_state.calc_type = "–ü—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–º–µ—Ç—Ä–∞/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"
if 'target_time' not in st.session_state:
    st.session_state.target_time = 100.0
if 'target_temp' not in st.session_state:
    st.session_state.target_temp = 800.0
if 'calc_mode' not in st.session_state:
    st.session_state.calc_mode = "–î–∏–∞–º–µ—Ç—Ä"
if 'target_time_temp' not in st.session_state:
    st.session_state.target_time_temp = 100.0
if 'target_value' not in st.session_state:
    st.session_state.target_value = 2.0
if 'temp_mode' not in st.session_state:
    st.session_state.temp_mode = "–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
def calculate_comprehensive_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    if len(y_true) == 0 or len(y_pred) == 0:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}
    
    min_len = min(len(y_true), len(y_pred))
    y_true = y_true[:min_len]
    y_pred = y_pred[:min_len]
    
    try:
        metrics = {
            'R¬≤': r2_score(y_true, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_true, y_pred)),
            'MAE': mean_absolute_error(y_true, y_pred),
            'MAPE': np.mean(np.abs((y_true - y_pred) / np.where(y_true != 0, y_true, 1e-10))) * 100
        }
        return metrics
    except:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}

def safe_plot_with_diagnostics(ax, t_exp, y_exp, y_pred, t_range=None, y_range=None, 
                              title="", xlabel="–í—Ä–µ–º—è (—á–∞—Å—ã)", ylabel="", 
                              model_name="–ú–æ–¥–µ–ª—å"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        ax.clear()
        
        if len(t_exp) == 0 or len(y_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        valid_mask = ~np.isnan(t_exp) & ~np.isnan(y_exp) & ~np.isnan(y_pred)
        t_exp = t_exp[valid_mask]
        y_exp = y_exp[valid_mask]
        y_pred = y_pred[valid_mask]
        
        if len(t_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        ax.scatter(t_exp, y_exp, alpha=0.8, s=60, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
        
        if t_range is not None and y_range is not None and len(t_range) > 0 and len(y_range) > 0:
            if ylabel == '–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)':
                valid_range_mask = y_range > 0
                if np.any(valid_range_mask):
                    ax.plot(t_range[valid_range_mask], y_range[valid_range_mask], 'r--', 
                           linewidth=2, label=model_name)
            else:
                ax.plot(t_range, y_range, 'r--', linewidth=2, label=model_name)
        
        sorted_idx = np.argsort(t_exp)
        ax.plot(t_exp.iloc[sorted_idx] if hasattr(t_exp, 'iloc') else t_exp[sorted_idx], 
               y_exp.iloc[sorted_idx] if hasattr(y_exp, 'iloc') else y_exp[sorted_idx], 
               'b:', alpha=0.5, label='–¢—Ä–µ–Ω–¥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
        
        for i in range(min(len(t_exp), len(y_exp), len(y_pred))):
            t_val = t_exp.iloc[i] if hasattr(t_exp, 'iloc') else t_exp[i]
            y_true = y_exp.iloc[i] if hasattr(y_exp, 'iloc') else y_exp[i]
            y_pred_val = y_pred.iloc[i] if hasattr(y_pred, 'iloc') else y_pred[i]
            ax.plot([t_val, t_val], [y_true, y_pred_val], 'gray', alpha=0.3, linewidth=1)
        
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        metrics = calculate_comprehensive_metrics(y_exp, y_pred)
        ax.text(0.02, 0.98, f"R¬≤ = {metrics['R¬≤']:.3f}\nRMSE = {metrics['RMSE']:.2f}", 
                transform=ax.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
                
    except Exception as e:
        ax.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è:\n{str(e)[:50]}...', 
                transform=ax.transAxes, ha='center', va='center', fontsize=8)
        ax.set_title(title)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è JMAK-–∞–Ω–∞–ª–∏–∑–∞
def jmak_model(t, k, n):
    """JMAK –º–æ–¥–µ–ª—å: X(t) = 1 - exp(-(k*t)^n)"""
    return 1 - np.exp(-(k * t) ** n)

def fit_jmak_model(time, f_phase, initial_n=1.0):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JMAK –º–æ–¥–µ–ª–∏"""
    f_normalized = np.array(f_phase) / 100.0
    
    valid_mask = ~np.isnan(time) & ~np.isnan(f_normalized) & (f_normalized >= 0) & (f_normalized <= 1)
    time_valid = time[valid_mask]
    f_valid = f_normalized[valid_mask]
    
    if len(time_valid) < 2:
        return None, None, None
    
    try:
        k_guess = 1.0 / np.mean(time_valid) if np.mean(time_valid) > 0 else 0.1
        
        popt, pcov = curve_fit(jmak_model, time_valid, f_valid, 
                              p0=[k_guess, initial_n],
                              bounds=([1e-6, 0.1], [10, 4]),
                              maxfev=5000)
        
        k_fit, n_fit = popt
        return k_fit, n_fit, pcov
    
    except Exception as e:
        return None, None, None

def calculate_jmak_predictions(time, k, n):
    """–†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π JMAK –º–æ–¥–µ–ª–∏"""
    return jmak_model(time, k, n) * 100

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò
def arrhenius_model(T, A, Ea):
    """–ê—Ä—Ä–µ–Ω–∏—É—Å–æ–≤—Å–∫–∞—è –º–æ–¥–µ–ª—å: k = A * exp(-Ea/(R*T))"""
    return A * np.exp(-Ea / (R * T))

def effective_rate_constant_single(T, A, Ea, T_min, T_diss):
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    T_kelvin = T + 273.15
    T_min_kelvin = T_min + 273.15
    T_diss_kelvin = T_diss + 273.15
    
    if T_kelvin <= T_min_kelvin:
        return 0.0
    elif T_kelvin >= T_diss_kelvin:
        return 0.0
    else:
        return arrhenius_model(T_kelvin, A, Ea)

def effective_rate_constant_array(T_array, A, Ea, T_min, T_diss):
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä"""
    T_kelvin = T_array + 273.15
    T_min_kelvin = T_min + 273.15
    T_diss_kelvin = T_diss + 273.15
    
    k_eff = np.zeros_like(T_kelvin)
    valid_mask = (T_kelvin > T_min_kelvin) & (T_kelvin < T_diss_kelvin)
    k_eff[valid_mask] = arrhenius_model(T_kelvin[valid_mask], A, Ea)
    
    return k_eff

def universal_diameter_model_single(t, T, A, Ea, n, d0, T_min, T_diss):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    k_eff = effective_rate_constant_single(T, A, Ea, T_min, T_diss)
    return (k_eff * t + d0**n)**(1/n)

def universal_diameter_model_array(t_array, T_array, A, Ea, n, d0, T_min, T_diss):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤"""
    k_eff = effective_rate_constant_array(T_array, A, Ea, T_min, T_diss)
    return (k_eff * t_array + d0**n)**(1/n)

def universal_phase_model_single(t, T, A, Ea, n_jmak, T_min, T_diss):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    k_eff = effective_rate_constant_single(T, A, Ea, T_min, T_diss)
    return jmak_model(t, k_eff, n_jmak) * 100

def universal_phase_model_array(t_array, T_array, A, Ea, n_jmak, T_min, T_diss):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤"""
    k_eff = effective_rate_constant_array(T_array, A, Ea, T_min, T_diss)
    f_normalized = jmak_model(t_array, k_eff, n_jmak)
    return f_normalized * 100

def fit_universal_diameter_model(df, best_n, d0, T_min, T_diss):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞"""
    try:
        df_filtered = df[(df['T'] >= T_min) & (df['T'] <= T_diss)].copy()
        
        if len(df_filtered) < 3:
            st.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({len(df_filtered)} —Ç–æ—á–µ–∫)")
            return None, None
        
        t_all = df_filtered['t'].values
        T_all = df_filtered['T'].values
        d_all = df_filtered['d'].values
        
        A_guess = 0.1
        Ea_guess = 150000
        
        def model_function(params, t_data, T_data):
            A, Ea = params
            return universal_diameter_model_array(t_data, T_data, A, Ea, best_n, d0, T_min, T_diss)
        
        popt, pcov = curve_fit(
            lambda x, A, Ea: model_function([A, Ea], x[0], x[1]),
            [t_all, T_all], d_all,
            p0=[A_guess, Ea_guess],
            bounds=([1e-10, 50000], [1e5, 500000]),
            maxfev=10000
        )
        
        return popt, pcov
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞: {str(e)}")
        return None, None

def fit_universal_phase_model(df, T_min, T_diss):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã"""
    try:
        df_filtered = df[(df['T'] >= T_min) & (df['T'] <= T_diss)].copy()
        
        if len(df_filtered) < 3:
            st.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è JMAK ({len(df_filtered)} —Ç–æ—á–µ–∫)")
            return None, None
        
        t_all = df_filtered['t'].values
        T_all = df_filtered['T'].values
        f_all = df_filtered['f'].values
        
        A_guess = 0.1
        Ea_guess = 150000
        n_guess = 1.5
        
        def model_function(params, t_data, T_data):
            A, Ea, n = params
            return universal_phase_model_array(t_data, T_data, A, Ea, n, T_min, T_diss)
        
        popt, pcov = curve_fit(
            lambda x, A, Ea, n: model_function([A, Ea, n], x[0], x[1]),
            [t_all, T_all], f_all,
            p0=[A_guess, Ea_guess, n_guess],
            bounds=([1e-10, 50000, 0.5], [1e5, 500000, 4.0]),
            maxfev=10000
        )
        
        return popt, pcov
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã: {str(e)}")
        return None, None

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd', 'f']
        
        if all(col in df.columns for col in required_cols):
            df_grain10 = df[df['G'] == target_grain].copy()
            
            if len(df_grain10) > 0:
                st.session_state['grain10_data'] = df_grain10
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
                min_temp_in_data = df_grain10['T'].min()
                max_temp_in_data = df_grain10['T'].max()
                
                temp_warnings = []
                if min_temp_in_data < min_temperature:
                    temp_warnings.append(f"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({min_temp_in_data}¬∞C < {min_temperature}¬∞C)")
                if max_temp_in_data > dissolution_temperature:
                    temp_warnings.append(f"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤—ã—à–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è ({max_temp_in_data}¬∞C > {dissolution_temperature}¬∞C)")
                
                if temp_warnings:
                    for warning in temp_warnings:
                        st.warning(warning)
                    st.info("–¢–æ—á–∫–∏ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")
                
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10:")
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    unique_temps = df_grain10['T'].unique()
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                with col2:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", f"{len(df_grain10)}")
                with col3:
                    st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{df_grain10['t'].min()}-{df_grain10['t'].max()} —á")
                with col4:
                    st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", f"{df_grain10['f'].min():.1f}-{df_grain10['f'].max():.1f}%")
                
                st.dataframe(df_grain10.head(10))
                
            else:
                st.error(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'grain10_data' in st.session_state:
    df_grain10 = st.session_state['grain10_data']
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df_grain10_clean = df_grain10[(df_grain10['d'] > 0) & (df_grain10['f'] >= 0) & (df_grain10['f'] <= 100)].copy()
    
    if len(df_grain10_clean) < len(df_grain10):
        st.warning(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {len(df_grain10) - len(df_grain10_clean)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫")
        df_grain10 = df_grain10_clean
    
    df_grain10['T_K'] = df_grain10['T'] + 273.15
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤
    st.header("2. üìè –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ œÉ-—Ñ–∞–∑—ã")
    
    with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤"):
        st.markdown("""
        **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:** –†–æ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞ —á–∞—Å—Ç–∏—Ü œÉ-—Ñ–∞–∑—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        
        **–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:** 
        $$ d^n - d_0^n = K \\cdot t $$
        
        **–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:**
        - –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º n –≥—Ä–∞—Ñ–∏–∫ $d^n - d_0^n$ vs t –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–Ω–µ–π–Ω—ã–º
        - –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ R¬≤ –±–ª–∏–∑–∫–æ–º—É –∫ 1
        - –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ (–±–µ–∑ —Ç—Ä–µ–Ω–¥–∞)
        
        **–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
        - R¬≤ > 0.95 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
        - R¬≤ 0.90-0.95 - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ  
        - R¬≤ < 0.90 - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """)
    
    # –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.subheader("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n")
    
    n_min, n_max, n_step = 3.0, 5.0, 0.1
    n_candidates = np.arange(n_min, n_max + n_step, n_step)
    
    n_results = {}
    available_temperatures = set()
    
    for n in n_candidates:
        k_values = []
        
        for temp in df_grain10['T'].unique():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if temp < min_temperature or temp > dissolution_temperature:
                continue
                
            temp_data = df_grain10[df_grain10['T'] == temp]
            
            if len(temp_data) >= 2:
                d_transformed = temp_data['d']**n - initial_diameter**n
                
                if (d_transformed < 0).any():
                    continue
                
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        temp_data['t'], d_transformed
                    )
                    
                    if slope > 0:
                        d_pred_transformed = slope * temp_data['t'] + intercept
                        d_pred = (d_pred_transformed + initial_diameter**n)**(1/n)
                        
                        if (d_pred > 0).all():
                            metrics = calculate_comprehensive_metrics(temp_data['d'].values, d_pred)
                            
                            k_values.append({
                                'T': temp, 'T_K': temp + 273.15, 'K': slope,
                                'R2': r_value**2, 'std_err': std_err,
                                'n_points': len(temp_data), 'metrics': metrics
                            })
                            available_temperatures.add(temp)
                except:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            overall_r2 = k_df['R2'].mean()
            n_results[n] = {
                'k_df': k_df, 'mean_R2': overall_r2,
                'min_R2': k_df['R2'].min(), 'n_temperatures': len(k_df)
            }
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–±–æ—Ä–∞ n
    if n_results:
        comparison_data = []
        for n, results in n_results.items():
            comparison_data.append({
                'n': n, '–°—Ä–µ–¥–Ω–∏–π R¬≤': results['mean_R2'],
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': results['min_R2'], 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        
        if len(comparison_df) > 0:
            best_n_row = comparison_df.loc[comparison_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
            best_n = best_n_row['n']
            
            st.success(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: n = {best_n:.1f} (R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.3f})")
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–î–ë–û–†–ê –î–õ–Ø –õ–£–ß–®–ï–ì–û n
            st.subheader(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è n = {best_n:.1f}")
            
            best_k_df = n_results[best_n]['k_df']
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –¥–∞–Ω–Ω—ã–º–∏
            temps_with_data = sorted(available_temperatures)
            
            if len(temps_with_data) > 0:
                n_cols = min(2, len(temps_with_data))
                n_rows = (len(temps_with_data) + n_cols - 1) // n_cols
                
                fig, axes = plt.subplots(n_rows, n_cols, figsize=(5*n_cols, 4*n_rows))
                
                # –î–µ–ª–∞–µ–º axes –≤—Å–µ–≥–¥–∞ –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if n_rows == 1 and n_cols == 1:
                    axes = np.array([[axes]])
                elif n_rows == 1:
                    axes = np.array([axes])
                elif n_cols == 1:
                    axes = axes.reshape(-1, 1)
                
                for idx, temp in enumerate(temps_with_data):
                    if idx < n_rows * n_cols:
                        row = idx // n_cols
                        col = idx % n_cols
                        
                        ax = axes[row, col]
                        temp_data = df_grain10[df_grain10['T'] == temp]
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ k_value
                        temp_k_data = best_k_df[best_k_df['T'] == temp]
                        if len(temp_k_data) > 0:
                            k_value = temp_k_data['K'].iloc[0]
                            
                            # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                            t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max() * 1.2, 100)
                            d_pred_range = (k_value * t_range + initial_diameter**best_n)**(1/best_n)
                            
                            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                            d_pred_range = np.maximum(d_pred_range, 0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä 0.1 –º–∫–º
                            
                            d_pred_points = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
                            d_pred_points = np.maximum(d_pred_points, 0.1)
                            
                            safe_plot_with_diagnostics(
                                ax, temp_data['t'].values, temp_data['d'].values, d_pred_points,
                                t_range, d_pred_range, 
                                title=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C',
                                ylabel='–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)',
                                model_name=f'–ú–æ–¥–µ–ª—å (n={best_n:.1f})'
                            )
                        else:
                            ax.text(0.5, 0.5, f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {temp}¬∞C', 
                                   transform=ax.transAxes, ha='center', va='center')
                            ax.set_title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C')
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
                for idx in range(len(temps_with_data), n_rows * n_cols):
                    row = idx // n_cols
                    col = idx % n_cols
                    axes[row, col].set_visible(False)
                
                plt.tight_layout()
                st.pyplot(fig)
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
                
                with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π"):
                    st.markdown("""
                    **–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (Residuals Plot):**
                    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    - **–ò–¥–µ–∞–ª—å–Ω–æ:** —Ç–æ—á–∫–∏ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –≤–æ–∫—Ä—É–≥ –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏
                    - **–ü—Ä–æ–±–ª–µ–º–∞:** –≤–∏–¥–∏–º—ã–π —Ç—Ä–µ–Ω–¥ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö
                    
                    **–ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ:**
                    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    - **–ò–¥–µ–∞–ª—å–Ω–æ:** —Ç–æ—á–∫–∏ –±–ª–∏–∑–∫–æ –∫ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
                    - –¶–≤–µ—Ç —Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                    """)
                
                all_actual = []
                all_predicted = []
                all_temperatures = []
                
                for temp in temps_with_data:
                    temp_data = df_grain10[df_grain10['T'] == temp]
                    temp_k_data = best_k_df[best_k_df['T'] == temp]
                    
                    if len(temp_k_data) > 0:
                        k_value = temp_k_data['K'].iloc[0]
                        d_pred = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
                        d_pred = np.maximum(d_pred, 0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        
                        all_actual.extend(temp_data['d'].values)
                        all_predicted.extend(d_pred)
                        all_temperatures.extend([temp] * len(temp_data))
                
                if len(all_actual) > 0:
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                    
                    residuals = np.array(all_actual) - np.array(all_predicted)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    ax1.scatter(all_predicted, residuals, alpha=0.7)
                    ax1.axhline(0, color='red', linestyle='--', label='–ù—É–ª–µ–≤–∞—è –æ—à–∏–±–∫–∞')
                    ax1.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ (–º–∫–º)')
                    ax1.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏ = –§–∞–∫—Ç - –ü—Ä–æ–≥–Ω–æ–∑ (–º–∫–º)')
                    ax1.set_title('–û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤\n(—á–µ–º –±–ª–∏–∂–µ –∫ –Ω—É–ª—é - —Ç–µ–º –ª—É—á—à–µ)')
                    ax1.legend()
                    ax1.grid(True, alpha=0.3)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    scatter = ax2.scatter(all_actual, all_predicted, alpha=0.7, 
                                        c=all_temperatures, cmap='viridis', s=60)
                    min_val = min(min(all_actual), min(all_predicted))
                    max_val = max(max(all_actual), max(all_predicted))
                    ax2.plot([min_val, max_val], [min_val, max_val], 'r--', 
                            linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ')
                    ax2.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    ax2.set_title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n(—á–µ–º –±–ª–∏–∂–µ –∫ –ª–∏–Ω–∏–∏ - —Ç–µ–º –ª—É—á—à–µ)')
                    ax2.legend()
                    ax2.grid(True, alpha=0.3)
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                    cbar = plt.colorbar(scatter, ax=ax2)
                    cbar.set_label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
                    
                    plt.tight_layout()
                    st.pyplot(fig)
                    
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    overall_metrics = calculate_comprehensive_metrics(np.array(all_actual), np.array(all_predicted))
                    st.info(f"""
                    **üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤:**
                    - **R¬≤ = {overall_metrics['R¬≤']:.3f}** - –¥–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                    - **RMSE = {overall_metrics['RMSE']:.2f} –º–∫–º** - —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    - **MAE = {overall_metrics['MAE']:.2f} –º–∫–º** - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                    - **MAPE = {overall_metrics['MAPE']:.1f}%** - —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                    
                    **üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:**
                    { '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.95 else 
                      'üü° –•–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.85 else 
                      'üü† –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.7 else 
                      'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'}
                    """)

    # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –° –£–ß–ï–¢–û–ú –û–ë–û–ò–• –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
    st.header("3. üî¨ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
    
    st.info(f"""
    **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
    - **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è:** {min_temperature}¬∞C
    - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è œÉ-—Ñ–∞–∑—ã:** {dissolution_temperature}¬∞C
    - **–†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω:** {min_temperature}¬∞C - {dissolution_temperature}¬∞C
    """)
    
    if best_n is not None:
        # –ü–æ–¥–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ –¥–∏–∞–º–µ—Ç—Ä–∞")
        
        with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"):
            st.markdown(f"""
            **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞:**
            $$ d(t,T) = \\left[ k_{{eff}}(T) \\cdot t + d_0^n \\right]^{{1/n}} $$
            
            $$ k_{{eff}}(T) = \\begin{{cases}}
            0 & \\text{{–µ—Å–ª–∏ }} T < {min_temperature}¬∞C \\\\
            A \\cdot \\exp\\left(-\\frac{{E_a}}{{RT}}\\right) & \\text{{–µ—Å–ª–∏ }} {min_temperature}¬∞C \\leq T \\leq {dissolution_temperature}¬∞C \\\\
            0 & \\text{{–µ—Å–ª–∏ }} T > {dissolution_temperature}¬∞C
            \\end{{cases}} $$
            
            **–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:**
            - –ü—Ä–∏ T < {min_temperature}¬∞C: –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
            - –ü—Ä–∏ {min_temperature}¬∞C ‚â§ T ‚â§ {dissolution_temperature}¬∞C: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–æ —Å—Ç–µ–ø–µ–Ω–Ω–æ–º—É –∑–∞–∫–æ–Ω—É
            - –ü—Ä–∏ T > {dissolution_temperature}¬∞C: œÉ-—Ñ–∞–∑–∞ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è
            """)
        
        # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        universal_diameter_params, universal_diameter_cov = fit_universal_diameter_model(
            df_grain10, best_n, initial_diameter, min_temperature, dissolution_temperature
        )
        
        if universal_diameter_params is not None:
            A_diam, Ea_diam = universal_diameter_params
            
            st.success("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–∞!")
            st.info(f"""
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞:**
            - –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å A = {A_diam:.4e}
            - –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Ea = {Ea_diam:.0f} –î–∂/–º–æ–ª—å ({Ea_diam/1000:.1f} –∫–î–∂/–º–æ–ª—å)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ n = {best_n:.1f}
            - –ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ = {initial_diameter} –º–∫–º
            - –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_temperature}¬∞C - {dissolution_temperature}¬∞C
            """)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞")
            
            fig, axes = plt.subplots(1, 2, figsize=(15, 6))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_predictions_diam = []
            all_actual_diam = []
            
            for temp in df_grain10['T'].unique():
                temp_data = df_grain10[df_grain10['T'] == temp]
                t_temp = temp_data['t'].values
                T_temp = np.array([temp] * len(t_temp))
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                d_pred_universal = universal_diameter_model_array(
                    t_temp, T_temp, A_diam, Ea_diam, best_n, initial_diameter, 
                    min_temperature, dissolution_temperature
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –º–∞—Ä–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã
                if temp < min_temperature:
                    color, marker, label_suffix = 'red', 'x', ' (–Ω–∏–∂–µ T_min)'
                elif temp > dissolution_temperature:
                    color, marker, label_suffix = 'orange', '^', ' (–≤—ã—à–µ T_diss)'
                else:
                    color, marker, label_suffix = 'blue', 'o', ''
                
                axes[0].scatter(temp_data['t'], temp_data['d'], alpha=0.7, 
                               color=color, marker=marker, s=50,
                               label=f'{temp}¬∞C{label_suffix}')
                
                # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if min_temperature <= temp <= dissolution_temperature:
                    axes[0].plot(temp_data['t'], d_pred_universal, '--', 
                                color=color, linewidth=2)
                
                all_predictions_diam.extend(d_pred_universal)
                all_actual_diam.extend(temp_data['d'].values)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
            axes[0].axhline(initial_diameter, color='gray', linestyle=':', alpha=0.7, label=f'–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä {initial_diameter} –º–∫–º')
            axes[0].set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
            axes[0].set_ylabel('–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)')
            axes[0].set_title(f'–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–º–µ—Ç—Ä–∞\nT_min = {min_temperature}¬∞C, T_diss = {dissolution_temperature}¬∞C')
            axes[0].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            axes[0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            valid_mask = np.array([min_temperature <= T <= dissolution_temperature for T in df_grain10['T'].values])
            if len(valid_mask) > 0:
                valid_actual = np.array(all_actual_diam)[valid_mask[:len(all_actual_diam)]]
                valid_predictions = np.array(all_predictions_diam)[valid_mask[:len(all_predictions_diam)]]
                
                if len(valid_actual) > 0:
                    axes[1].scatter(valid_actual, valid_predictions, alpha=0.6, color='blue')
                    min_val = min(min(valid_actual), min(valid_predictions))
                    max_val = max(max(valid_actual), max(valid_predictions))
                    axes[1].plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2)
                    axes[1].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    axes[1].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    axes[1].set_title('–ö–∞—á–µ—Å—Ç–≤–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞\n(—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)')
                    axes[1].grid(True, alpha=0.3)
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä)
                    metrics_universal_diam = calculate_comprehensive_metrics(valid_actual, valid_predictions)
                    axes[1].text(0.05, 0.95, f"R¬≤ = {metrics_universal_diam['R¬≤']:.3f}\nRMSE = {metrics_universal_diam['RMSE']:.2f}", 
                                transform=axes[1].transAxes, verticalalignment='top',
                                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.tight_layout()
            st.pyplot(fig)
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–∞")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã
    if enable_phase_analysis:
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (JMAK)")
        
        universal_phase_params, universal_phase_cov = fit_universal_phase_model(
            df_grain10, min_temperature, dissolution_temperature
        )
        
        if universal_phase_params is not None:
            A_phase, Ea_phase, n_phase = universal_phase_params
            
            st.success("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–∞!")
            st.info(f"""
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã:**
            - –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å A = {A_phase:.4e}
            - –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Ea = {Ea_phase:.0f} –î–∂/–º–æ–ª—å ({Ea_phase/1000:.1f} –∫–î–∂/–º–æ–ª—å)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ê–≤—Ä–∞–º–∏ n = {n_phase:.2f}
            - –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_temperature}¬∞C - {dissolution_temperature}¬∞C
            """)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã
            fig, axes = plt.subplots(1, 2, figsize=(15, 6))
            
            all_predictions_phase = []
            all_actual_phase = []
            
            for temp in df_grain10['T'].unique():
                temp_data = df_grain10[df_grain10['T'] == temp]
                if len(temp_data) >= 2:
                    t_temp = temp_data['t'].values
                    T_temp = np.array([temp] * len(t_temp))
                    
                    f_pred_universal = universal_phase_model_array(
                        t_temp, T_temp, A_phase, Ea_phase, n_phase, 
                        min_temperature, dissolution_temperature
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –º–∞—Ä–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã
                    if temp < min_temperature:
                        color, marker, label_suffix = 'red', 'x', ' (–Ω–∏–∂–µ T_min)'
                    elif temp > dissolution_temperature:
                        color, marker, label_suffix = 'orange', '^', ' (–≤—ã—à–µ T_diss)'
                    else:
                        color, marker, label_suffix = 'blue', 'o', ''
                    
                    axes[0].scatter(temp_data['t'], temp_data['f'], alpha=0.7, 
                                   color=color, marker=marker, s=50,
                                   label=f'{temp}¬∞C{label_suffix}')
                    
                    # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    if min_temperature <= temp <= dissolution_temperature:
                        axes[0].plot(temp_data['t'], f_pred_universal, '--', 
                                    color=color, linewidth=2)
                    
                    all_predictions_phase.extend(f_pred_universal)
                    all_actual_phase.extend(temp_data['f'].values)
            
            axes[0].set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
            axes[0].set_ylabel('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
            axes[0].set_title(f'–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã\nT_min = {min_temperature}¬∞C, T_diss = {dissolution_temperature}¬∞C')
            axes[0].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            axes[0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            valid_mask_phase = np.array([min_temperature <= T <= dissolution_temperature for T in df_grain10['T'].values])
            if len(valid_mask_phase) > 0:
                valid_actual_phase = np.array(all_actual_phase)[valid_mask_phase[:len(all_actual_phase)]]
                valid_predictions_phase = np.array(all_predictions_phase)[valid_mask_phase[:len(all_predictions_phase)]]
                
                if len(valid_actual_phase) > 0:
                    axes[1].scatter(valid_actual_phase, valid_predictions_phase, alpha=0.6, color='blue')
                    axes[1].plot([0, 100], [0, 100], 'r--', linewidth=2)
                    axes[1].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
                    axes[1].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
                    axes[1].set_title('–ö–∞—á–µ—Å—Ç–≤–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã\n(—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)')
                    axes[1].grid(True, alpha=0.3)
                    
                    metrics_universal_phase = calculate_comprehensive_metrics(
                        valid_actual_phase, valid_predictions_phase
                    )
                    axes[1].text(0.05, 0.95, f"R¬≤ = {metrics_universal_phase['R¬≤']:.3f}\nRMSE = {metrics_universal_phase['RMSE']:.2f}", 
                                transform=axes[1].transAxes, verticalalignment='top',
                                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.tight_layout()
            st.pyplot(fig)
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–∞–∑—ã")

    # –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø
    st.header("4. üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    calc_type = st.radio("–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞:", 
                        ["–ü—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–º–µ—Ç—Ä–∞/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"],
                        key='calc_type_radio')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    if calc_type != st.session_state.calc_type:
        st.session_state.calc_type = calc_type
    
    if st.session_state.calc_type == "–ü—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–º–µ—Ç—Ä–∞/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è":
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            target_time = st.number_input("–í—Ä–µ–º—è (—á–∞—Å—ã)", 
                                        value=st.session_state.target_time, 
                                        min_value=0.0, step=10.0,
                                        key='target_time_input')
            st.session_state.target_time = target_time
            
        with col2:
            target_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 
                                         value=st.session_state.target_temp,
                                         min_value=0.0, step=10.0,
                                         key='target_temp_input')
            st.session_state.target_temp = target_temp
            
        with col3:
            calc_mode = st.selectbox("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å:", 
                                   ["–î–∏–∞–º–µ—Ç—Ä", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"],
                                   key='calc_mode_select')
            st.session_state.calc_mode = calc_mode
        
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key='calculate_forecast'):
            if target_temp < min_temperature:
                st.warning(f"‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {target_temp}¬∞C –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_temperature}¬∞C")
                st.info(f"**–ü—Ä–∏ {target_temp}¬∞C –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**")
                if calc_mode in ["–î–∏–∞–º–µ—Ç—Ä", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"]:
                    st.success(f"**–î–∏–∞–º–µ—Ç—Ä:** {initial_diameter} –º–∫–º (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")
                if calc_mode in ["–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"]:
                    st.success(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã:** 0%")
            elif target_temp > dissolution_temperature:
                st.warning(f"‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {target_temp}¬∞C –≤—ã—à–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è {dissolution_temperature}¬∞C")
                st.info(f"**–ü—Ä–∏ {target_temp}¬∞C œÉ-—Ñ–∞–∑–∞ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è:**")
                if calc_mode in ["–î–∏–∞–º–µ—Ç—Ä", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"]:
                    st.success(f"**–î–∏–∞–º–µ—Ç—Ä:** {initial_diameter} –º–∫–º (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")
                if calc_mode in ["–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"]:
                    st.success(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã:** 0%")
            else:
                st.success(f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {target_temp}¬∞C –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_temperature}¬∞C - {dissolution_temperature}¬∞C")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                universal_diameter_params = st.session_state.get('universal_diameter_params')
                universal_phase_params = st.session_state.get('universal_phase_params')
                best_n = st.session_state.get('best_n')
                
                if calc_mode in ["–î–∏–∞–º–µ—Ç—Ä", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"] and universal_diameter_params is not None and best_n is not None:
                    A_diam, Ea_diam = universal_diameter_params
                    predicted_diameter = universal_diameter_model_single(
                        target_time, target_temp, A_diam, Ea_diam, best_n, initial_diameter, 
                        min_temperature, dissolution_temperature
                    )
                    st.success(f"**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä:** {predicted_diameter:.2f} –º–∫–º")
                    st.info(f"–†–æ—Å—Ç –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ {initial_diameter} –º–∫–º –¥–æ {predicted_diameter:.2f} –º–∫–º")
                
                if calc_mode in ["–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", "–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"] and universal_phase_params is not None:
                    A_phase, Ea_phase, n_phase = universal_phase_params
                    predicted_phase = universal_phase_model_single(
                        target_time, target_temp, A_phase, Ea_phase, n_phase, 
                        min_temperature, dissolution_temperature
                    )
                    st.success(f"**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã:** {predicted_phase:.1f}%")
                    
                if universal_diameter_params is None and universal_phase_params is None:
                    st.error("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.")
    
    else:  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            target_time_temp = st.number_input("–í—Ä–µ–º—è (—á–∞—Å—ã)", 
                                             value=st.session_state.target_time_temp,
                                             min_value=0.0, step=10.0,
                                             key='target_time_temp_input')
            st.session_state.target_time_temp = target_time_temp
            
        with col2:
            target_value = st.number_input("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", 
                                         value=st.session_state.target_value,
                                         min_value=0.0, step=0.1,
                                         key='target_value_input')
            st.session_state.target_value = target_value
            
        with col3:
            temp_mode = st.selectbox("–¢–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:", 
                                   ["–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)"],
                                   key='temp_mode_select')
            st.session_state.temp_mode = temp_mode
        
        if st.button("–ù–∞–π—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", key='find_temperature'):
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            search_min = max(400, min_temperature)
            search_max = min(1200, dissolution_temperature)
            
            if search_min >= search_max:
                st.error("‚ùå –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ T_min –∏ T_diss.")
            else:
                universal_diameter_params = st.session_state.get('universal_diameter_params')
                universal_phase_params = st.session_state.get('universal_phase_params')
                best_n = st.session_state.get('best_n')
                
                if temp_mode == "–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)" and universal_diameter_params is not None and best_n is not None:
                    A_diam, Ea_diam = universal_diameter_params
                    
                    def equation(T):
                        k = effective_rate_constant_single(T, A_diam, Ea_diam, min_temperature, dissolution_temperature)
                        return (k * target_time_temp + initial_diameter**best_n)**(1/best_n) - target_value
                    
                    # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    T_candidates = np.linspace(search_min, search_max, 1000)
                    differences = [equation(T) for T in T_candidates]
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≥–¥–µ —Ä–∞–∑–Ω–∏—Ü–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –Ω—É–ª—é
                    idx_min = np.argmin(np.abs(differences))
                    optimal_temp = T_candidates[idx_min]
                    
                    if np.abs(differences[idx_min]) < 0.1:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                        st.success(f"**–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {optimal_temp:.1f}¬∞C")
                        st.info(f"–ü—Ä–∏ {optimal_temp:.1f}¬∞C –∑–∞ {target_time_temp} —á–∞—Å–æ–≤ –¥–∏–∞–º–µ—Ç—Ä –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç {target_value} –º–∫–º")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        current_diameter = universal_diameter_model_single(
                            target_time_temp, optimal_temp, A_diam, Ea_diam, best_n, 
                            initial_diameter, min_temperature, dissolution_temperature
                        )
                        st.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä = {current_diameter:.2f} –º–∫–º")
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
                        st.info(f"–ù–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {optimal_temp:.1f}¬∞C")
                
                elif temp_mode == "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)" and universal_phase_params is not None:
                    A_phase, Ea_phase, n_phase = universal_phase_params
                    
                    def equation_phase(T):
                        k = effective_rate_constant_single(T, A_phase, Ea_phase, min_temperature, dissolution_temperature)
                        return jmak_model(target_time_temp, k, n_phase) * 100 - target_value
                    
                    T_candidates = np.linspace(search_min, search_max, 1000)
                    differences = [equation_phase(T) for T in T_candidates]
                    
                    idx_min = np.argmin(np.abs(differences))
                    optimal_temp = T_candidates[idx_min]
                    
                    if np.abs(differences[idx_min]) < 1.0:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1%
                        st.success(f"**–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {optimal_temp:.1f}¬∞C")
                        st.info(f"–ü—Ä–∏ {optimal_temp:.1f}¬∞C –∑–∞ {target_time_temp} —á–∞—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç {target_value}%")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        current_phase = universal_phase_model_single(
                            target_time_temp, optimal_temp, A_phase, Ea_phase, n_phase,
                            min_temperature, dissolution_temperature
                        )
                        st.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞—Å—á–µ—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã = {current_phase:.1f}%")
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
                        st.info(f"–ù–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {optimal_temp:.1f}¬∞C")
                
                else:
                    st.error("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
if 'grain10_data' in st.session_state and 'best_n' in locals():
    st.session_state.best_n = best_n
if 'universal_diameter_params' in locals() and universal_diameter_params is not None:
    st.session_state.universal_diameter_params = universal_diameter_params
if 'universal_phase_params' in locals() and universal_phase_params is not None:
    st.session_state.universal_phase_params = universal_phase_params

st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

st.markdown("""
**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:**

1. **–ü—Ä–æ–≥–Ω–æ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
   - –ó–∞–¥–∞–π—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
   - –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å (–¥–∏–∞–º–µ—Ç—Ä, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–ª–∏ –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
   - –ù–∞–∂–º–∏—Ç–µ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"

2. **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:**
   - –ó–∞–¥–∞–π—Ç–µ –≤—Ä–µ–º—è –∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–∏–∞–º–µ—Ç—Ä –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã)
   - –ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"
   - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–π–¥–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

**–í–∞–∂–Ω–æ:**
- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (T_min –∏ T_diss)
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
""")
