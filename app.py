import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ì–û–°–¢ 5639-82
grain_data = {
    'grain_size': [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    'grain_area': [1.0, 0.5, 0.25, 0.125, 0.0625, 0.0312, 0.0156, 0.00781, 0.00390, 
                   0.00195, 0.00098, 0.00049, 0.000244, 0.000122, 0.000061, 0.000030, 
                   0.000015, 0.000008],
    'grain_diameter': [0.875, 0.650, 0.444, 0.313, 0.222, 0.157, 0.111, 0.0783, 0.0553,
                       0.0391, 0.0267, 0.0196, 0.0138, 0.0099, 0.0069, 0.0049, 0.0032, 0.0027]
}

grain_df = pd.DataFrame(grain_data)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ü–æ—ç—Ç–∞–ø–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã")
st.markdown("""
**–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:** –î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ —É–∫—Ä—É–ø–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü œÉ-—Ñ–∞–∑—ã
- –°—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω —Ä–æ—Å—Ç–∞: $d^n - d_0^n = K \\cdot t$
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ –ê—Ä—Ä–µ–Ω–∏—É—Å—É: $K = K_0(G) \\cdot \\exp(-Q/RT)$
- –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞: $\\ln K_0(G) = a_0 + a_1 \\cdot Z(G)$
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –í–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
st.subheader("–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:")
has_sigma_content = st.radio("–ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ œÉ-—Ñ–∞–∑—ã?", 
                           ["–î–∞", "–ù–µ—Ç"])
initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                 value=0.0, min_value=0.0, step=0.1,
                                 help="–î–∏–∞–º–µ—Ç—Ä –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –∫ 0")

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd']
        if has_sigma_content == "–î–∞":
            required_cols.append('sigma_content')
        
        if all(col in df.columns for col in required_cols):
            st.session_state['experimental_data'] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{df['T'].min()} - {df['T'].max()}¬∞C")
            with col2:
                st.metric("–í—Ä–µ–º—è", f"{df['t'].min()} - {df['t'].max()} —á")
            with col3:
                st.metric("–î–∏–∞–º–µ—Ç—Ä—ã", f"{df['d'].min():.1f} - {df['d'].max():.1f} –º–∫–º")
            with col4:
                st.metric("–ù–æ–º–µ—Ä–∞ –∑–µ—Ä–µ–Ω", f"{df['G'].nunique()} —à—Ç")
                
            st.dataframe(df.head())
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'experimental_data' in st.session_state:
    df = st.session_state['experimental_data']
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.header("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    df_prep = df.copy()
    df_prep['T_K'] = df_prep['T'] + 273.15  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    df_prep = df_prep.merge(grain_df, left_on='G', right_on='grain_size', how='left')
    
    st.write("**–î–∞–Ω–Ω—ã–µ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–µ—Ä–Ω–∞—Ö:**")
    st.dataframe(df_prep.head())
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.header("3. –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n")
    
    st.markdown("""
    **–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è n:**
    - n = 3: –û–±—ä–µ–º–Ω–∞—è –¥–∏—Ñ—Ñ—É–∑–∏—è (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSW)
    - n = 4: –î–∏—Ñ—Ñ—É–∑–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∑–µ—Ä–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è œÉ-—Ñ–∞–∑—ã)
    - n = 3.5: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
    """)
    
    n_candidates = [3.0, 3.5, 4.0]
    n_results = {}
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ n
    for n in n_candidates:
        st.subheader(f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è n = {n}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è T –∏ G
        combinations = df_prep.groupby(['T', 'G']).size().reset_index()[['T', 'G']]
        k_values = []
        
        for _, row in combinations.iterrows():
            temp, grain = row['T'], row['G']
            subset = df_prep[(df_prep['T'] == temp) & (df_prep['G'] == grain)]
            
            if len(subset) >= 2:
                # –í—ã—á–∏—Å–ª—è–µ–º d^n - d‚ÇÄ^n
                d_transformed = subset['d']**n - initial_diameter**n
                
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: (d^n - d‚ÇÄ^n) = K * t
                slope, intercept, r_value, p_value, std_err = stats.linregress(
                    subset['t'], d_transformed
                )
                
                k_values.append({
                    'T': temp,
                    'T_K': temp + 273.15,
                    'G': grain,
                    'K': max(slope, 1e-10),  # –ò–∑–±–µ–≥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    'R2': r_value**2,
                    'std_err': std_err,
                    'grain_area': subset['grain_area'].iloc[0]
                })
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            n_results[n] = k_df
            
            # –°—Ä–µ–¥–Ω–µ–µ R¬≤ –¥–ª—è —ç—Ç–æ–≥–æ n
            mean_r2 = k_df['R2'].mean()
            st.write(f"–°—Ä–µ–¥–Ω–∏–π R¬≤ = {mean_r2:.4f}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            fig, axes = plt.subplots(1, 2, figsize=(15, 6))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for i, (temp, grain) in enumerate(combinations.head(4).itertuples(index=False)):
                subset = df_prep[(df_prep['T'] == temp) & (df_prep['G'] == grain)]
                if len(subset) >= 2:
                    d_transformed = subset['d']**n - initial_diameter**n
                    axes[0].scatter(subset['t'], d_transformed, 
                                  label=f'T={temp}¬∞C, G={grain}', alpha=0.7)
                    
                    # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                    slope = k_df[(k_df['T'] == temp) & (k_df['G'] == grain)]['K'].iloc[0]
                    t_range = np.linspace(subset['t'].min(), subset['t'].max(), 100)
                    axes[0].plot(t_range, slope * t_range, '--', alpha=0.7)
            
            axes[0].set_xlabel('–í—Ä–µ–º—è t (—á–∞—Å—ã)')
            axes[0].set_ylabel(f'$d^{{{n}}} - d_0^{{{n}}}$')
            axes[0].set_title(f'–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø—Ä–∏ n = {n}')
            axes[0].legend()
            axes[0].grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–±–æ—Ä–∞ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º
            all_r2 = []
            for _, row in k_df.iterrows():
                all_r2.append(row['R2'])
            
            axes[1].hist(all_r2, bins=10, alpha=0.7, edgecolor='black')
            axes[1].axvline(np.mean(all_r2), color='red', linestyle='--', 
                          label=f'–°—Ä–µ–¥–Ω–µ–µ R¬≤ = {np.mean(all_r2):.3f}')
            axes[1].set_xlabel('R¬≤')
            axes[1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            axes[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R¬≤ –ø–æ –≤—Å–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º T,G')
            axes[1].legend()
            axes[1].grid(True, alpha=0.3)
            
            st.pyplot(fig)
    
    # –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ n
    st.subheader("–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ n")
    if n_results:
        n_comparison = []
        for n, k_df in n_results.items():
            n_comparison.append({
                'n': n,
                '–°—Ä–µ–¥–Ω–∏–π R¬≤': k_df['R2'].mean(),
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': k_df['R2'].min(),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫': len(k_df)
            })
        
        n_comp_df = pd.DataFrame(n_comparison)
        st.dataframe(n_comp_df.style.format({
            '–°—Ä–µ–¥–Ω–∏–π R¬≤': '{:.4f}',
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': '{:.4f}'
        }).highlight_max(subset=['–°—Ä–µ–¥–Ω–∏–π R¬≤']))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä n —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º R¬≤
        best_n_row = n_comp_df.loc[n_comp_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
        best_n = best_n_row['n']
        st.success(f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏: n = {best_n}**")
        st.info(f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.4f}*")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.session_state['best_n'] = best_n
        st.session_state['k_values'] = n_results[best_n]
        
        # –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
        st.header("4. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (—É—Ä–∞–≤–Ω–µ–Ω–∏–µ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞)")
        
        k_df = n_results[best_n]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
        arrhenius_results = {}
        
        for grain in k_df['G'].unique():
            st.subheader(f"–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain}")
            
            grain_data = k_df[k_df['G'] == grain]
            
            if len(grain_data) >= 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: ln(K) = ln(K‚ÇÄ) - (Q/R) * (1/T)
                x = 1 / grain_data['T_K']
                y = np.log(grain_data['K'])
                
                slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
                
                Q = -slope * R  # –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                K0 = np.exp(intercept)
                
                arrhenius_results[grain] = {
                    'Q': Q,
                    'K0': K0,
                    'R2': r_value**2,
                    'grain_area': grain_data['grain_area'].iloc[0]
                }
                
                # –ì—Ä–∞—Ñ–∏–∫ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
                fig, ax = plt.subplots(figsize=(10, 6))
                
                ax.scatter(x, y, s=80, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏')
                
                # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                x_fit = np.linspace(x.min(), x.max(), 100)
                y_fit = slope * x_fit + intercept
                ax.plot(x_fit, y_fit, 'r--', 
                       label=f'–†–µ–≥—Ä–µ—Å—Å–∏—è: Q = {Q:.0f} –î–∂/–º–æ–ª—å\nR¬≤ = {r_value**2:.4f}')
                
                ax.set_xlabel('1/T (1/K)')
                ax.set_ylabel('ln(K)')
                ax.set_title(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain}')
                ax.legend()
                ax.grid(True, alpha=0.3)
                
                st.pyplot(fig)
                
                st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–µ—Ä–Ω–∞ {grain}:**")
                st.write(f"- –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Q = {Q:.0f} –î–∂/–º–æ–ª—å")
                st.write(f"- –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ K‚ÇÄ = {K0:.6f}")
                st.write(f"- R¬≤ = {r_value**2:.4f}")
        
        # –£—á–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞
        st.header("5. –£—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞")
        
        if arrhenius_results:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
            grain_effect_data = []
            for grain, results in arrhenius_results.items():
                grain_effect_data.append({
                    'G': grain,
                    'ln_K0': np.log(results['K0']),
                    'grain_area': results['grain_area'],
                    'Q': results['Q']
                })
            
            grain_effect_df = pd.DataFrame(grain_effect_data)
            
            st.write("**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –∑–µ—Ä–Ω–∞:**")
            st.dataframe(grain_effect_df)
            
            # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ Z(G)
            z_metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è Z(G):",
                                  ['grain_area', 'G'],
                                  format_func=lambda x: '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞' if x == 'grain_area' else '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞')
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
            X = grain_effect_df[z_metric].values
            y = grain_effect_df['ln_K0'].values
            
            slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
            
            st.success("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:**")
            st.write(f"- a‚ÇÄ = {intercept:.4f}")
            st.write(f"- a‚ÇÅ = {slope:.4f}")
            st.write(f"- R¬≤ = {r_value**2:.4f}")
            
            # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            fig, ax = plt.subplots(figsize=(10, 6))
            
            ax.scatter(X, y, s=80, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏')
            
            x_fit = np.linspace(X.min(), X.max(), 100)
            y_fit = slope * x_fit + intercept
            ax.plot(x_fit, y_fit, 'r--', 
                   label=f'–†–µ–≥—Ä–µ—Å—Å–∏—è: ln(K‚ÇÄ) = {intercept:.3f} + {slope:.3f}¬∑Z(G)')
            
            x_label = '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞ (–º–º¬≤)' if z_metric == 'grain_area' else '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ G'
            ax.set_xlabel(x_label)
            ax.set_ylabel('ln(K‚ÇÄ)')
            ax.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.session_state['final_params'] = {
                'n': best_n,
                'Q': grain_effect_df['Q'].mean(),  # –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                'a0': intercept,
                'a1': slope,
                'z_metric': z_metric,
                'd0': initial_diameter
            }
            
            # –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.header("6. –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            
            st.markdown("""
            **–§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:**
            $$
            T = \\frac{Q}{R \\cdot (a_0 + a_1 \\cdot Z(G) - \\ln\\left(\\frac{d^n - d_0^n}{t}\\right))}
            $$
            """)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                d_obs = st.number_input("–ù–∞–±–ª—é–¥–∞–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä d (–º–∫–º)", 
                                      value=5.0, min_value=0.1, step=0.1)
            with col2:
                t_obs = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ t (—á–∞—Å—ã)", 
                                      value=5000, min_value=1, step=100)
            with col3:
                g_obs = st.selectbox("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ G", 
                                   options=sorted(df_prep['G'].unique()))
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"):
                params = st.session_state['final_params']
                
                # –ù–∞—Ö–æ–¥–∏–º Z(G)
                if params['z_metric'] == 'grain_area':
                    z_value = grain_df[grain_df['grain_size'] == g_obs]['grain_area'].iloc[0]
                else:
                    z_value = g_obs
                
                # –í—ã—á–∏—Å–ª—è–µ–º K_obs
                k_obs = (d_obs**params['n'] - params['d0']**params['n']) / t_obs
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                denominator = R * (params['a0'] + params['a1'] * z_value - np.log(max(k_obs, 1e-10)))
                if denominator > 0:
                    T_K = params['Q'] / denominator
                    T_C = T_K - 273.15
                    
                    st.success(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏: {T_C:.1f}¬∞C**")
                    
                    # –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
                    st.write("**–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:**")
                    st.write(f"- K_obs = {k_obs:.6f}")
                    st.write(f"- ln(K_obs) = {np.log(k_obs):.4f}")
                    st.write(f"- Z(G) = {z_value:.6f}")
                    st.write(f"- –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å = {denominator:.4f}")
                else:
                    st.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å")
            
            # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.header("7. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"):
                output_buffer = io.BytesIO()
                
                with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
                    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    df_prep.to_excel(writer, sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã K –¥–ª—è –ª—É—á—à–µ–≥–æ n
                    k_df.to_excel(writer, sheet_name='–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ_–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', index=False)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
                    arrhenius_df = pd.DataFrame([
                        {**{'G': g}, **v} for g, v in arrhenius_results.items()
                    ])
                    arrhenius_df.to_excel(writer, sheet_name='–ê—Ä—Ä–µ–Ω–∏—É—Å_–∞–Ω–∞–ª–∏–∑', index=False)
                    
                    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                    final_params_df = pd.DataFrame([st.session_state['final_params']])
                    final_params_df.to_excel(writer, sheet_name='–§–∏–Ω–∞–ª—å–Ω—ã–µ_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', index=False)
                
                output_buffer.seek(0)
                
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Excel",
                    data=output_buffer,
                    file_name="–ø–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç_—Å–∏–≥–º–∞_—Ñ–∞–∑–∞.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
with st.expander("üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"):
    st.markdown("""
    **–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ —Ä–æ—Å—Ç–∞:**
    
    1. **–°—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω —Ä–æ—Å—Ç–∞:**
       $$
       d^n - d_0^n = K \\cdot t
       $$
    
    2. **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–ê—Ä—Ä–µ–Ω–∏—É—Å):**
       $$
       K = K_0(G) \\cdot \\exp\\left(-\\frac{Q}{RT}\\right)
       $$
    
    3. **–í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞:**
       $$
       \\ln K_0(G) = a_0 + a_1 \\cdot Z(G)
       $$
    
    **–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:**
    $$
    \\ln\\left(\\frac{d^n - d_0^n}{t}\\right) = a_0 + a_1 \\cdot Z(G) - \\frac{Q}{RT}
    $$
    
    **–û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
    - n ‚âà 4.0 (–¥–∏—Ñ—Ñ—É–∑–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∑–µ—Ä–µ–Ω)
    - Q ‚âà 200-300 –∫–î–∂/–º–æ–ª—å –¥–ª—è —Å—Ç–∞–ª–µ–π
    - a‚ÇÅ > 0 (–º–µ–ª–∫–æ–µ –∑–µ—Ä–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç)
    """)
