import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
st.markdown("""
**–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∑–µ—Ä–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥–µ–ª–∏:**
- –°—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω —Ä–æ—Å—Ç–∞: $d^n - d_0^n = K \\cdot t$
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ –ê—Ä—Ä–µ–Ω–∏—É—Å—É: $K = K_0 \\cdot \\exp(-Q/RT)$
- –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è n –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 3.0-5.0
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                 value=0.0, min_value=0.0, step=0.1,
                                 help="–î–∏–∞–º–µ—Ç—Ä –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –∫ 0")

target_grain = 10  # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–µ—Ä–Ω–µ ‚Ññ10

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        if all(col in df.columns for col in ['G', 'T', 't', 'd']):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10
            df_grain10 = df[df['G'] == target_grain].copy()
            
            if len(df_grain10) > 0:
                st.session_state['grain10_data'] = df_grain10
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–µ—Ä–Ω—É ‚Ññ10
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10:")
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    unique_temps = df_grain10['T'].unique()
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                    st.write(f"({', '.join(map(str, sorted(unique_temps)))}¬∞C)")
                with col2:
                    time_range = f"{df_grain10['t'].min()} - {df_grain10['t'].max()}"
                    st.metric("–í—Ä–µ–º—è –≤—ã–¥–µ—Ä–∂–∫–∏", time_range + " —á")
                with col3:
                    diam_range = f"{df_grain10['d'].min():.1f} - {df_grain10['d'].max():.1f}"
                    st.metric("–î–∏–∞–º–µ—Ç—Ä—ã", diam_range + " –º–∫–º")
                with col4:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", f"{len(df_grain10)}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º
                st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º:**")
                temp_distribution = df_grain10.groupby('T').agg({
                    't': ['count', 'min', 'max'],
                    'd': ['min', 'max', 'mean']
                }).round(2)
                st.dataframe(temp_distribution)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–µ—Ä–Ω–∞ ‚Ññ10
                st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–µ—Ä–Ω–∞ ‚Ññ10")
                
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                
                # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º
                temperatures = sorted(df_grain10['T'].unique())
                colors = plt.cm.viridis(np.linspace(0, 1, len(temperatures)))
                
                for i, temp in enumerate(temperatures):
                    temp_data = df_grain10[df_grain10['T'] == temp]
                    ax1.scatter(temp_data['t'], temp_data['d'], 
                               color=colors[i], label=f'{temp}¬∞C', s=80, alpha=0.8)
                    
                    # –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–∫–∏ –ª–∏–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    sorted_data = temp_data.sort_values('t')
                    ax1.plot(sorted_data['t'], sorted_data['d'], 
                            color=colors[i], linestyle='--', alpha=0.5)
                
                ax1.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
                ax1.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
                ax1.set_title('–ö–∏–Ω–µ—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10')
                ax1.legend()
                ax1.grid(True, alpha=0.3)
                
                # –ì—Ä–∞—Ñ–∏–∫ 2: –î–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                for i, temp in enumerate(temperatures):
                    temp_data = df_grain10[df_grain10['T'] == temp]
                    ax2.scatter(np.log(temp_data['t']), np.log(temp_data['d']), 
                               color=colors[i], label=f'{temp}¬∞C', s=80, alpha=0.8)
                
                ax2.set_xlabel('ln(t)')
                ax2.set_ylabel('ln(d)')
                ax2.set_title('–î–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö')
                ax2.legend()
                ax2.grid(True, alpha=0.3)
                
                plt.tight_layout()
                st.pyplot(fig)
                
                st.dataframe(df_grain10)
                
            else:
                st.error(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
        else:
            missing = [col for col in ['G', 'T', 't', 'd'] if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10
if 'grain10_data' in st.session_state:
    df_grain10 = st.session_state['grain10_data']
    df_grain10['T_K'] = df_grain10['T'] + 273.15  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    
    # –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.header("2. –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω n
    n_min = 3.0
    n_max = 5.0
    n_step = 0.1
    n_candidates = np.arange(n_min, n_max + n_step, n_step)
    
    st.write(f"**–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω n –æ—Ç {n_min} –¥–æ {n_max} —Å —à–∞–≥–æ–º {n_step}**")
    
    n_results = {}
    k_values_by_temp = {}
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ n
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, n in enumerate(n_candidates):
        status_text.text(f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è n = {n:.1f}...")
        
        k_values = []
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∑–µ—Ä–Ω–∞ ‚Ññ10
        for temp in df_grain10['T'].unique():
            temp_data = df_grain10[df_grain10['T'] == temp]
            
            if len(temp_data) >= 2:
                # –í—ã—á–∏—Å–ª—è–µ–º d^n - d‚ÇÄ^n
                d_transformed = temp_data['d']**n - initial_diameter**n
                
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: (d^n - d‚ÇÄ^n) = K * t
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        temp_data['t'], d_transformed
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ K
                    if slope > 0:
                        k_values.append({
                            'T': temp,
                            'T_K': temp + 273.15,
                            'K': slope,
                            'R2': r_value**2,
                            'std_err': std_err,
                            'n_points': len(temp_data)
                        })
                except:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            n_results[n] = {
                'k_df': k_df,
                'mean_R2': k_df['R2'].mean(),
                'min_R2': k_df['R2'].min(),
                'n_temperatures': len(k_df)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º K –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if len(k_df) == len(df_grain10['T'].unique()):
                k_values_by_temp[n] = k_df.set_index('T')['K'].to_dict()
        
        progress_bar.progress((idx + 1) / len(n_candidates))
    
    status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥–±–æ—Ä–∞ n
    if n_results:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è n")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = []
        for n, results in n_results.items():
            comparison_data.append({
                'n': n,
                '–°—Ä–µ–¥–Ω–∏–π R¬≤': results['mean_R2'],
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': results['min_R2'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π n
        best_n_row = comparison_df.loc[comparison_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
        best_n = best_n_row['n']
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ R¬≤ –æ—Ç n
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: R¬≤ vs n
        n_values = [data['n'] for data in comparison_data]
        mean_r2_values = [data['–°—Ä–µ–¥–Ω–∏–π R¬≤'] for data in comparison_data]
        
        ax1.plot(n_values, mean_r2_values, 'b-o', linewidth=2, markersize=4)
        ax1.axvline(best_n, color='red', linestyle='--', 
                   label=f'–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ n = {best_n:.1f}')
        ax1.set_xlabel('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ n')
        ax1.set_ylabel('–°—Ä–µ–¥–Ω–∏–π R¬≤')
        ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è n')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ó–Ω–∞—á–µ–Ω–∏—è K –¥–ª—è —Ä–∞–∑–Ω—ã—Ö n (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)
        if k_values_by_temp:
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            temps = sorted(df_grain10['T'].unique())
            n_selected = [n for n in n_candidates if n in k_values_by_temp]
            
            k_matrix = []
            for n in n_selected:
                row = [k_values_by_temp[n].get(temp, np.nan) for temp in temps]
                k_matrix.append(row)
            
            k_matrix = np.array(k_matrix)
            
            im = ax2.imshow(k_matrix, cmap='viridis', aspect='auto', 
                           extent=[temps[0], temps[-1], n_selected[-1], n_selected[0]])
            ax2.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
            ax2.set_ylabel('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å n')
            ax2.set_title('–ó–Ω–∞—á–µ–Ω–∏—è K –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç n –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')
            plt.colorbar(im, ax=ax2, label='K')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
            for i in range(len(n_selected)):
                for j in range(len(temps)):
                    if not np.isnan(k_matrix[i, j]):
                        ax2.text(temps[j], n_selected[i], f'{k_matrix[i, j]:.3f}', 
                               ha='center', va='center', fontsize=8, color='white')
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –ª—É—á—à–µ–≥–æ
        def highlight_best(s):
            is_max = s == s.max()
            return ['background-color: lightgreen' if v else '' for v in is_max]
        
        st.dataframe(comparison_df.style.format({
            '–°—Ä–µ–¥–Ω–∏–π R¬≤': '{:.4f}',
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': '{:.4f}'
        }).apply(highlight_best, subset=['–°—Ä–µ–¥–Ω–∏–π R¬≤']))
        
        st.success(f"üéØ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏: n = {best_n:.1f}**")
        st.info(f"*–°—Ä–µ–¥–Ω–∏–π R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.4f} –¥–ª—è {best_n_row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä']} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä*")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ª—É—á—à–µ–≥–æ n
        st.header(f"3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è n = {best_n:.1f}")
        
        best_results = n_results[best_n]
        best_k_df = best_results['k_df']
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ n
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        axes = axes.flatten()
        
        temps_to_plot = sorted(df_grain10['T'].unique())[:4]  # –ü–µ—Ä–≤—ã–µ 4 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
        for i, temp in enumerate(temps_to_plot):
            if i < len(axes):
                temp_data = df_grain10[df_grain10['T'] == temp]
                d_transformed = temp_data['d']**best_n - initial_diameter**best_n
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                k_value = best_k_df[best_k_df['T'] == temp]['K'].iloc[0]
                r2_value = best_k_df[best_k_df['T'] == temp]['R2'].iloc[0]
                
                axes[i].scatter(temp_data['t'], d_transformed, alpha=0.7, s=60)
                
                # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max(), 100)
                d_fit = k_value * t_range
                axes[i].plot(t_range, d_fit, 'r--', linewidth=2, 
                           label=f'K = {k_value:.4f}\nR¬≤ = {r2_value:.4f}')
                
                axes[i].set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
                axes[i].set_ylabel(f'$d^{{{best_n:.1f}}} - d_0^{{{best_n:.1f}}}$')
                axes[i].set_title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C')
                axes[i].legend()
                axes[i].grid(True, alpha=0.3)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ subplots
        for i in range(len(temps_to_plot), len(axes)):
            axes[i].set_visible(False)
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ n
        st.header("4. –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞")
        
        if len(best_k_df) >= 2:
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: ln(K) = ln(K‚ÇÄ) - (Q/R) * (1/T)
            x = 1 / best_k_df['T_K']
            y = np.log(best_k_df['K'])
            
            slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
            
            Q = -slope * R  # –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –î–∂/–º–æ–ª—å
            K0 = np.exp(intercept)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ê—Ä—Ä–µ–Ω–∏—É—Å
            ax1.scatter(x, y, s=100, color='blue', alpha=0.7, 
                       label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏')
            
            x_fit = np.linspace(x.min(), x.max(), 100)
            y_fit = slope * x_fit + intercept
            ax1.plot(x_fit, y_fit, 'r--', linewidth=2,
                   label=f'–†–µ–≥—Ä–µ—Å—Å–∏—è: Q = {Q:.0f} –î–∂/–º–æ–ª—å\nR¬≤ = {r_value**2:.4f}')
            
            ax1.set_xlabel('1/T (1/K)')
            ax1.set_ylabel('ln(K)')
            ax1.set_title('–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞
            ax2.scatter(df_grain10['t'], df_grain10['d'], alpha=0.7, s=60, 
                       label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            colors = plt.cm.viridis(np.linspace(0, 1, len(best_k_df)))
            for idx, (_, row) in enumerate(best_k_df.iterrows()):
                temp = row['T']
                k_pred = row['K']
                temp_data = df_grain10[df_grain10['T'] == temp]
                
                t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max(), 100)
                d_pred = (k_pred * t_range + initial_diameter**best_n)**(1/best_n)
                
                ax2.plot(t_range, d_pred, color=colors[idx], 
                        label=f'{temp}¬∞C (–º–æ–¥–µ–ª—å)', linestyle='--')
            
            ax2.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
            ax2.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
            ax2.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏ –º–æ–¥–µ–ª–∏')
            ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.success("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞:**")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Q", f"{Q:.0f} –î–∂/–º–æ–ª—å")
            with col2:
                st.metric("–ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ K‚ÇÄ", f"{K0:.6f}")
            with col3:
                st.metric("R¬≤", f"{r_value**2:.4f}")
            with col4:
                st.metric("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å n", f"{best_n:.1f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.session_state['final_params_grain10'] = {
                'n': best_n,
                'Q': Q,
                'K0': K0,
                'd0': initial_diameter,
                'arrhenius_R2': r_value**2
            }
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            results_df = best_k_df[['T', 'K', 'R2', 'n_points']].copy()
            results_df['K'] = results_df['K'].apply(lambda x: f"{x:.6f}")
            results_df['R2'] = results_df['R2'].apply(lambda x: f"{x:.4f}")
            st.dataframe(results_df)
            
            # –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.header("5. –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            
            st.markdown(f"""
            **–§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:**
            $$
            T = \\frac{{Q}}{{R \\cdot (\\ln K_0 - \\ln\\left(\\frac{{d^{{{best_n:.1f}}} - d_0^{{{best_n:.1f}}}}{{t}}\\right))}}
            $$
            """)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                d_obs = st.number_input("–ù–∞–±–ª—é–¥–∞–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä d (–º–∫–º)", 
                                      value=5.0, min_value=0.1, step=0.1)
            with col2:
                t_obs = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ t (—á–∞—Å—ã)", 
                                      value=5000, min_value=1, step=100)
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"):
                params = st.session_state['final_params_grain10']
                
                # –í—ã—á–∏—Å–ª—è–µ–º K_obs
                k_obs = (d_obs**params['n'] - params['d0']**params['n']) / t_obs
                
                if k_obs > 0:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                    denominator = R * (np.log(params['K0']) - np.log(k_obs))
                    if denominator > 0:
                        T_K = params['Q'] / denominator
                        T_C = T_K - 273.15
                        
                        st.success(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏: {T_C:.1f}¬∞C**")
                        
                        # –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
                        st.write("**–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:**")
                        st.write(f"- K_obs = {k_obs:.6f}")
                        st.write(f"- ln(K_obs) = {np.log(k_obs):.4f}")
                        st.write(f"- ln(K‚ÇÄ) = {np.log(params['K0']):.4f}")
                        st.write(f"- –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å = {denominator:.4f}")
                    else:
                        st.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å")
                else:
                    st.error("–û—à–∏–±–∫–∞: K_obs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
            # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.header("6. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10"):
                output_buffer = io.BytesIO()
                
                with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
                    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    df_grain10.to_excel(writer, sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞ n
                    comparison_df.to_excel(writer, sheet_name='–ü–æ–¥–±–æ—Ä_–ø–æ–∫–∞–∑–∞—Ç–µ–ª—è_n', index=False)
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ n
                    best_k_df.to_excel(writer, sheet_name='–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ_–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', index=False)
                    
                    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    final_params_df = pd.DataFrame([st.session_state['final_params_grain10']])
                    final_params_df.to_excel(writer, sheet_name='–§–∏–Ω–∞–ª—å–Ω—ã–µ_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', index=False)
                
                output_buffer.seek(0)
                
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10",
                    data=output_buffer,
                    file_name="–æ—Ç—á–µ—Ç_–∑–µ—Ä–Ω–æ_10.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        else:
            st.warning("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
with st.expander("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10"):
    st.markdown("""
    **–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞:**
    
    1. **–°—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω —Ä–æ—Å—Ç–∞:**
       $$
       d^n - d_0^n = K \\cdot t
       $$
    
    2. **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–ê—Ä—Ä–µ–Ω–∏—É—Å):**
       $$
       K = K_0 \\cdot \\exp\\left(-\\frac{Q}{RT}\\right)
       $$
    
    **–î–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 –æ–ø—Ä–µ–¥–µ–ª—è–µ–º:**
    - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å n (3.0-5.0)
    - –≠–Ω–µ—Ä–≥–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Q
    - –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—É K‚ÇÄ
    
    **–û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
    - n ‚âà 4.0 –¥–ª—è –¥–∏—Ñ—Ñ—É–∑–∏–∏ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∑–µ—Ä–µ–Ω
    - Q ‚âà 200-300 –∫–î–∂/–º–æ–ª—å –¥–ª—è —Å—Ç–∞–ª–µ–π
    """)
