import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ì–û–°–¢ 5639-82
grain_data = {
    'grain_size': [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    'grain_area': [1.0, 0.5, 0.25, 0.125, 0.0625, 0.0312, 0.0156, 0.00781, 0.00390, 
                   0.00195, 0.00098, 0.00049, 0.000244, 0.000122, 0.000061, 0.000030, 
                   0.000015, 0.000008],
    'grain_diameter': [0.875, 0.650, 0.444, 0.313, 0.222, 0.157, 0.111, 0.0783, 0.0553,
                       0.0391, 0.0267, 0.0196, 0.0138, 0.0099, 0.0069, 0.0049, 0.0032, 0.0027]
}

grain_df = pd.DataFrame(grain_data)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

# –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò –° –£–ß–ï–¢–û–ú –¢–ï–ú–ü–ï–†–ê–¢–£–†–´
def arrhenius_model(T, k0, Q):
    """–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞: k = k0 * exp(-Q/RT)"""
    return k0 * np.exp(-Q / (R * T))

def growth_model_with_temperature(t, T, k0, Q, n, grain_area, alpha=0.1, d0=0):
    """
    –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞:
    d = d0 + k0 * exp(-Q/RT) * (1 + alpha/grain_area) * t^n
    """
    k_arrhenius = arrhenius_model(T, k0, Q)
    boundary_effect = 1 + alpha / grain_area
    return d0 + k_arrhenius * boundary_effect * (t ** n)

def universal_growth_model(X, k0, Q, n, alpha, d0=0):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:
    X = [t, T, grain_area]
    """
    t, T, grain_area = X[:, 0], X[:, 1], X[:, 2]
    k_arrhenius = arrhenius_model(T, k0, Q)
    boundary_effect = 1 + alpha / grain_area
    return d0 + k_arrhenius * boundary_effect * (t ** n)

def grain_specific_model(X, k0, Q, n, d0=0):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–µ—Ä–Ω–∞ (–±–µ–∑ —É—á–µ—Ç–∞ grain_area –≤ –º–æ–¥–µ–ª–∏):
    X = [t, T]
    """
    t, T = X[:, 0], X[:, 1]
    k_arrhenius = arrhenius_model(T, k0, Q)
    return d0 + k_arrhenius * (t ** n)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
def calculate_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    r2 = r2_score(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    mape = np.mean(np.abs((y_true - y_pred) / np.where(y_true != 0, y_true, 1e-10))) * 100
    
    return {
        'R¬≤': r2,
        'RMSE': rmse,
        'MAE': mae,
        'MAPE': mape
    }

def plot_residuals(y_true, y_pred, title):
    """–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    residuals = y_true - y_pred
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
    ax1.hist(residuals, bins=20, alpha=0.7, edgecolor='black')
    ax1.axvline(0, color='red', linestyle='--', linewidth=2)
    ax1.set_xlabel('–û—Å—Ç–∞—Ç–∫–∏')
    ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax1.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤\n{title}')
    ax1.grid(True, alpha=0.3)
    
    # –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    ax2.scatter(y_pred, residuals, alpha=0.7)
    ax2.axhline(0, color='red', linestyle='--', linewidth=2)
    ax2.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    ax2.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
    ax2.set_title('–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    ax2.grid(True, alpha=0.3)
    
    return fig

def plot_arrhenius_analysis(temperatures, k_values, k0, Q, grain_size=None):
    """–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    T_kelvin = temperatures + 273.15
    inv_T = 1 / T_kelvin
    log_k = np.log(k_values)
    
    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    ax.scatter(inv_T, log_k, s=100, color='blue', alpha=0.7, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ k')
    
    # –õ–∏–Ω–∏—è –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
    T_range = np.linspace(T_kelvin.min(), T_kelvin.max(), 100)
    inv_T_range = 1 / T_range
    k_range = arrhenius_model(T_range, k0, Q)
    log_k_range = np.log(k_range)
    
    ax.plot(inv_T_range, log_k_range, 'r-', linewidth=2, 
            label=f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞\nQ = {Q:.0f} –î–∂/–º–æ–ª—å')
    
    ax.set_xlabel('1/T (1/K)')
    ax.set_ylabel('ln(k)')
    title = '–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞'
    if grain_size:
        title += f' –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}'
    ax.set_title(title)
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –æ—Å—å —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏ –≤ ¬∞C
    ax2 = ax.twiny()
    ax2.set_xlim(ax.get_xlim())
    temp_ticks = np.array([500, 600, 700, 800, 900])
    inv_temp_ticks = 1 / (temp_ticks + 273.15)
    ax2.set_xticks(inv_temp_ticks)
    ax2.set_xticklabels(temp_ticks)
    ax2.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    
    return fig

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Streamlit
st.title("üå°Ô∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

def create_template():
    template_data = {
        'G': [7, 7, 7, 7, 5, 5, 5, 5, 3, 3, 3, 3],
        'T': [600, 600, 600, 600, 650, 650, 650, 650, 700, 700, 700, 700],
        't': [2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000],
        'd': [2.1, 3.0, 3.6, 4.1, 3.5, 4.8, 5.8, 6.5, 5.2, 7.1, 8.5, 9.6]
    }
    return pd.DataFrame(template_data)

template_df = create_template()
excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
    template_df.to_excel(writer, sheet_name='–®–∞–±–ª–æ–Ω_–¥–∞–Ω–Ω—ã—Ö', index=False)
excel_buffer.seek(0)

st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel",
    data=excel_buffer,
    file_name="—à–∞–±–ª–æ–Ω_–¥–∞–Ω–Ω—ã—Ö_—Å–∏–≥–º–∞_—Ñ–∞–∑–∞.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['csv', 'xlsx', 'xls'])

df = None
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        if all(col in df.columns for col in ['G', 'T', 't', 'd']):
            st.session_state['experimental_data'] = df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{df['T'].min()} - {df['T'].max()}¬∞C")
            with col2:
                st.metric("–í—Ä–µ–º—è", f"{df['t'].min()} - {df['t'].max()} —á")
            with col3:
                st.metric("–î–∏–∞–º–µ—Ç—Ä—ã", f"{df['d'].min():.1f} - {df['d'].max():.1f} –º–∫–º")
            with col4:
                st.metric("–ù–æ–º–µ—Ä–∞ –∑–µ—Ä–µ–Ω", f"{df['G'].nunique()} —à—Ç")
                
            st.dataframe(df.head())
        else:
            st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: G, T, t, d")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
if 'experimental_data' in st.session_state:
    df = st.session_state['experimental_data']
    df_enriched = df.merge(grain_df, left_on='G', right_on='grain_size', how='left')
    df_enriched['T_K'] = df_enriched['T'] + 273.15  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    
    st.header("2. –ü–æ–¥–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
        ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–µ—Ä–Ω–∞", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω"]
    )
    
    if model_type == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–µ—Ä–Ω–∞":
        st.subheader("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞")
        
        individual_results = {}
        
        for grain_size in sorted(df['G'].unique()):
            st.markdown(f"### üîç –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}")
            
            grain_data = df_enriched[df_enriched['G'] == grain_size]
            
            if len(grain_data) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
                try:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    X_grain = grain_data[['t', 'T_K']].values
                    y_grain = grain_data['d'].values
                    
                    # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
                    popt, pcov = curve_fit(grain_specific_model, 
                                         X_grain, 
                                         y_grain,
                                         p0=[1.0, 200000, 0.5],  # k0, Q, n
                                         bounds=([0.001, 100000, 0.1], 
                                                [1000, 500000, 2.0]))
                    
                    k0_opt, Q_opt, n_opt = popt
                    y_pred = grain_specific_model(X_grain, k0_opt, Q_opt, n_opt)
                    metrics = calculate_metrics(y_grain, y_pred)
                    
                    individual_results[grain_size] = {
                        'k0': k0_opt,
                        'Q': Q_opt,
                        'n': n_opt,
                        'metrics': metrics,
                        'predictions': y_pred,
                        'grain_area': grain_data['grain_area'].iloc[0]
                    }
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:**")
                        st.write(f"- k‚ÇÄ = {k0_opt:.4f}")
                        st.write(f"- Q = {Q_opt:.0f} –î–∂/–º–æ–ª—å")
                        st.write(f"- n = {n_opt:.4f}")
                        st.write(f"- –ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞ = {grain_data['grain_area'].iloc[0]:.6f} –º–º¬≤")
                    
                    with col2:
                        st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**")
                        for metric, value in metrics.items():
                            st.write(f"- {metric} = {value:.4f}")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–µ—Ä–Ω–∞
                    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º k –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    temp_k_values = []
                    temp_values = []
                    for temp in grain_data['T'].unique():
                        temp_data = grain_data[grain_data['T'] == temp]
                        if len(temp_data) >= 2:
                            # –û—Ü–µ–Ω–∏–≤–∞–µ–º k –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            try:
                                popt_temp, _ = curve_fit(lambda t, k: k * (t ** n_opt), 
                                                       temp_data['t'], temp_data['d'],
                                                       p0=[0.1])
                                temp_k_values.append(popt_temp[0])
                                temp_values.append(temp)
                            except:
                                pass
                    
                    if len(temp_k_values) >= 2:
                        arrhenius_fig = plot_arrhenius_analysis(
                            np.array(temp_values), np.array(temp_k_values), 
                            k0_opt, Q_opt, grain_size
                        )
                        st.pyplot(arrhenius_fig)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –º–æ–¥–µ–ª–∏ vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                    fig, ax = plt.subplots(figsize=(10, 6))
                    
                    # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                    colors = plt.cm.viridis(np.linspace(0, 1, len(grain_data['T'].unique())))
                    
                    for i, temp in enumerate(grain_data['T'].unique()):
                        temp_data = grain_data[grain_data['T'] == temp]
                        temp_mask = grain_data['T'] == temp
                        temp_pred = y_pred[temp_mask]
                        
                        ax.scatter(temp_data['t'], temp_data['d'], 
                                  color=colors[i], label=f'{temp}¬∞C', s=80, alpha=0.7)
                        
                        # –õ–∏–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                        t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max(), 100)
                        T_K_const = temp + 273.15
                        d_pred_range = grain_specific_model(
                            np.column_stack([t_range, np.full_like(t_range, T_K_const)]), 
                            k0_opt, Q_opt, n_opt
                        )
                        ax.plot(t_range, d_pred_range, color=colors[i], linestyle='--', alpha=0.7)
                    
                    ax.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
                    ax.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
                    ax.set_title(f'–ú–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}\n'
                                f'R¬≤ = {metrics["R¬≤"]:.3f}')
                    ax.legend()
                    ax.grid(True, alpha=0.3)
                    
                    st.pyplot(fig)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}: {e}")
            else:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏)")
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∑–µ—Ä–Ω–∞–º
        if individual_results:
            st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π")
            
            summary_data = []
            for grain_size, results in individual_results.items():
                summary_data.append({
                    '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞': grain_size,
                    '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞': results['grain_area'],
                    'k‚ÇÄ': results['k0'],
                    'Q, –î–∂/–º–æ–ª—å': results['Q'],
                    'n': results['n'],
                    'R¬≤': results['metrics']['R¬≤'],
                    'RMSE': results['metrics']['RMSE']
                })
            
            summary_df = pd.DataFrame(summary_data)
            st.dataframe(summary_df.style.format({
                '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞': '{:.6f}',
                'k‚ÇÄ': '{:.4f}',
                'Q, –î–∂/–º–æ–ª—å': '{:.0f}',
                'n': '{:.4f}',
                'R¬≤': '{:.4f}',
                'RMSE': '{:.4f}'
            }))
            
            st.session_state['individual_results'] = individual_results
    
    else:  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = df_enriched[['t', 'T_K', 'grain_area']].values
        y = df_enriched['d'].values
        
        try:
            # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            popt, pcov = curve_fit(universal_growth_model, X, y,
                                 p0=[1.0, 200000, 0.5, 0.01],
                                 bounds=([0.001, 100000, 0.1, 0], 
                                        [1000, 500000, 2.0, 1.0]))
            
            k0_uni, Q_uni, n_uni, alpha_uni = popt
            y_pred_uni = universal_growth_model(X, k0_uni, Q_uni, n_uni, alpha_uni)
            metrics_uni = calculate_metrics(y, y_pred_uni)
            
            # –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:**")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("k‚ÇÄ", f"{k0_uni:.4f}")
            with col2:
                st.metric("Q", f"{Q_uni:.0f} –î–∂/–º–æ–ª—å")
            with col3:
                st.metric("n", f"{n_uni:.4f}")
            with col4:
                st.metric("Œ±", f"{alpha_uni:.4f}")
            
            st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**")
            metrics_cols = st.columns(4)
            for i, (metric, value) in enumerate(metrics_uni.items()):
                with metrics_cols[i]:
                    st.metric(metric, f"{value:.4f}")
            
            # –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            st.subheader("–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")
            
            # –û—Ü–µ–Ω–∏–º k –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            unique_temps = df_enriched['T'].unique()
            k_estimated = []
            for temp in unique_temps:
                temp_data = df_enriched[df_enriched['T'] == temp]
                if len(temp_data) >= 2:
                    try:
                        # –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ k –¥–ª—è —ç—Ç–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                        k_temp = arrhenius_model(temp + 273.15, k0_uni, Q_uni)
                        k_estimated.append(k_temp)
                    except:
                        pass
            
            if len(k_estimated) >= 2:
                arrhenius_fig = plot_arrhenius_analysis(
                    unique_temps[:len(k_estimated)], np.array(k_estimated), 
                    k0_uni, Q_uni
                )
                st.pyplot(arrhenius_fig)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            fig, ax = plt.subplots(figsize=(10, 6))
            
            colors = plt.cm.viridis(np.linspace(0, 1, len(df_enriched['G'].unique())))
            
            for i, grain_size in enumerate(df_enriched['G'].unique()):
                mask = df_enriched['G'] == grain_size
                subset = df_enriched[mask]
                pred_subset = y_pred_uni[mask]
                
                ax.scatter(subset['d'], pred_subset, 
                          color=colors[i], label=f'–ó–µ—Ä–Ω–æ {grain_size}', 
                          s=80, alpha=0.7)
            
            # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            min_val = min(df_enriched['d'].min(), y_pred_uni.min())
            max_val = max(df_enriched['d'].max(), y_pred_uni.max())
            ax.plot([min_val, max_val], [min_val, max_val], 'r--', 
                   label='–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ', linewidth=2)
            
            ax.set_xlabel('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∫–º)')
            ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∫–º)')
            ax.set_title(f'–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç\n'
                        f'R¬≤ = {metrics_uni["R¬≤"]:.3f}')
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π")
            
            comparison_df = df_enriched[['G', 'T', 't', 'd']].copy()
            comparison_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'] = y_pred_uni
            comparison_df['–û—à–∏–±–∫–∞'] = comparison_df['d'] - comparison_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ']
            comparison_df['|–û—à–∏–±–∫–∞|'] = np.abs(comparison_df['–û—à–∏–±–∫–∞'])
            
            st.dataframe(comparison_df.style.format({
                'd': '{:.2f}',
                '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ': '{:.2f}',
                '–û—à–∏–±–∫–∞': '{:.3f}',
                '|–û—à–∏–±–∫–∞|': '{:.3f}'
            }).background_gradient(subset=['|–û—à–∏–±–∫–∞|'], cmap='Reds'))
            
            st.session_state['universal_results'] = {
                'k0': k0_uni, 'Q': Q_uni, 'n': n_uni, 'alpha': alpha_uni,
                'metrics': metrics_uni, 'predictions': y_pred_uni
            }
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è")

    # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("3. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if st.button("üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
        output_buffer = io.BytesIO()
        
        with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
            # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df_enriched.to_excel(writer, sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
            if 'individual_results' in st.session_state:
                ind_results = []
                for grain_size, results in st.session_state['individual_results'].items():
                    ind_results.append({
                        '–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞': grain_size,
                        'k0': results['k0'],
                        'Q_–î–∂_–º–æ–ª—å': results['Q'],
                        'n': results['n'],
                        '–ü–ª–æ—â–∞–¥—å_–∑–µ—Ä–Ω–∞': results['grain_area'],
                        'R2': results['metrics']['R¬≤'],
                        'RMSE': results['metrics']['RMSE'],
                        'MAE': results['metrics']['MAE']
                    })
                pd.DataFrame(ind_results).to_excel(writer, sheet_name='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–º–æ–¥–µ–ª–∏', index=False)
            
            if 'universal_results' in st.session_state:
                uni_results = pd.DataFrame([st.session_state['universal_results']])
                uni_results.to_excel(writer, sheet_name='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è_–º–æ–¥–µ–ª—å', index=False)
            
            # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            if 'universal_results' in st.session_state:
                comparison_df.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_–∑–Ω–∞—á–µ–Ω–∏–π', index=False)
        
        output_buffer.seek(0)
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel",
            data=output_buffer,
            file_name="–æ—Ç—á–µ—Ç_–º–æ–¥–µ–ª–∏_—Å–∏–≥–º–∞_—Ñ–∞–∑–∞.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
with st.expander("‚ÑπÔ∏è –û —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π"):
    st.markdown("""
    **–ü–æ–ª–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã:**
    
    ```
    d = k‚ÇÄ ¬∑ exp(-Q/RT) ¬∑ (1 + Œ±/a_i) ¬∑ t‚Åø
    ```
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:**
    - **k‚ÇÄ**: –ü—Ä–µ–¥—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    - **Q**: –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–î–∂/–º–æ–ª—å) 
    - **R**: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è (8.314 –î–∂/(–º–æ–ª—å¬∑–ö))
    - **T**: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    - **Œ±**: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω
    - **a_i**: –ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è –∑–µ—Ä–Ω–∞ (–º–º¬≤)
    - **n**: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —Ä–æ—Å—Ç–∞
    - **t**: –í—Ä–µ–º—è (—á–∞—Å—ã)
    
    **–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:**
    - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è **—É—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ê—Ä—Ä–µ–Ω–∏—É—Å–∞**
    - –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ **–ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü**
    - –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É–µ—Ç **—Å—Ç–µ–ø–µ–Ω–Ω–æ–º—É –∑–∞–∫–æ–Ω—É —Ä–æ—Å—Ç–∞**
    
    **–û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
    - Q ‚âà 200-300 –∫–î–∂/–º–æ–ª—å –¥–ª—è –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å—Ç–∞–ª—è—Ö
    - n ‚âà 0.3-0.7 –¥–ª—è —Ä–æ—Å—Ç–∞ —Ñ–∞–∑
    - Œ± > 0 (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –º–µ–ª–∫–æ–≥–æ –∑–µ—Ä–Ω–∞)
    """)
