import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ œÉ-—Ñ–∞–∑—ã —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π")
st.markdown("""
**–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥–±–æ—Ä–∞:**
- –ü–æ–ª–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
- –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                 value=0.0, min_value=0.0, step=0.1,
                                 help="–ï—Å–ª–∏ –∑–∞—Ä–æ–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ –≤–∞—à–∏—Ö –≤—Ä–µ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–∏–∑–∫–æ–µ –∫ 0")

target_grain = 10

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
def calculate_comprehensive_metrics(y_true, y_pred, y_pred_range=None, t_range=None):
    """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    metrics = {
        'R¬≤': r2_score(y_true, y_pred),
        'RMSE': np.sqrt(mean_squared_error(y_true, y_pred)),
        'MAE': mean_absolute_error(y_true, y_pred),
        'MAPE': np.mean(np.abs((y_true - y_pred) / np.where(y_true != 0, y_true, 1e-10))) * 100
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    if y_pred_range is not None and t_range is not None:
        # –û—Ü–µ–Ω–∫–∞ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)
        if len(y_pred_range) > 1:
            derivative = np.diff(y_pred_range) / np.diff(t_range)
            metrics['–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å'] = "–î–∞" if np.all(derivative >= 0) else "–ù–µ—Ç"
    
    return metrics

def plot_with_diagnostics(ax, t_exp, y_exp, y_pred, t_range=None, y_range=None, 
                         title="", xlabel="–í—Ä–µ–º—è (—á–∞—Å—ã)", ylabel="", 
                         model_name="–ú–æ–¥–µ–ª—å"):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    ax.scatter(t_exp, y_exp, alpha=0.8, s=60, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    if t_range is not None and y_range is not None:
        ax.plot(t_range, y_range, 'r--', linewidth=2, label=model_name)
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    sorted_idx = np.argsort(t_exp)
    ax.plot(t_exp.iloc[sorted_idx], y_exp.iloc[sorted_idx], 'b:', alpha=0.5, label='–¢—Ä–µ–Ω–¥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    for i, (t_val, y_true, y_pred_val) in enumerate(zip(t_exp, y_exp, y_pred)):
        ax.plot([t_val, t_val], [y_true, y_pred_val], 'gray', alpha=0.3)
    
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    metrics = calculate_comprehensive_metrics(y_exp, y_pred)
    ax.text(0.02, 0.98, f"R¬≤ = {metrics['R¬≤']:.3f}\nRMSE = {metrics['RMSE']:.2f}", 
            transform=ax.transAxes, verticalalignment='top',
            bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd', 'f']
        
        if all(col in df.columns for col in required_cols):
            df_grain10 = df[df['G'] == target_grain].copy()
            
            if len(df_grain10) > 0:
                st.session_state['grain10_data'] = df_grain10
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10:")
                col1, col2, col3 = st.columns(3)
                with col1:
                    unique_temps = df_grain10['T'].unique()
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                with col2:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", f"{len(df_grain10)}")
                with col3:
                    st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{df_grain10['t'].min()}-{df_grain10['t'].max()} —á")
                
                st.dataframe(df_grain10.head(10))
                
            else:
                st.error(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'grain10_data' in st.session_state:
    df_grain10 = st.session_state['grain10_data']
    df_grain10['T_K'] = df_grain10['T'] + 273.15
    
    st.header("2. üìè –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ œÉ-—Ñ–∞–∑—ã")
    
    with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤"):
        st.markdown("""
        **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:** –†–æ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞ —á–∞—Å—Ç–∏—Ü œÉ-—Ñ–∞–∑—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        
        **–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:** 
        $$ d^n - d_0^n = K \\cdot t $$
        
        **–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:**
        - –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º n –≥—Ä–∞—Ñ–∏–∫ $d^n - d_0^n$ vs t –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–Ω–µ–π–Ω—ã–º
        - –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ R¬≤ –±–ª–∏–∑–∫–æ–º—É –∫ 1
        - –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ (–±–µ–∑ —Ç—Ä–µ–Ω–¥–∞)
        
        **–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
        - R¬≤ > 0.95 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
        - R¬≤ 0.90-0.95 - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ  
        - R¬≤ < 0.90 - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """)
    
    # –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.subheader("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n")
    
    n_min, n_max, n_step = 3.0, 5.0, 0.1
    n_candidates = np.arange(n_min, n_max + n_step, n_step)
    
    n_results = {}
    
    for n in n_candidates:
        k_values = []
        
        for temp in df_grain10['T'].unique():
            temp_data = df_grain10[df_grain10['T'] == temp]
            
            if len(temp_data) >= 2:
                d_transformed = temp_data['d']**n - initial_diameter**n
                
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        temp_data['t'], d_transformed
                    )
                    
                    if slope > 0:
                        # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–∏–∫
                        d_pred_transformed = slope * temp_data['t'] + intercept
                        d_pred = (d_pred_transformed + initial_diameter**n)**(1/n)
                        
                        metrics = calculate_comprehensive_metrics(temp_data['d'], d_pred)
                        
                        k_values.append({
                            'T': temp, 'T_K': temp + 273.15, 'K': slope,
                            'R2': r_value**2, 'std_err': std_err,
                            'n_points': len(temp_data), 'metrics': metrics
                        })
                except:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            overall_r2 = k_df['R2'].mean()
            n_results[n] = {
                'k_df': k_df, 'mean_R2': overall_r2,
                'min_R2': k_df['R2'].min(), 'n_temperatures': len(k_df)
            }
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–±–æ—Ä–∞ n
    if n_results:
        comparison_data = []
        for n, results in n_results.items():
            comparison_data.append({
                'n': n, '–°—Ä–µ–¥–Ω–∏–π R¬≤': results['mean_R2'],
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': results['min_R2'], 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        best_n_row = comparison_df.loc[comparison_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
        best_n = best_n_row['n']
        
        st.success(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: n = {best_n:.1f} (R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.3f})")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–î–ë–û–†–ê –î–õ–Ø –õ–£–ß–®–ï–ì–û n
        st.subheader(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è n = {best_n:.1f}")
        
        best_k_df = n_results[best_n]['k_df']
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        temps = sorted(df_grain10['T'].unique())
        n_cols = 2
        n_rows = (len(temps) + n_cols - 1) // n_cols
        
        fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5*n_rows))
        if n_rows == 1:
            axes = [axes] if n_cols == 1 else axes
        
        for idx, temp in enumerate(temps):
            if idx < n_rows * n_cols:
                row = idx // n_cols
                col = idx % n_cols
                
                if n_rows == 1:
                    ax = axes[col]
                else:
                    ax = axes[row, col]
                
                temp_data = df_grain10[df_grain10['T'] == temp]
                k_value = best_k_df[best_k_df['T'] == temp]['K'].iloc[0]
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max() * 1.2, 100)
                d_pred_range = (k_value * t_range + initial_diameter**best_n)**(1/best_n)
                
                d_pred_points = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
                
                plot_with_diagnostics(
                    ax, temp_data['t'], temp_data['d'], d_pred_points,
                    t_range, d_pred_range, 
                    title=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C',
                    ylabel='–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)',
                    model_name=f'–ú–æ–¥–µ–ª—å (n={best_n:.1f})'
                )
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
        for idx in range(len(temps), n_rows * n_cols):
            row = idx // n_cols
            col = idx % n_cols
            if n_rows == 1:
                axes[col].set_visible(False)
            else:
                axes[row, col].set_visible(False)
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
        
        all_actual = []
        all_predicted = []
        
        for temp in temps:
            temp_data = df_grain10[df_grain10['T'] == temp]
            k_value = best_k_df[best_k_df['T'] == temp]['K'].iloc[0]
            d_pred = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
            
            all_actual.extend(temp_data['d'])
            all_predicted.extend(d_pred)
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        residuals = np.array(all_actual) - np.array(all_predicted)
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        ax1.scatter(all_predicted, residuals, alpha=0.7)
        ax1.axhline(0, color='red', linestyle='--')
        ax1.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ (–º–∫–º)')
        ax1.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏ (–º–∫–º)')
        ax1.set_title('–û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤')
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ax2.scatter(all_actual, all_predicted, alpha=0.7)
        min_val = min(min(all_actual), min(all_predicted))
        max_val = max(max(all_actual), max(all_predicted))
        ax2.plot([min_val, max_val], [min_val, max_val], 'r--', label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ')
        ax2.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
        ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
        ax2.set_title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        st.pyplot(fig)
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.info("""
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∏–∞–º–µ—Ç—Ä–æ–≤:**
        
        ‚úÖ **–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
        - –¢–æ—á–∫–∏ –±–ª–∏–∑–∫–æ –∫ –ª–∏–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        - –û—Å—Ç–∞—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –≤–æ–∫—Ä—É–≥ –Ω—É–ª—è
        - R¬≤ > 0.9
        
        ‚ùå **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
        - –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–≤—Å–µ —Ç–æ—á–∫–∏ –≤—ã—à–µ/–Ω–∏–∂–µ –ª–∏–Ω–∏–∏)
        - –¢—Ä–µ–Ω–¥ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö
        - R¬≤ < 0.8
        
        **–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–ª–æ—Ö–∞—è:**
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω n
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ
        - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –º–æ–¥–µ–ª—å
        """)
        
        # –ê–Ω–∞–ª–∏–∑ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–æ–≤
        if len(best_k_df) >= 2:
            st.subheader("–ê—Ä—Ä–µ–Ω–∏—É—Å-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–æ–≤")
            
            x = 1 / best_k_df['T_K']
            y = np.log(best_k_df['K'])
            
            slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
            
            Q_diam = -slope * R
            K0_diam = np.exp(intercept)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ê—Ä—Ä–µ–Ω–∏—É—Å–∞
            fig, ax = plt.subplots(figsize=(10, 6))
            
            ax.scatter(x, y, s=100, alpha=0.7, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏')
            x_fit = np.linspace(x.min(), x.max(), 100)
            y_fit = slope * x_fit + intercept
            ax.plot(x_fit, y_fit, 'r--', linewidth=2,
                   label=f'–†–µ–≥—Ä–µ—Å—Å–∏—è: Q = {Q_diam:.0f} –î–∂/–º–æ–ª—å\nR¬≤ = {r_value**2:.4f}')
            
            ax.set_xlabel('1/T (1/K)')
            ax.set_ylabel('ln(K)')
            ax.set_title('–ê—Ä—Ä–µ–Ω–∏—É—Å –¥–ª—è –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–∏–∞–º–µ—Ç—Ä–æ–≤')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            st.session_state['diam_params'] = {
                'n': best_n, 'Q': Q_diam, 'K0': K0_diam, 'd0': initial_diameter,
                'arrhenius_R2': r_value**2
            }

    st.header("3. üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è œÉ-—Ñ–∞–∑—ã (JMAK-–º–æ–¥–µ–ª—å)")
    
    with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ JMAK-–∞–Ω–∞–ª–∏–∑–∞"):
        st.markdown("""
        **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:** –ö–∏–Ω–µ—Ç–∏–∫—É —Ñ–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ–ª—é œÉ-—Ñ–∞–∑—ã
        
        **JMAK-–º–æ–¥–µ–ª—å:** 
        $$ X(t) = X_\\infty \\cdot [1 - \\exp(-(k \\cdot t)^m)] $$
        
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        - k: —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
        - m: –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∑–∞—Ä–æ–∂–¥–µ–Ω–∏—è  
        - X‚àû: –ø—Ä–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã
        
        **–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:**
        - S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è —Ä–æ—Å—Ç–∞
        - –ù–∞—Å—ã—â–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω–∞—Ö
        - R¬≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ 1
        
        **–¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è m:**
        - m ‚âà 1: –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ä–æ–∂–¥–µ–Ω–∏—è
        - m ‚âà 1.5: –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –∑–∞—Ä–æ–∂–¥–µ–Ω–∏–µ
        """)
    
    # JMAK-–∞–Ω–∞–ª–∏–∑
    jmak_results = {}
    
    for temp in df_grain10['T'].unique():
        temp_data = df_grain10[df_grain10['T'] == temp]
        
        if len(temp_data) >= 3:
            try:
                popt, pcov = curve_fit(
                    lambda t, k, m, X_inf: 100 * (1 - np.exp(-(k * t) ** m)),
                    temp_data['t'], temp_data['f'],
                    p0=[0.001, 1.0, 100],
                    bounds=([1e-6, 0.1, 50], [1.0, 3.0, 150])
                )
                
                k_jmak, m_jmak, X_inf = popt
                y_pred = 100 * (1 - np.exp(-(k_jmak * temp_data['t']) ** m_jmak))
                metrics = calculate_comprehensive_metrics(temp_data['f'], y_pred)
                
                jmak_results[temp] = {
                    'k': k_jmak, 'm': m_jmak, 'X_inf': X_inf,
                    'R2': metrics['R¬≤'], 'metrics': metrics
                }
                
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ JMAK –¥–ª—è {temp}¬∞C: {e}")
    
    if jmak_results:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è JMAK –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        st.subheader("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ JMAK-–º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º")
        
        temps_jmak = sorted(jmak_results.keys())
        n_cols_jmak = 2
        n_rows_jmak = (len(temps_jmak) + n_cols_jmak - 1) // n_cols_jmak
        
        fig, axes = plt.subplots(n_rows_jmak, n_cols_jmak, figsize=(15, 5*n_rows_jmak))
        if n_rows_jmak == 1:
            axes = [axes] if n_cols_jmak == 1 else axes
        
        for idx, temp in enumerate(temps_jmak):
            if idx < n_rows_jmak * n_cols_jmak:
                row = idx // n_cols_jmak
                col = idx % n_cols_jmak
                
                if n_rows_jmak == 1:
                    ax = axes[col]
                else:
                    ax = axes[row, col]
                
                temp_data = df_grain10[df_grain10['T'] == temp]
                results = jmak_results[temp]
                
                # –†–∞—Å—á–µ—Ç JMAK-–∫—Ä–∏–≤–æ–π
                t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max() * 1.2, 100)
                y_pred_range = 100 * (1 - np.exp(-(results['k'] * t_range) ** results['m']))
                
                y_pred_points = 100 * (1 - np.exp(-(results['k'] * temp_data['t']) ** results['m']))
                
                plot_with_diagnostics(
                    ax, temp_data['t'], temp_data['f'], y_pred_points,
                    t_range, y_pred_range,
                    title=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C',
                    ylabel='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ œÉ-—Ñ–∞–∑—ã (%)',
                    model_name=f'JMAK (m={results["m"]:.2f})'
                )
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ JMAK
        st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ JMAK-–∞–Ω–∞–ª–∏–∑—É")
        
        jmak_summary = []
        for temp, results in jmak_results.items():
            jmak_summary.append({
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C': temp,
                'k': f"{results['k']:.6f}",
                'm': f"{results['m']:.2f}",
                'X‚àû': f"{results['X_inf']:.1f}%",
                'R¬≤': f"{results['R2']:.3f}",
                'RMSE': f"{results['metrics']['RMSE']:.2f}"
            })
        
        st.table(pd.DataFrame(jmak_summary))
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è JMAK-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.info("""
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è JMAK-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
        
        ‚úÖ **–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
        - R¬≤ > 0.95
        - m –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5-2.5
        - X‚àû —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω (~10-30% –¥–ª—è œÉ-—Ñ–∞–∑—ã)
        
        ‚ùå **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
        - R¬≤ < 0.8
        - m < 0.1 –∏–ª–∏ m > 3
        - X‚àû –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–∏–π/–Ω–∏–∑–∫–∏–π
        
        **–ï—Å–ª–∏ JMAK –ø–ª–æ—Ö–æ –ø–æ–¥—Ö–æ–¥–∏—Ç:**
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–æ—Å—ã
        - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JMAK-–º–æ–¥–µ–ª–∏
        - –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π JMAK-–∫–∏–Ω–µ—Ç–∏–∫–æ–π
        """)

    st.header("4. üéØ –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    
    if 'diam_params' in st.session_state:
        params = st.session_state['diam_params']
        
        col1, col2 = st.columns(2)
        with col1:
            d_obs = st.number_input("–ù–∞–±–ª—é–¥–∞–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä d (–º–∫–º)", value=5.0, min_value=0.1, step=0.1)
        with col2:
            t_obs = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ t (—á–∞—Å—ã)", value=5000, min_value=1, step=100)
        
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–æ –¥–∏–∞–º–µ—Ç—Ä—É"):
            k_obs = (d_obs**params['n'] - params['d0']**params['n']) / t_obs
            
            if k_obs > 0:
                denominator = R * (np.log(params['K0']) - np.log(k_obs))
                if denominator > 0:
                    T_K = params['Q'] / denominator
                    T_C = T_K - 273.15
                    
                    st.success(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {T_C:.1f}¬∞C**")
                    
                    # –û—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    st.info(f"""
                    **–û—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞:**
                    - R¬≤ –ê—Ä—Ä–µ–Ω–∏—É—Å–∞: {params['arrhenius_R2']:.3f}
                    - –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {params['Q']:.0f} –î–∂/–º–æ–ª—å
                    - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å n: {params['n']:.1f}
                    
                    {'‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è' if params['arrhenius_R2'] > 0.9 else '‚ö†Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —É–º–µ—Ä–µ–Ω–Ω–∞—è'}
                    """)
