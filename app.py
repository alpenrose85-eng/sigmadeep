import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
R = 8.314  # –î–∂/(–º–æ–ª—å¬∑–ö)

st.title("üî¨ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ œÉ-—Ñ–∞–∑—ã —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π")
st.markdown("""
**–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥–±–æ—Ä–∞:**
- –ü–æ–ª–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
- –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
- **–ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è œÉ-—Ñ–∞–∑—ã –ø–æ JMAK-–º–æ–¥–µ–ª–∏**
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                               type=['csv', 'xlsx', 'xls'])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
col1, col2 = st.columns(2)
with col1:
    initial_diameter = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ (–º–∫–º)", 
                                     value=0.1, min_value=0.0, step=0.1,
                                     help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.1-0.5 –º–∫–º)")
with col2:
    enable_phase_analysis = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (JMAK)", 
                                      value=True, 
                                      help="–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ñ–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é œÉ-—Ñ–∞–∑—ã")

target_grain = 10

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
def calculate_comprehensive_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    if len(y_true) == 0 or len(y_pred) == 0:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
    min_len = min(len(y_true), len(y_pred))
    y_true = y_true[:min_len]
    y_pred = y_pred[:min_len]
    
    try:
        metrics = {
            'R¬≤': r2_score(y_true, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_true, y_pred)),
            'MAE': mean_absolute_error(y_true, y_pred),
            'MAPE': np.mean(np.abs((y_true - y_pred) / np.where(y_true != 0, y_true, 1e-10))) * 100
        }
        return metrics
    except:
        return {'R¬≤': 0, 'RMSE': 0, 'MAE': 0, 'MAPE': 0}

def safe_plot_with_diagnostics(ax, t_exp, y_exp, y_pred, t_range=None, y_range=None, 
                              title="", xlabel="–í—Ä–µ–º—è (—á–∞—Å—ã)", ylabel="", 
                              model_name="–ú–æ–¥–µ–ª—å"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        # –û—á–∏—â–∞–µ–º –æ—Å–∏
        ax.clear()
        
        if len(t_exp) == 0 or len(y_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        valid_mask = ~np.isnan(t_exp) & ~np.isnan(y_exp) & ~np.isnan(y_pred)
        t_exp = t_exp[valid_mask]
        y_exp = y_exp[valid_mask]
        y_pred = y_pred[valid_mask]
        
        if len(t_exp) == 0:
            ax.text(0.5, 0.5, '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', transform=ax.transAxes, ha='center', va='center')
            ax.set_title(title)
            return
        
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
        ax.scatter(t_exp, y_exp, alpha=0.8, s=60, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ª–∏–Ω–∏—è)
        if t_range is not None and y_range is not None and len(t_range) > 0 and len(y_range) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã)
            if ylabel == '–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)':
                valid_range_mask = y_range > 0
                if np.any(valid_range_mask):
                    ax.plot(t_range[valid_range_mask], y_range[valid_range_mask], 'r--', 
                           linewidth=2, label=model_name)
            else:
                ax.plot(t_range, y_range, 'r--', linewidth=2, label=model_name)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
        sorted_idx = np.argsort(t_exp)
        ax.plot(t_exp.iloc[sorted_idx] if hasattr(t_exp, 'iloc') else t_exp[sorted_idx], 
               y_exp.iloc[sorted_idx] if hasattr(y_exp, 'iloc') else y_exp[sorted_idx], 
               'b:', alpha=0.5, label='–¢—Ä–µ–Ω–¥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏)
        for i in range(min(len(t_exp), len(y_exp), len(y_pred))):
            t_val = t_exp.iloc[i] if hasattr(t_exp, 'iloc') else t_exp[i]
            y_true = y_exp.iloc[i] if hasattr(y_exp, 'iloc') else y_exp[i]
            y_pred_val = y_pred.iloc[i] if hasattr(y_pred, 'iloc') else y_pred[i]
            ax.plot([t_val, t_val], [y_true, y_pred_val], 'gray', alpha=0.3, linewidth=1)
        
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        metrics = calculate_comprehensive_metrics(y_exp, y_pred)
        ax.text(0.02, 0.98, f"R¬≤ = {metrics['R¬≤']:.3f}\nRMSE = {metrics['RMSE']:.2f}", 
                transform=ax.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
                
    except Exception as e:
        ax.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è:\n{str(e)[:50]}...', 
                transform=ax.transAxes, ha='center', va='center', fontsize=8)
        ax.set_title(title)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è JMAK-–∞–Ω–∞–ª–∏–∑–∞
def jmak_model(t, k, n):
    """JMAK –º–æ–¥–µ–ª—å: X(t) = 1 - exp(-(k*t)^n)"""
    return 1 - np.exp(-(k * t) ** n)

def fit_jmak_model(time, f_phase, initial_n=1.0):
    """–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JMAK –º–æ–¥–µ–ª–∏"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–∏ (0-1)
    f_normalized = np.array(f_phase) / 100.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
    valid_mask = ~np.isnan(time) & ~np.isnan(f_normalized) & (f_normalized >= 0) & (f_normalized <= 1)
    time_valid = time[valid_mask]
    f_valid = f_normalized[valid_mask]
    
    if len(time_valid) < 2:
        return None, None, None
    
    try:
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        k_guess = 1.0 / np.mean(time_valid) if np.mean(time_valid) > 0 else 0.1
        
        # –ü–æ–¥–≥–æ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        popt, pcov = curve_fit(jmak_model, time_valid, f_valid, 
                              p0=[k_guess, initial_n],
                              bounds=([1e-6, 0.1], [10, 4]),
                              maxfev=5000)
        
        k_fit, n_fit = popt
        return k_fit, n_fit, pcov
    
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ JMAK –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        return None, None, None

def calculate_jmak_predictions(time, k, n):
    """–†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π JMAK –º–æ–¥–µ–ª–∏"""
    return jmak_model(time, k, n) * 100  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_cols = ['G', 'T', 't', 'd', 'f']
        
        if all(col in df.columns for col in required_cols):
            df_grain10 = df[df['G'] == target_grain].copy()
            
            if len(df_grain10) > 0:
                st.session_state['grain10_data'] = df_grain10
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10:")
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    unique_temps = df_grain10['T'].unique()
                    st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{len(unique_temps)} —É—Ä–æ–≤–Ω–µ–π")
                with col2:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫", f"{len(df_grain10)}")
                with col3:
                    st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{df_grain10['t'].min()}-{df_grain10['t'].max()} —á")
                with col4:
                    st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã", f"{df_grain10['f'].min():.1f}-{df_grain10['f'].max():.1f}%")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
                st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏")
                
                if (df_grain10['d'] <= 0).any():
                    st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã {sum(df_grain10['d'] <= 0)} —Ç–æ—á–µ–∫ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ –¥–∏–∞–º–µ—Ç—Ä–∞–º–∏")
                    st.write("–≠—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                
                if (df_grain10['f'] < 0).any() or (df_grain10['f'] > 100).any():
                    st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ—á–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Ñ–∞–∑—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100%")
                
                st.dataframe(df_grain10.head(10))
                
            else:
                st.error(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–µ—Ä–Ω–∞ ‚Ññ10")
        else:
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
if 'grain10_data' in st.session_state:
    df_grain10 = st.session_state['grain10_data']
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df_grain10_clean = df_grain10[(df_grain10['d'] > 0) & (df_grain10['f'] >= 0) & (df_grain10['f'] <= 100)].copy()
    
    if len(df_grain10_clean) < len(df_grain10):
        st.warning(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {len(df_grain10) - len(df_grain10_clean)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫")
        df_grain10 = df_grain10_clean
    
    df_grain10['T_K'] = df_grain10['T'] + 273.15
    
    st.header("2. üìè –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ œÉ-—Ñ–∞–∑—ã")
    
    with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤"):
        st.markdown("""
        **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:** –†–æ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞ —á–∞—Å—Ç–∏—Ü œÉ-—Ñ–∞–∑—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        
        **–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:** 
        $$ d^n - d_0^n = K \\cdot t $$
        
        **–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:**
        - –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º n –≥—Ä–∞—Ñ–∏–∫ $d^n - d_0^n$ vs t –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–Ω–µ–π–Ω—ã–º
        - –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ R¬≤ –±–ª–∏–∑–∫–æ–º—É –∫ 1
        - –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ (–±–µ–∑ —Ç—Ä–µ–Ω–¥–∞)
        
        **–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
        - R¬≤ > 0.95 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
        - R¬≤ 0.90-0.95 - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ  
        - R¬≤ < 0.90 - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """)
    
    # –ü–æ–¥–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n
    st.subheader("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω–∏ n")
    
    n_min, n_max, n_step = 3.0, 5.0, 0.1
    n_candidates = np.arange(n_min, n_max + n_step, n_step)
    
    n_results = {}
    available_temperatures = set()
    
    for n in n_candidates:
        k_values = []
        
        for temp in df_grain10['T'].unique():
            temp_data = df_grain10[df_grain10['T'] == temp]
            
            if len(temp_data) >= 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                d_transformed = temp_data['d']**n - initial_diameter**n
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ n
                if (d_transformed < 0).any():
                    continue
                
                try:
                    slope, intercept, r_value, p_value, std_err = stats.linregress(
                        temp_data['t'], d_transformed
                    )
                    
                    if slope > 0:
                        # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        d_pred_transformed = slope * temp_data['t'] + intercept
                        d_pred = (d_pred_transformed + initial_diameter**n)**(1/n)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                        if (d_pred > 0).all():
                            metrics = calculate_comprehensive_metrics(temp_data['d'].values, d_pred)
                            
                            k_values.append({
                                'T': temp, 'T_K': temp + 273.15, 'K': slope,
                                'R2': r_value**2, 'std_err': std_err,
                                'n_points': len(temp_data), 'metrics': metrics
                            })
                            available_temperatures.add(temp)
                except Exception as e:
                    continue
        
        if k_values:
            k_df = pd.DataFrame(k_values)
            overall_r2 = k_df['R2'].mean()
            n_results[n] = {
                'k_df': k_df, 'mean_R2': overall_r2,
                'min_R2': k_df['R2'].min(), 'n_temperatures': len(k_df)
            }
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–±–æ—Ä–∞ n
    if n_results:
        comparison_data = []
        for n, results in n_results.items():
            comparison_data.append({
                'n': n, '–°—Ä–µ–¥–Ω–∏–π R¬≤': results['mean_R2'],
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R¬≤': results['min_R2'], 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': results['n_temperatures']
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        
        if len(comparison_df) > 0:
            best_n_row = comparison_df.loc[comparison_df['–°—Ä–µ–¥–Ω–∏–π R¬≤'].idxmax()]
            best_n = best_n_row['n']
            
            st.success(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: n = {best_n:.1f} (R¬≤ = {best_n_row['–°—Ä–µ–¥–Ω–∏–π R¬≤']:.3f})")
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–î–ë–û–†–ê –î–õ–Ø –õ–£–ß–®–ï–ì–û n
            st.subheader(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è n = {best_n:.1f}")
            
            best_k_df = n_results[best_n]['k_df']
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –¥–∞–Ω–Ω—ã–º–∏
            temps_with_data = sorted(available_temperatures)
            
            if len(temps_with_data) > 0:
                n_cols = min(2, len(temps_with_data))
                n_rows = (len(temps_with_data) + n_cols - 1) // n_cols
                
                fig, axes = plt.subplots(n_rows, n_cols, figsize=(5*n_cols, 4*n_rows))
                
                # –î–µ–ª–∞–µ–º axes –≤—Å–µ–≥–¥–∞ –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if n_rows == 1 and n_cols == 1:
                    axes = np.array([[axes]])
                elif n_rows == 1:
                    axes = np.array([axes])
                elif n_cols == 1:
                    axes = axes.reshape(-1, 1)
                
                for idx, temp in enumerate(temps_with_data):
                    if idx < n_rows * n_cols:
                        row = idx // n_cols
                        col = idx % n_cols
                        
                        ax = axes[row, col]
                        temp_data = df_grain10[df_grain10['T'] == temp]
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ k_value
                        temp_k_data = best_k_df[best_k_df['T'] == temp]
                        if len(temp_k_data) > 0:
                            k_value = temp_k_data['K'].iloc[0]
                            
                            # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                            t_range = np.linspace(temp_data['t'].min(), temp_data['t'].max() * 1.2, 100)
                            d_pred_range = (k_value * t_range + initial_diameter**best_n)**(1/best_n)
                            
                            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                            d_pred_range = np.maximum(d_pred_range, 0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä 0.1 –º–∫–º
                            
                            d_pred_points = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
                            d_pred_points = np.maximum(d_pred_points, 0.1)
                            
                            safe_plot_with_diagnostics(
                                ax, temp_data['t'].values, temp_data['d'].values, d_pred_points,
                                t_range, d_pred_range, 
                                title=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C',
                                ylabel='–î–∏–∞–º–µ—Ç—Ä (–º–∫–º)',
                                model_name=f'–ú–æ–¥–µ–ª—å (n={best_n:.1f})'
                            )
                        else:
                            ax.text(0.5, 0.5, f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {temp}¬∞C', 
                                   transform=ax.transAxes, ha='center', va='center')
                            ax.set_title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C')
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
                for idx in range(len(temps_with_data), n_rows * n_cols):
                    row = idx // n_cols
                    col = idx % n_cols
                    axes[row, col].set_visible(False)
                
                plt.tight_layout()
                st.pyplot(fig)
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
                
                with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π"):
                    st.markdown("""
                    **–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (Residuals Plot):**
                    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    - **–ò–¥–µ–∞–ª—å–Ω–æ:** —Ç–æ—á–∫–∏ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –≤–æ–∫—Ä—É–≥ –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏
                    - **–ü—Ä–æ–±–ª–µ–º–∞:** –≤–∏–¥–∏–º—ã–π —Ç—Ä–µ–Ω–¥ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö
                    
                    **–ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ:**
                    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    - **–ò–¥–µ–∞–ª—å–Ω–æ:** —Ç–æ—á–∫–∏ –±–ª–∏–∑–∫–æ –∫ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
                    - –¶–≤–µ—Ç —Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                    """)
                
                all_actual = []
                all_predicted = []
                all_temperatures = []
                
                for temp in temps_with_data:
                    temp_data = df_grain10[df_grain10['T'] == temp]
                    temp_k_data = best_k_df[best_k_df['T'] == temp]
                    
                    if len(temp_k_data) > 0:
                        k_value = temp_k_data['K'].iloc[0]
                        d_pred = (k_value * temp_data['t'] + initial_diameter**best_n)**(1/best_n)
                        d_pred = np.maximum(d_pred, 0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        
                        all_actual.extend(temp_data['d'].values)
                        all_predicted.extend(d_pred)
                        all_temperatures.extend([temp] * len(temp_data))
                
                if len(all_actual) > 0:
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                    
                    residuals = np.array(all_actual) - np.array(all_predicted)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    ax1.scatter(all_predicted, residuals, alpha=0.7)
                    ax1.axhline(0, color='red', linestyle='--', label='–ù—É–ª–µ–≤–∞—è –æ—à–∏–±–∫–∞')
                    ax1.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ (–º–∫–º)')
                    ax1.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏ = –§–∞–∫—Ç - –ü—Ä–æ–≥–Ω–æ–∑ (–º–∫–º)')
                    ax1.set_title('–û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤\n(—á–µ–º –±–ª–∏–∂–µ –∫ –Ω—É–ª—é - —Ç–µ–º –ª—É—á—à–µ)')
                    ax1.legend()
                    ax1.grid(True, alpha=0.3)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    scatter = ax2.scatter(all_actual, all_predicted, alpha=0.7, 
                                        c=all_temperatures, cmap='viridis', s=60)
                    min_val = min(min(all_actual), min(all_predicted))
                    max_val = max(max(all_actual), max(all_predicted))
                    ax2.plot([min_val, max_val], [min_val, max_val], 'r--', 
                            linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ')
                    ax2.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã (–º–∫–º)')
                    ax2.set_title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n(—á–µ–º –±–ª–∏–∂–µ –∫ –ª–∏–Ω–∏–∏ - —Ç–µ–º –ª—É—á—à–µ)')
                    ax2.legend()
                    ax2.grid(True, alpha=0.3)
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                    cbar = plt.colorbar(scatter, ax=ax2)
                    cbar.set_label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
                    
                    plt.tight_layout()
                    st.pyplot(fig)
                    
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    overall_metrics = calculate_comprehensive_metrics(np.array(all_actual), np.array(all_predicted))
                    st.info(f"""
                    **üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤:**
                    - **R¬≤ = {overall_metrics['R¬≤']:.3f}** - –¥–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                    - **RMSE = {overall_metrics['RMSE']:.2f} –º–∫–º** - —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    - **MAE = {overall_metrics['MAE']:.2f} –º–∫–º** - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                    - **MAPE = {overall_metrics['MAPE']:.1f}%** - —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                    
                    **üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:**
                    { '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.95 else 
                      'üü° –•–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.85 else 
                      'üü† –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_metrics['R¬≤'] > 0.7 else 
                      'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'}
                    """)

    # –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è œÉ-—Ñ–∞–∑—ã –ø–æ JMAK-–º–æ–¥–µ–ª–∏
    if enable_phase_analysis:
        st.header("3. üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è œÉ-—Ñ–∞–∑—ã (JMAK-–º–æ–¥–µ–ª—å)")
        
        with st.expander("üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ JMAK-–∞–Ω–∞–ª–∏–∑–∞"):
            st.markdown("""
            **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:** –ö–∏–Ω–µ—Ç–∏–∫—É —Ñ–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –æ–±—ä–µ–º–Ω–æ–π –¥–æ–ª–∏ œÉ-—Ñ–∞–∑—ã
            
            **–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å (Johnson-Mehl-Avrami-Kolmogorov):**
            $$ X(t) = 1 - \\exp\\left(-(k \\cdot t)^n\\right) $$
            
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:**
            - **k** - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            - **n** - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ê–≤—Ä–∞–º–∏ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è)
            
            **–¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è n:**
            - n ‚âà 1 - –Ω–∞—Å—ã—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ –∑–∞—Ä–æ–∂–¥–µ–Ω–∏—è
            - n ‚âà 2-4 - –∑–∞—Ä–æ–∂–¥–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç (–¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å)
            
            **–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
            - R¬≤ > 0.95 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
            - –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏
            - –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ö–æ—Ä–æ—à–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å S-–æ–±—Ä–∞–∑–Ω—É—é –∫—Ä–∏–≤—É—é
            """)
        
        # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JMAK –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        st.subheader("–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JMAK-–º–æ–¥–µ–ª–∏")
        
        jmak_results = {}
        all_phase_actual = []
        all_phase_predicted = []
        all_phase_temperatures = []
        
        for temp in df_grain10['T'].unique():
            temp_data = df_grain10[df_grain10['T'] == temp].copy()
            
            if len(temp_data) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
                k_fit, n_fit, pcov = fit_jmak_model(temp_data['t'].values, temp_data['f'].values)
                
                if k_fit is not None and n_fit is not None:
                    # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    f_pred = calculate_jmak_predictions(temp_data['t'].values, k_fit, n_fit)
                    metrics = calculate_comprehensive_metrics(temp_data['f'].values, f_pred)
                    
                    jmak_results[temp] = {
                        'k': k_fit, 'n': n_fit, 'metrics': metrics,
                        'data': temp_data, 'predictions': f_pred
                    }
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    all_phase_actual.extend(temp_data['f'].values)
                    all_phase_predicted.extend(f_pred)
                    all_phase_temperatures.extend([temp] * len(temp_data))
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ JMAK
        if jmak_results:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_data = []
            for temp, results in jmak_results.items():
                results_data.append({
                    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)': temp,
                    'k (—á‚Åª¬π)': results['k'],
                    'n': results['n'],
                    'R¬≤': results['metrics']['R¬≤'],
                    'RMSE': results['metrics']['RMSE'],
                    'MAPE': results['metrics']['MAPE']
                })
            
            results_df = pd.DataFrame(results_data)
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã JMAK-–º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º")
            st.dataframe(results_df.style.format({
                'k (—á‚Åª¬π)': '{:.4f}',
                'n': '{:.3f}',
                'R¬≤': '{:.3f}',
                'RMSE': '{:.2f}',
                'MAPE': '{:.1f}'
            }))
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è JMAK-–ø–æ–¥–±–æ—Ä–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º")
            
            temps_jmak = sorted(jmak_results.keys())
            n_cols = min(2, len(temps_jmak))
            n_rows = (len(temps_jmak) + n_cols - 1) // n_cols
            
            fig, axes = plt.subplots(n_rows, n_cols, figsize=(5*n_cols, 4*n_rows))
            
            if n_rows == 1 and n_cols == 1:
                axes = np.array([[axes]])
            elif n_rows == 1:
                axes = np.array([axes])
            elif n_cols == 1:
                axes = axes.reshape(-1, 1)
            
            for idx, temp in enumerate(temps_jmak):
                if idx < n_rows * n_cols:
                    row = idx // n_cols
                    col = idx % n_cols
                    
                    ax = axes[row, col]
                    results = jmak_results[temp]
                    temp_data = results['data']
                    
                    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                    ax.scatter(temp_data['t'], temp_data['f'], alpha=0.8, s=60, 
                              label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', color='blue')
                    
                    # JMAK –∫—Ä–∏–≤–∞—è
                    t_range = np.linspace(0, temp_data['t'].max() * 1.2, 100)
                    f_range = calculate_jmak_predictions(t_range, results['k'], results['n'])
                    ax.plot(t_range, f_range, 'r--', linewidth=2, 
                           label=f'JMAK (k={results["k"]:.3f}, n={results["n"]:.2f})')
                    
                    ax.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
                    ax.set_ylabel('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
                    ax.set_title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C\nR¬≤ = {results["metrics"]["R¬≤"]:.3f}')
                    ax.legend()
                    ax.grid(True, alpha=0.3)
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
            for idx in range(len(temps_jmak), n_rows * n_cols):
                row = idx // n_cols
                col = idx % n_cols
                axes[row, col].set_visible(False)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π JMAK –º–æ–¥–µ–ª–∏
            if len(all_phase_actual) > 0:
                st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π JMAK-–º–æ–¥–µ–ª–∏")
                
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                
                residuals = np.array(all_phase_actual) - np.array(all_phase_predicted)
                
                # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                ax1.scatter(all_phase_predicted, residuals, alpha=0.7)
                ax1.axhline(0, color='red', linestyle='--', label='–ù—É–ª–µ–≤–∞—è –æ—à–∏–±–∫–∞')
                ax1.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∞–∑—ã (%)')
                ax1.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏ = –§–∞–∫—Ç - –ü—Ä–æ–≥–Ω–æ–∑ (%)')
                ax1.set_title('–û—Å—Ç–∞—Ç–∫–∏ JMAK-–º–æ–¥–µ–ª–∏\n(—á–µ–º –±–ª–∏–∂–µ –∫ –Ω—É–ª—é - —Ç–µ–º –ª—É—á—à–µ)')
                ax1.legend()
                ax1.grid(True, alpha=0.3)
                
                # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                scatter = ax2.scatter(all_phase_actual, all_phase_predicted, alpha=0.7, 
                                    c=all_phase_temperatures, cmap='viridis', s=60)
                ax2.plot([0, 100], [0, 100], 'r--', linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ')
                ax2.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
                ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–∑—ã (%)')
                ax2.set_title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\nJMAK-–º–æ–¥–µ–ª–∏')
                ax2.legend()
                ax2.grid(True, alpha=0.3)
                
                cbar = plt.colorbar(scatter, ax=ax2)
                cbar.set_label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
                
                plt.tight_layout()
                st.pyplot(fig)
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JMAK
                overall_phase_metrics = calculate_comprehensive_metrics(
                    np.array(all_phase_actual), np.array(all_phase_predicted)
                )
                
                st.info(f"""
                **üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JMAK-–º–æ–¥–µ–ª–∏:**
                - **R¬≤ = {overall_phase_metrics['R¬≤']:.3f}** - –¥–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                - **RMSE = {overall_phase_metrics['RMSE']:.2f}%** - —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                - **MAE = {overall_phase_metrics['MAE']:.2f}%** - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                - **MAPE = {overall_phase_metrics['MAPE']:.1f}%** - —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                
                **üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:**
                { '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_phase_metrics['R¬≤'] > 0.95 else 
                  'üü° –•–æ—Ä–æ—à–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_phase_metrics['R¬≤'] > 0.85 else 
                  'üü† –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ' if overall_phase_metrics['R¬≤'] > 0.7 else 
                  'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'}
                """)
        
        else:
            st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã JMAK-–º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏")

st.markdown("""
**–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (R¬≤ < 0.8):**

1. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:**
   - –ù–µ—Ç –ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–∞–º–µ—Ç—Ä–æ–≤
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–æ—Å—ã

2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä d‚ÇÄ
   - –†–∞—Å—à–∏—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ n
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

3. **–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
   - –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—ã
   - –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JMAK-–º–æ–¥–µ–ª–∏
   - –£—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

**–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö:** –≠—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º –∏ –º–æ–¥–µ–ª—å—é, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã!
- –û—Å—Ç–∞—Ç–æ–∫ = –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–º–µ—Ç—Ä - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä
- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–ª–∞ –¥–∏–∞–º–µ—Ç—Ä
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - –º–æ–¥–µ–ª—å –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–ª–∞ –¥–∏–∞–º–µ—Ç—Ä

**–î–ª—è JMAK-–∞–Ω–∞–ª–∏–∑–∞:**
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –≤—Å—é S-–æ–±—Ä–∞–∑–Ω—É—é –∫—Ä–∏–≤—É—é
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ n
- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ n –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
""")
