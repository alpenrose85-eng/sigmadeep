import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
import seaborn as sns
import io
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ì–û–°–¢ 5639-82
grain_data = {
    'grain_size': [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    'grain_area': [1.0, 0.5, 0.25, 0.125, 0.0625, 0.0312, 0.0156, 0.00781, 0.00390, 
                   0.00195, 0.00098, 0.00049, 0.000244, 0.000122, 0.000061, 0.000030, 
                   0.000015, 0.000008],
    'grain_diameter': [0.875, 0.650, 0.444, 0.313, 0.222, 0.157, 0.111, 0.0783, 0.0553,
                       0.0391, 0.0267, 0.0196, 0.0138, 0.0099, 0.0069, 0.0049, 0.0032, 0.0027]
}

grain_df = pd.DataFrame(grain_data)

# –ú–æ–¥–µ–ª–∏ —Ä–æ—Å—Ç–∞
def basic_growth_model(t, k, n, d0=0):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞: d = d0 + k * t^n"""
    return d0 + k * (t ** n)

def enhanced_growth_model(t, k, n, grain_area, alpha=0.5, d0=0):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ –∑–µ—Ä–Ω–∞: d = d0 + k * (1 + alpha/grain_area) * t^n"""
    boundary_effect = 1 + alpha / grain_area
    return d0 + k * boundary_effect * (t ** n)

def universal_growth_model(X, k, n, beta, d0=0):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω: d = d0 + k * (1 + beta/grain_area) * t^n"""
    t, grain_area = X[:, 0], X[:, 1]
    boundary_effect = 1 + beta / grain_area
    return d0 + k * boundary_effect * (t ** n)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
def calculate_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    r2 = r2_score(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    
    return {
        'R¬≤': r2,
        'RMSE': rmse,
        'MAE': mae,
        'MAPE': mape
    }

def plot_residuals(y_true, y_pred, title):
    """–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    residuals = y_true - y_pred
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
    ax1.hist(residuals, bins=20, alpha=0.7, edgecolor='black')
    ax1.axvline(0, color='red', linestyle='--', linewidth=2)
    ax1.set_xlabel('–û—Å—Ç–∞—Ç–∫–∏')
    ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax1.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤\n{title}')
    ax1.grid(True, alpha=0.3)
    
    # –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    ax2.scatter(y_pred, residuals, alpha=0.7)
    ax2.axhline(0, color='red', linestyle='--', linewidth=2)
    ax2.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    ax2.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
    ax2.set_title('–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    ax2.grid(True, alpha=0.3)
    
    return fig

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Streamlit
st.title("üìä –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ œÉ-—Ñ–∞–∑—ã —Å –ø–æ–¥–±–æ—Ä–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
def create_template():
    template_data = {
        'G': [7, 7, 7, 7, 5, 5, 5, 5, 3, 3, 3, 3],
        'T': [600, 600, 600, 600, 650, 650, 650, 650, 700, 700, 700, 700],
        't': [2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000, 2000, 4000, 6000, 8000],
        'd': [2.1, 3.0, 3.6, 4.1, 3.5, 4.8, 5.8, 6.5, 5.2, 7.1, 8.5, 9.6]
    }
    return pd.DataFrame(template_data)

template_df = create_template()
excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
    template_df.to_excel(writer, sheet_name='–®–∞–±–ª–æ–Ω_–¥–∞–Ω–Ω—ã—Ö', index=False)
excel_buffer.seek(0)

st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel",
    data=excel_buffer,
    file_name="—à–∞–±–ª–æ–Ω_–¥–∞–Ω–Ω—ã—Ö_—Å–∏–≥–º–∞_—Ñ–∞–∑–∞.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['csv', 'xlsx', 'xls'])

df = None
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        if all(col in df.columns for col in ['G', 'T', 't', 'd']):
            st.session_state['experimental_data'] = df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            st.dataframe(df.head())
        else:
            st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: G, T, t, d")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
if 'experimental_data' in st.session_state:
    df = st.session_state['experimental_data']
    df_enriched = df.merge(grain_df, left_on='G', right_on='grain_size', how='left')
    
    st.header("2. –ü–æ–¥–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
        ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–µ—Ä–Ω–∞", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω"]
    )
    
    if model_type == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–µ—Ä–Ω–∞":
        st.subheader("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞")
        
        individual_results = {}
        
        for grain_size in sorted(df['G'].unique()):
            st.markdown(f"### üîç –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}")
            
            grain_data = df[df['G'] == grain_size]
            grain_area = grain_df[grain_df['grain_size'] == grain_size]['grain_area'].iloc[0]
            
            if len(grain_data) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
                # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                try:
                    popt, pcov = curve_fit(basic_growth_model, 
                                         grain_data['t'], 
                                         grain_data['d'],
                                         p0=[0.1, 0.5],
                                         bounds=([0, 0], [10, 2]))
                    
                    k_opt, n_opt = popt
                    y_pred = basic_growth_model(grain_data['t'], k_opt, n_opt)
                    metrics = calculate_metrics(grain_data['d'], y_pred)
                    
                    individual_results[grain_size] = {
                        'k': k_opt,
                        'n': n_opt,
                        'grain_area': grain_area,
                        'metrics': metrics,
                        'predictions': y_pred
                    }
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:**")
                        st.write(f"- k = {k_opt:.4f}")
                        st.write(f"- n = {n_opt:.4f}")
                        st.write(f"- –ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞ = {grain_area:.6f} –º–º¬≤")
                    
                    with col2:
                        st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**")
                        for metric, value in metrics.items():
                            st.write(f"- {metric} = {value:.4f}")
                    
                    # –ì—Ä–∞—Ñ–∏–∫
                    fig, ax = plt.subplots(figsize=(10, 6))
                    
                    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                    ax.scatter(grain_data['t'], grain_data['d'], color='blue', 
                              label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', s=80, alpha=0.7)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                    t_range = np.linspace(grain_data['t'].min(), grain_data['t'].max(), 100)
                    d_pred_range = basic_growth_model(t_range, k_opt, n_opt)
                    ax.plot(t_range, d_pred_range, 'r-', label='–ú–æ–¥–µ–ª—å', linewidth=2)
                    
                    # –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–∫–∏ –ª–∏–Ω–∏—è–º–∏
                    sorted_indices = np.argsort(grain_data['t'])
                    ax.plot(grain_data['t'].iloc[sorted_indices], 
                           grain_data['d'].iloc[sorted_indices], 
                           'b--', alpha=0.5)
                    
                    ax.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
                    ax.set_ylabel('–î–∏–∞–º–µ—Ç—Ä œÉ-—Ñ–∞–∑—ã (–º–∫–º)')
                    ax.set_title(f'–ú–æ–¥–µ–ª—å —Ä–æ—Å—Ç–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}\n'
                                f'R¬≤ = {metrics["R¬≤"]:.3f}, RMSE = {metrics["RMSE"]:.3f}')
                    ax.legend()
                    ax.grid(True, alpha=0.3)
                    
                    st.pyplot(fig)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    resid_fig = plot_residuals(grain_data['d'], y_pred, f'–ó–µ—Ä–Ω–æ {grain_size}')
                    st.pyplot(resid_fig)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size}: {e}")
            else:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–µ—Ä–Ω–∞ {grain_size} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏)")
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∑–µ—Ä–Ω–∞–º
        if individual_results:
            st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π")
            
            summary_data = []
            for grain_size, results in individual_results.items():
                summary_data.append({
                    '–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞': grain_size,
                    '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞': results['grain_area'],
                    'k': results['k'],
                    'n': results['n'],
                    'R¬≤': results['metrics']['R¬≤'],
                    'RMSE': results['metrics']['RMSE'],
                    'MAE': results['metrics']['MAE']
                })
            
            summary_df = pd.DataFrame(summary_data)
            st.dataframe(summary_df.style.format({
                '–ü–ª–æ—â–∞–¥—å –∑–µ—Ä–Ω–∞': '{:.6f}',
                'k': '{:.4f}',
                'n': '{:.4f}',
                'R¬≤': '{:.4f}',
                'RMSE': '{:.4f}',
                'MAE': '{:.4f}'
            }))
            
            st.session_state['individual_results'] = individual_results
    
    else:  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = df_enriched[['t', 'grain_area']].values
        y = df_enriched['d'].values
        
        try:
            # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            popt, pcov = curve_fit(universal_growth_model, X, y,
                                 p0=[0.1, 0.5, 0.1],
                                 bounds=([0, 0, 0], [10, 2, 10]))
            
            k_uni, n_uni, beta_uni = popt
            y_pred_uni = universal_growth_model(X, k_uni, n_uni, beta_uni)
            metrics_uni = calculate_metrics(y, y_pred_uni)
            
            # –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:**")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("k", f"{k_uni:.4f}")
            with col2:
                st.metric("n", f"{n_uni:.4f}")
            with col3:
                st.metric("Œ≤", f"{beta_uni:.4f}")
            
            st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**")
            metrics_cols = st.columns(4)
            for i, (metric, value) in enumerate(metrics_uni.items()):
                with metrics_cols[i]:
                    st.metric(metric, f"{value:.4f}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            fig, ax = plt.subplots(figsize=(10, 6))
            
            colors = plt.cm.viridis(np.linspace(0, 1, len(df_enriched['G'].unique())))
            
            for i, grain_size in enumerate(df_enriched['G'].unique()):
                mask = df_enriched['G'] == grain_size
                subset = df_enriched[mask]
                pred_subset = y_pred_uni[mask]
                
                ax.scatter(subset['d'], pred_subset, 
                          color=colors[i], label=f'–ó–µ—Ä–Ω–æ {grain_size}', 
                          s=80, alpha=0.7)
            
            # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            min_val = min(df_enriched['d'].min(), y_pred_uni.min())
            max_val = max(df_enriched['d'].max(), y_pred_uni.max())
            ax.plot([min_val, max_val], [min_val, max_val], 'r--', 
                   label='–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ', linewidth=2)
            
            ax.set_xlabel('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∫–º)')
            ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∫–º)')
            ax.set_title(f'–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç\n'
                        f'R¬≤ = {metrics_uni["R¬≤"]:.3f}')
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
            # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
            resid_fig = plot_residuals(y, y_pred_uni, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
            st.pyplot(resid_fig)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π")
            
            comparison_df = df_enriched[['G', 'T', 't', 'd']].copy()
            comparison_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'] = y_pred_uni
            comparison_df['–û—à–∏–±–∫–∞'] = comparison_df['d'] - comparison_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ']
            comparison_df['|–û—à–∏–±–∫–∞|'] = np.abs(comparison_df['–û—à–∏–±–∫–∞'])
            
            st.dataframe(comparison_df.style.format({
                'd': '{:.2f}',
                '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ': '{:.2f}',
                '–û—à–∏–±–∫–∞': '{:.3f}',
                '|–û—à–∏–±–∫–∞|': '{:.3f}'
            }).background_gradient(subset=['|–û—à–∏–±–∫–∞|'], cmap='Reds'))
            
            st.session_state['universal_results'] = {
                'k': k_uni, 'n': n_uni, 'beta': beta_uni,
                'metrics': metrics_uni, 'predictions': y_pred_uni
            }
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
    
    # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("3. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if st.button("üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
        output_buffer = io.BytesIO()
        
        with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
            # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df_enriched.to_excel(writer, sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
            if 'individual_results' in st.session_state:
                ind_results = []
                for grain_size, results in st.session_state['individual_results'].items():
                    ind_results.append({
                        '–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞': grain_size,
                        'k': results['k'],
                        'n': results['n'],
                        '–ü–ª–æ—â–∞–¥—å_–∑–µ—Ä–Ω–∞': results['grain_area'],
                        'R2': results['metrics']['R¬≤'],
                        'RMSE': results['metrics']['RMSE'],
                        'MAE': results['metrics']['MAE'],
                        'MAPE': results['metrics']['MAPE']
                    })
                pd.DataFrame(ind_results).to_excel(writer, sheet_name='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–º–æ–¥–µ–ª–∏', index=False)
            
            if 'universal_results' in st.session_state:
                uni_results = pd.DataFrame([st.session_state['universal_results']])
                uni_results.to_excel(writer, sheet_name='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è_–º–æ–¥–µ–ª—å', index=False)
            
            # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            if 'universal_results' in st.session_state:
                comparison_df.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_–∑–Ω–∞—á–µ–Ω–∏–π', index=False)
        
        output_buffer.seek(0)
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel",
            data=output_buffer,
            file_name="–æ—Ç—á–µ—Ç_–º–æ–¥–µ–ª–∏_—Å–∏–≥–º–∞_—Ñ–∞–∑–∞.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
with st.expander("‚ÑπÔ∏è –û —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö"):
    st.markdown("""
    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏:**
    
    1. **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–µ—Ä–Ω–∞:**
       ```
       d = k ¬∑ t‚Åø
       ```
       - –ü–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã k, n –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞
       - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–∏–Ω–µ—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä
    
    2. **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–µ—Ä–µ–Ω:**
       ```
       d = k ¬∑ (1 + Œ≤/a_i) ¬∑ t‚Åø
       ```
       - –ï–¥–∏–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã k, n, Œ≤ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
       - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç Œ≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –∑–µ—Ä–µ–Ω —á–µ—Ä–µ–∑ –ø–ª–æ—â–∞–¥—å a_i
       - –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    
    **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**
    - **R¬≤**: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (–±–ª–∏–∂–µ –∫ 1 = –ª—É—á—à–µ)
    - **RMSE**: –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    - **MAE**: –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞  
    - **MAPE**: –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    """)
