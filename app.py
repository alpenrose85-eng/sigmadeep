import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import stats
from sklearn.ensemble import IsolationForest
from sklearn.covariance import EllipticEnvelope
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.metrics import r2_score, mean_squared_error
import pickle
import json
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–º–∞-—Ñ–∞–∑—ã",
    page_icon="üî¨",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∏–Ω–µ—Ç–∏–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤ —Å—Ç–∞–ª–∏ 12–•18–ù12–¢")
st.markdown("""
### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å–∏–≥–º–∞-—Ñ–∞–∑—ã, –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä—É –∑–µ—Ä–Ω–∞
""")

class OutlierDetector:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def detect_iqr(data, multiplier=1.5):
        """–ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ (IQR)"""
        Q1 = np.percentile(data, 25)
        Q3 = np.percentile(data, 75)
        IQR = Q3 - Q1
        lower_bound = Q1 - multiplier * IQR
        upper_bound = Q3 + multiplier * IQR
        
        outliers = data[(data < lower_bound) | (data > upper_bound)]
        clean_data = data[(data >= lower_bound) & (data <= upper_bound)]
        
        return outliers, clean_data
    
    @staticmethod
    def detect_isolation_forest(features, contamination=0.1):
        """Isolation Forest –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤"""
        clf = IsolationForest(contamination=contamination, random_state=42)
        labels = clf.fit_predict(features)
        return labels

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å KJMA —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
def sigma_phase_model(params, G, T, t):
    """
    –ú–æ–¥–µ–ª—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è KJMA 
    —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∑–µ—Ä–Ω–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    K0, a, b, n, T_sigma_min, T_sigma_max = params
    R = 8.314  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö)
    T_min = T_sigma_min + 273.15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã
    T_max = T_sigma_max + 273.15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    T_eff = np.where(T < T_min, T_min, T)
    T_eff = np.where(T_eff > T_max, T_max, T_eff)
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (—Å–∏–≥–º–æ–∏–¥–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞)
    temp_factor = 1 / (1 + np.exp(-0.1 * (T - (T_min + 50)))) * 1 / (1 + np.exp(0.1 * (T - (T_max - 50))))
    
    Q = a + b * G
    K = K0 * np.exp(-Q / (R * T_eff)) * temp_factor
    
    sigma = 1 - np.exp(-K * (t ** n))
    return sigma

class SigmaPhaseAnalyzer:
    def __init__(self):
        self.params = None
        self.R2 = None
        self.rmse = None
        self.outlier_info = None
        self.original_data = None
        self.clean_data = None
        self.model_version = "1.1"
        self.creation_date = datetime.now().isoformat()
        self.last_modified = datetime.now().isoformat()
        
    def detect_outliers(self, data, method='iqr', contamination=0.1):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        features = data[['–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K', '–í—Ä–µ–º—è_—á', '–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç']].values
        
        if method == 'iqr':
            # –ü—Ä–∏–º–µ–Ω—è–µ–º IQR –∫ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            outlier_flags = np.zeros(len(data), dtype=bool)
            
            for i, col in enumerate(['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç', '–í—Ä–µ–º—è_—á', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K']):
                values = data[col].values
                Q1 = np.percentile(values, 25)
                Q3 = np.percentile(values, 75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                
                col_outliers = (values < lower_bound) | (values > upper_bound)
                outlier_flags = outlier_flags | col_outliers
            
        elif method == 'isolation_forest':
            labels = OutlierDetector.detect_isolation_forest(features, contamination)
            outlier_flags = labels == -1
        
        elif method == 'residual':
            # –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø–æ–¥–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
            return None, data
        
        outlier_data = data[outlier_flags]
        clean_data = data[~outlier_flags]
        
        return outlier_data, clean_data
    
    def fit_model(self, data, remove_outliers=True, outlier_method='iqr', contamination=0.1):
        """–ü–æ–¥–≥–æ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤"""
        try:
            self.last_modified = datetime.now().isoformat()
            self.original_data = data.copy()
            
            if remove_outliers:
                outlier_data, clean_data = self.detect_outliers(data, outlier_method, contamination)
                self.clean_data = clean_data
                self.outlier_info = {
                    'outlier_data': outlier_data,
                    'method': outlier_method,
                    'contamination': contamination,
                    'outlier_count': len(outlier_data) if outlier_data is not None else 0,
                    'total_count': len(data)
                }
            else:
                self.clean_data = data
                self.outlier_info = {
                    'outlier_data': None,
                    'method': 'none',
                    'outlier_count': 0,
                    'total_count': len(data)
                }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏
            G = self.clean_data['–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞'].values
            T = self.clean_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'].values
            t = self.clean_data['–í—Ä–µ–º—è_—á'].values
            sigma_exp = self.clean_data['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'].values / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è % –≤ –¥–æ–ª–∏
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ guess-–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            initial_guess = [1e10, 200000, 10000, 1.0, 550.0, 900.0]  # [K0, a, b, n, T_min_C, T_max_C]
            
            # –ì—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            bounds = (
                [1e5, 100000, 0, 0.1, 500.0, 850.0],    # –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
                [1e15, 500000, 50000, 4.0, 600.0, 950.0] # –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
            )
            
            # –ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.params, _ = curve_fit(
                lambda x, K0, a, b, n, T_min, T_max: sigma_phase_model([K0, a, b, n, T_min, T_max], G, T, t),
                np.arange(len(G)), sigma_exp,
                p0=initial_guess,
                bounds=bounds,
                maxfev=10000
            )
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            sigma_pred = sigma_phase_model(self.params, G, T, t) * 100  # –û–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            sigma_exp_percent = sigma_exp * 100
            self.R2 = r2_score(sigma_exp_percent, sigma_pred)
            self.rmse = np.sqrt(mean_squared_error(sigma_exp_percent, sigma_pred))
            
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
            if remove_outliers and outlier_method == 'residual':
                residuals = np.abs(sigma_pred - sigma_exp_percent)
                residual_threshold = np.mean(residuals) + 2 * np.std(residuals)
                residual_outliers = residuals > residual_threshold
                
                if np.any(residual_outliers):
                    outlier_data_residual = self.clean_data[residual_outliers]
                    clean_data_residual = self.clean_data[~residual_outliers]
                    
                    # –ü–µ—Ä–µ–ø–æ–¥–≥–æ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
                    G_clean = clean_data_residual['–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞'].values
                    T_clean = clean_data_residual['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'].values
                    t_clean = clean_data_residual['–í—Ä–µ–º—è_—á'].values
                    sigma_exp_clean = clean_data_residual['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'].values / 100.0
                    
                    self.params, _ = curve_fit(
                        lambda x, K0, a, b, n, T_min, T_max: sigma_phase_model([K0, a, b, n, T_min, T_max], G_clean, T_clean, t_clean),
                        np.arange(len(G_clean)), sigma_exp_clean,
                        p0=self.params,
                        bounds=bounds,
                        maxfev=10000
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–æ—Å–∞—Ö
                    self.outlier_info['outlier_data'] = outlier_data_residual
                    self.outlier_info['outlier_count'] = len(outlier_data_residual)
                    self.clean_data = clean_data_residual
            
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ–Ω–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
            return False
    
    def predict_temperature(self, G, sigma_percent, t):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        if self.params is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
        
        K0, a, b, n, T_sigma_min, T_sigma_max = self.params
        R = 8.314
        sigma = sigma_percent / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è % –≤ –¥–æ–ª–∏
        
        try:
            Q = a + b * G
            term = -np.log(1 - sigma) / (K0 * (t ** n))
            if term <= 0:
                return None
            
            T = -Q / (R * np.log(term))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            T_min_K = T_sigma_min + 273.15
            T_max_K = T_sigma_max + 273.15
            
            if T < T_min_K:
                return T_min_K - 273.15
            elif T > T_max_K:
                return T_max_K - 273.15
            else:
                return T - 273.15
                
        except:
            return None
    
    def plot_results_with_outliers(self, data):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–æ—Å–æ–≤"""
        if self.params is None:
            return None
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        G_all = data['–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞'].values
        T_all = data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'].values
        t_all = data['–í—Ä–µ–º—è_—á'].values
        sigma_exp_all = data['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'].values
        sigma_pred_all = sigma_phase_model(self.params, G_all, T_all, t_all) * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ—á–∫–∏ —è–≤–ª—è—é—Ç—Å—è –≤—ã–±—Ä–æ—Å–∞–º–∏
        is_outlier = np.zeros(len(data), dtype=bool)
        if self.outlier_info and self.outlier_info['outlier_data'] is not None:
            outlier_indices = self.outlier_info['outlier_data'].index
            is_outlier = data.index.isin(outlier_indices)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
                '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤',
                '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'
            )
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ vs —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
        clean_mask = ~is_outlier
        outlier_mask = is_outlier
        
        # –ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        fig.add_trace(
            go.Scatter(x=sigma_exp_all[clean_mask], y=sigma_pred_all[clean_mask], 
                      mode='markers', name='–ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ',
                      marker=dict(color='blue', size=8)),
            row=1, col=1
        )
        
        # –í—ã–±—Ä–æ—Å—ã
        if np.any(outlier_mask):
            fig.add_trace(
                go.Scatter(x=sigma_exp_all[outlier_mask], y=sigma_pred_all[outlier_mask],
                          mode='markers', name='–í—ã–±—Ä–æ—Å—ã',
                          marker=dict(color='red', size=10, symbol='x')),
                row=1, col=1
            )
        
        # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        max_val = max(sigma_exp_all.max(), sigma_pred_all.max())
        fig.add_trace(
            go.Scatter(x=[0, max_val], y=[0, max_val], mode='lines',
                      name='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', line=dict(dash='dash', color='black')),
            row=1, col=1
        )
        
        fig.update_xaxes(title_text='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (%)', row=1, col=1)
        fig.update_yaxes(title_text='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (%)', row=1, col=1)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        residuals = sigma_pred_all - sigma_exp_all
        fig.add_trace(
            go.Histogram(x=residuals, name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤',
                        marker_color='lightblue'),
            row=1, col=2
        )
        fig.update_xaxes(title_text='–û—Å—Ç–∞—Ç–∫–∏ (%)', row=1, col=2)
        fig.update_yaxes(title_text='–ß–∞—Å—Ç–æ—Ç–∞', row=1, col=2)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        unique_temps = sorted(data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'].unique())
        colors = ['red', 'blue', 'green', 'orange', 'purple']
        
        for i, temp in enumerate(unique_temps):
            if i >= len(colors):
                break
                
            temp_data = data[data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'] == temp]
            temp_outliers = temp_data[temp_data.index.isin(outlier_indices)] if np.any(outlier_mask) else pd.DataFrame()
            temp_clean = temp_data[~temp_data.index.isin(outlier_indices)] if np.any(outlier_mask) else temp_data
            
            # –ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(temp_clean) > 0:
                fig.add_trace(
                    go.Scatter(x=temp_clean['–í—Ä–µ–º—è_—á'], y=temp_clean['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'],
                              mode='markers', name=f'–ß–∏—Å—Ç—ã–µ {temp}K',
                              marker=dict(color=colors[i], size=8)),
                    row=2, col=1
                )
            
            # –í—ã–±—Ä–æ—Å—ã
            if len(temp_outliers) > 0:
                fig.add_trace(
                    go.Scatter(x=temp_outliers['–í—Ä–µ–º—è_—á'], y=temp_outliers['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'],
                              mode='markers', name=f'–í—ã–±—Ä–æ—Å—ã {temp}K',
                              marker=dict(color=colors[i], size=10, symbol='x')),
                    row=2, col=1
                )
        
        fig.update_xaxes(title_text='–í—Ä–µ–º—è (—á)', row=2, col=1)
        fig.update_yaxes(title_text='–°–∏–≥–º–∞-—Ñ–∞–∑–∞ (%)', row=2, col=1)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        unique_times = sorted(data['–í—Ä–µ–º—è_—á'].unique())[:3]  # –ü–µ—Ä–≤—ã–µ 3 –≤—Ä–µ–º–µ–Ω–∏
        for i, time_val in enumerate(unique_times):
            if i >= len(colors):
                break
                
            time_data = data[data['–í—Ä–µ–º—è_—á'] == time_val]
            time_outliers = time_data[time_data.index.isin(outlier_indices)] if np.any(outlier_mask) else pd.DataFrame()
            time_clean = time_data[~time_data.index.isin(outlier_indices)] if np.any(outlier_mask) else time_data
            
            # –ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(time_clean) > 0:
                fig.add_trace(
                    go.Scatter(x=time_clean['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K'] - 273.15, y=time_clean['–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç'],
                              mode='markers', name=f'–ß–∏—Å—Ç—ã–µ {time_val}—á',
                              marker=dict(color=colors[i], size=8)),
                    row=2, col=2
                )
        
        fig.update_xaxes(title_text='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', row=2, col=2)
        fig.update_yaxes(title_text='–°–∏–≥–º–∞-—Ñ–∞–∑–∞ (%)', row=2, col=2)
        
        fig.update_layout(height=800, showlegend=True)
        return fig
    
    def to_dict(self):
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'params': self.params.tolist() if self.params is not None else None,
            'R2': self.R2,
            'rmse': self.rmse,
            'outlier_info': self.outlier_info,
            'original_data': self.original_data.to_dict() if self.original_data is not None else None,
            'clean_data': self.clean_data.to_dict() if self.clean_data is not None else None,
            'model_version': self.model_version,
            'creation_date': self.creation_date,
            'last_modified': self.last_modified
        }
    
    @classmethod
    def from_dict(cls, data_dict):
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        analyzer = cls()
        analyzer.params = np.array(data_dict['params']) if data_dict['params'] is not None else None
        analyzer.R2 = data_dict['R2']
        analyzer.rmse = data_dict['rmse']
        analyzer.outlier_info = data_dict['outlier_info']
        
        if data_dict['original_data'] is not None:
            analyzer.original_data = pd.DataFrame(data_dict['original_data'])
        if data_dict['clean_data'] is not None:
            analyzer.clean_data = pd.DataFrame(data_dict['clean_data'])
            
        analyzer.model_version = data_dict.get('model_version', '1.0')
        analyzer.creation_date = data_dict.get('creation_date')
        analyzer.last_modified = data_dict.get('last_modified')
        
        return analyzer

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = None
    if 'current_data' not in st.session_state:
        st.session_state.current_data = None
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
    st.sidebar.header("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
            if st.session_state.analyzer is not None and st.session_state.current_data is not None:
                project_data = {
                    'analyzer': st.session_state.analyzer.to_dict(),
                    'current_data': st.session_state.current_data.to_dict()
                }
                
                project_json = json.dumps(project_data, indent=2)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    data=project_json,
                    file_name=f"sigma_phase_project_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                    mime="application/json"
                )
            else:
                st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    with col2:
        uploaded_project = st.sidebar.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            type=['json'],
            key="project_uploader"
        )
        
        if uploaded_project is not None:
            try:
                project_data = json.load(uploaded_project)
                st.session_state.analyzer = SigmaPhaseAnalyzer.from_dict(project_data['analyzer'])
                st.session_state.current_data = pd.DataFrame(project_data['current_data'])
                st.sidebar.success("–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            except Exception as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
    st.sidebar.header("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤")
    
    remove_outliers = st.sidebar.checkbox("–£–¥–∞–ª—è—Ç—å –≤—ã–±—Ä–æ—Å—ã", value=True)
    
    if remove_outliers:
        outlier_method = st.sidebar.selectbox(
            "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤",
            ['iqr', 'isolation_forest', 'residual'],
            format_func=lambda x: {
                'iqr': '–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)',
                'isolation_forest': 'Isolation Forest', 
                'residual': '–ü–æ –æ—Å—Ç–∞—Ç–∫–∞–º –º–æ–¥–µ–ª–∏'
            }[x]
        )
        
        contamination = st.sidebar.slider(
            "–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤", 
            min_value=0.01, max_value=0.3, value=0.1, step=0.01
        )
    else:
        outlier_method = 'none'
        contamination = 0.1
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å–∏–≥–º–∞-—Ñ–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    sample_data = pd.DataFrame({
        '–ù–æ–º–µ—Ä_–∑–µ—Ä–Ω–∞': [3, 3, 5, 5, 8, 8, 9, 9, 3, 5, 8],
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_C': [600, 650, 600, 700, 650, 700, 600, 700, 600, 650, 750],
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_K': [873, 923, 873, 973, 923, 973, 873, 973, 873, 923, 1023],
        '–í—Ä–µ–º—è_—á': [2000, 4000, 4000, 2000, 6000, 4000, 8000, 6000, 2000, 4000, 4000],
        '–°–∏–≥–º–∞_—Ñ–∞–∑–∞_–ø—Ä–æ—Ü–µ–Ω—Ç': [5.2, 12.5, 8.1, 15.3, 18.7, 25.1, 22.4, 35.2, 12.8, 25.6, 2.1]
    })
    
    @st.cache_data
    def convert_df_to_csv(df):
        return df.to_csv(index=False).encode('utf-8')
    
    sample_csv = convert_df_to_csv(sample_data)
    
    st.sidebar.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (CSV)",
        data=sample_csv,
        file_name="sample_sigma_phase_data.csv",
        mime="text/csv"
    )
    
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        type=['csv']
    )
    
    if uploaded_file is not None:
        st.session_state.current_data = pd.read_csv(uploaded_file)
    elif st.session_state.current_data is None:
        st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.session_state.current_data = sample_data
    
    # –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.header("üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    edited_data = st.data_editor(
        st.session_state.current_data,
        num_rows="dynamic",
        use_container_width=True
    )
    
    if not edited_data.equals(st.session_state.current_data):
        st.session_state.current_data = edited_data
        st.session_state.analyzer = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        st.rerun()
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if st.button("üéØ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏", use_container_width=True):
            analyzer = SigmaPhaseAnalyzer()
            
            with st.spinner("–ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤..."):
                success = analyzer.fit_model(
                    st.session_state.current_data, 
                    remove_outliers=remove_outliers,
                    outlier_method=outlier_method,
                    contamination=contamination
                )
            
            if success:
                st.session_state.analyzer = analyzer
                st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                st.rerun()
    
    if st.session_state.analyzer is not None:
        analyzer = st.session_state.analyzer
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–æ—Å–∞—Ö
        if remove_outliers and analyzer.outlier_info['outlier_count'] > 0:
            st.subheader("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã")
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤", analyzer.outlier_info['outlier_count'])
            with col2:
                st.metric("–î–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤", 
                         f"{analyzer.outlier_info['outlier_count']/analyzer.outlier_info['total_count']:.1%}")
            
            st.write("**–í—ã–±—Ä–æ—Å—ã:**")
            st.dataframe(analyzer.outlier_info['outlier_data'])
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        st.subheader("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
        
        if analyzer.params is not None:
            K0, a, b, n, T_sigma_min, T_sigma_max = analyzer.params
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("K‚ÇÄ", f"{K0:.2e}")
                st.metric("a", f"{a:.2f}")
            with col2:
                st.metric("b", f"{b:.2f}")
                st.metric("n", f"{n:.3f}")
            with col3:
                st.metric("T_min (¬∞C)", f"{T_sigma_min:.1f}")
            with col4:
                st.metric("T_max (¬∞C)", f"{T_sigma_max:.1f}")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("R¬≤", f"{analyzer.R2:.4f}")
            with col2:
                st.metric("RMSE", f"{analyzer.rmse:.2f}%")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            fig = analyzer.plot_results_with_outliers(st.session_state.current_data)
            st.plotly_chart(fig, use_container_width=True)
            
            # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            st.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                G_input = st.number_input("–ù–æ–º–µ—Ä –∑–µ—Ä–Ω–∞ (G)", 
                                        min_value=1.0, max_value=12.0, 
                                        value=5.0, step=0.1)
            with col2:
                sigma_input = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã (%)", 
                                            min_value=0.0, max_value=50.0,
                                            value=10.0, step=0.1,
                                            help="–û—Ç 0% –¥–æ 50%")
            with col3:
                t_input = st.number_input("–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (—á)", 
                                        min_value=100, max_value=100000,
                                        value=4000, step=100)
            
            if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", key="calc_temp"):
                try:
                    T_celsius = analyzer.predict_temperature(G_input, sigma_input, t_input)
                    
                    if T_celsius is not None:
                        st.success(f"""
                        ### –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:
                        - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:** {T_celsius:.1f}¬∞C
                        - –ü—Ä–∏ –Ω–æ–º–µ—Ä–µ –∑–µ—Ä–Ω–∞: {G_input}
                        - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–∏–≥–º–∞-—Ñ–∞–∑—ã: {sigma_input:.1f}%
                        - –ù–∞—Ä–∞–±–æ—Ç–∫–µ: {t_input} —á
                        - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–¥–µ–ª–∏:** {T_sigma_min:.1f}¬∞C - {T_sigma_max:.1f}¬∞C
                        """)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        if T_celsius <= T_sigma_min + 10:
                            st.warning("‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã")
                        elif T_celsius >= T_sigma_max - 10:
                            st.warning("‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è —Å–∏–≥–º–∞-—Ñ–∞–∑—ã")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")

if __name__ == "__main__":
    main()